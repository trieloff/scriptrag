# pytest configuration file
[pytest]
# Minimum version of pytest required
minversion = 7.0

# Command line options that should always be used
addopts =
    # Increase verbosity
    -v
    # Show extra test summary info
    -ra
    # Enable strict markers (fail on unknown markers)
    --strict-markers
    # Coverage options (streamlined for CI performance)
    --cov=scriptrag
    --cov-report=xml
    # Fail on warnings
    --strict-config
    # Show slowest 10 tests
    --durations=10
    # Enable color output
    --color=yes
    # Traceback format
    --tb=short
    # Continue on collection errors
    --continue-on-collection-errors

# Test discovery
testpaths = tests
python_files = test_*.py *_test.py
python_classes = Test* *Tests
python_functions = test_*

# Python path configuration
pythonpath = src

# Test markers
markers =
    # Test categories
    unit: Unit tests (fast, isolated)
    integration: Integration tests (may require external services)
    e2e: End-to-end tests (full system tests)
    slow: Slow running tests (deselect with '-m "not slow"')

    # Component markers
    parser: Tests for fountain parser components
    database: Tests for database/graph operations
    llm: Tests for LLM integration
    api: Tests for API endpoints
    cli: Tests for CLI commands
    mcp: Tests for MCP server

    # Feature markers
    search: Tests for search functionality
    scene: Tests for scene management
    graphrag: Tests for GraphRAG implementation

    # Special markers
    skipif: Skip test based on condition
    xfail: Expected failure
    parametrize: Parametrized test
    requires_llm: Tests that require LLM to be running
    requires_db: Tests that require database

    # Performance markers
    benchmark: Performance/benchmark tests
    stress: Stress tests

    # Environment markers
    ci_only: Only run in CI environment
    local_only: Only run in local environment

# Coverage configuration
[coverage:run]
source = src/scriptrag
branch = True
parallel = True
omit =
    */tests/*
    */test_*
    */__init__.py
    */migrations/*
    */scripts/*

[coverage:report]
precision = 2
show_missing = True
skip_covered = False
skip_empty = True
exclude_lines =
    # Standard pragma
    pragma: no cover

    # Debug-only code
    def __repr__
    if self\.debug

    # Defensive programming
    raise AssertionError
    raise NotImplementedError

    # Non-runnable code
    if 0:
    if False:
    if __name__ == .__main__.:

    # Type checking
    if TYPE_CHECKING:
    @(abc\.)?abstractmethod
    @(typing\.)?overload

    # Error handling
    except ImportError
    except KeyError
    except Exception

[coverage:html]
directory = htmlcov
show_contexts = True

[coverage:xml]
output = coverage.xml

# Logging configuration
[pytest.logging]
log_cli = True
log_cli_level = INFO
log_cli_format = %(asctime)s [%(levelname)8s] %(name)s: %(message)s
log_cli_date_format = %Y-%m-%d %H:%M:%S

log_file = tests/pytest.log
log_file_level = DEBUG
log_file_format = %(asctime)s [%(levelname)8s] %(name)s: %(message)s
log_file_date_format = %Y-%m-%d %H:%M:%S

# Asyncio configuration
[pytest.asyncio]
asyncio_mode = auto

# Timeout configuration
[pytest.timeout]
timeout = 60
timeout_method = thread
timeout_func_only = True

# Doctest configuration
[pytest.doctest]
doctest_optionflags = NORMALIZE_WHITESPACE IGNORE_EXCEPTION_DETAIL ELLIPSIS

# Environment variables for tests
[pytest.env]
TESTING = 1
LOG_LEVEL = DEBUG
DATABASE_URL = sqlite:///test_screenplay.db
LLM_ENDPOINT = http://localhost:1234/v1
DISABLE_CACHE = 1

# Plugin configuration
[pytest.plugins]
# Explicitly enable useful plugins
plugins =
    pytest_asyncio
    pytest_cov
    pytest_mock
    pytest_timeout
    pytest_benchmark
    pytest_xdist

# Warnings configuration
filterwarnings =
    # Ignore specific warnings
    ignore::DeprecationWarning
    ignore::PendingDeprecationWarning
    ignore::ResourceWarning
    # Treat these as errors
    error::UserWarning:scriptrag.*
    # Ignore third-party warnings
    ignore::DeprecationWarning:sqlalchemy.*
    ignore::DeprecationWarning:pydantic.*
