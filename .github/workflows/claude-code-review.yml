# Claude Code Review Workflow
#
# This workflow runs Claude Code review on pull requests with rate limiting:
# 1. Automatically when a new PR is opened (immediate feedback)
# 2. Can be called from other workflows (e.g., after CI passes)
# 3. Can be triggered manually via workflow_dispatch
#
# Rate Limiting: Only one review per PR per hour to prevent duplicate reviews
# and excessive API usage. Subsequent review attempts within an hour will be skipped.
#
# This is a reusable workflow that can be called from CI after all checks pass.

name: Claude Code Review

on:
  # Only run on new PRs
  pull_request:
    types: [opened]
    # Optional: Only run on specific file changes
    # paths:
    #   - "src/**/*.py"

  # Allow this workflow to be called from other workflows
  workflow_call:
    inputs:
      pr_number:
        description: 'Pull Request number to review'
        required: true
        type: string
    secrets:
      GH_TOKEN_FOR_CLAUDE:
        required: false
      CLAUDE_CODE_OAUTH_TOKEN:
        required: false

  # Allow manual triggering
  workflow_dispatch:
    inputs:
      pr_number:
        description: 'Pull Request number to review'
        required: false
        type: string

jobs:
  claude-review:
    # Skip only for known problematic bots
    if: |
      (github.event_name == 'pull_request' &&
       github.event.pull_request.user.login != 'dependabot[bot]' &&
       github.event.pull_request.user.login != 'renovate[bot]') ||
      github.event_name == 'workflow_dispatch' ||
      github.event_name == 'workflow_call'
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: write  # Changed from read to write for PR comments
      issues: read
      id-token: write
      models: read  # Enable GitHub Models for AI inference
    steps:
      # Get PR information when triggered by workflow_dispatch or workflow_call
      - name: Get PR Information
        if: github.event_name == 'workflow_dispatch' || github.event_name == 'workflow_call'
        id: pr-info
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GH_TOKEN_FOR_CLAUDE }}
          script: |
            const prNumber = '${{ inputs.pr_number }}';
            if (!prNumber) {
              console.log('No PR number provided');
              core.setOutput('skip', 'true');
              return;
            }

            // Get the PR details
            const { data: pr } = await github.rest.pulls.get({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: parseInt(prNumber)
            });

            core.setOutput('pr_number', pr.number);
            core.setOutput('pr_head_ref', pr.head.ref);
            core.setOutput('skip', 'false');

      - name: Check for Recent Claude Reviews
        id: check-recent-review
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GH_TOKEN_FOR_CLAUDE || github.token }}
          script: |
            // Determine PR number based on event type with proper fallback
            let prNumber;
            if (context.eventName === 'pull_request') {
              prNumber = context.issue.number;
            } else if (context.eventName === 'workflow_dispatch' || context.eventName === 'workflow_call') {
              // Explicit fallback: first try pr-info output, then inputs
              const prInfoNumber = '${{ steps.pr-info.outputs.pr_number }}';
              const inputsNumber = '${{ inputs.pr_number }}';
              const inputPrNumber = prInfoNumber || inputsNumber;

              if (inputPrNumber && inputPrNumber !== '') {
                prNumber = parseInt(inputPrNumber);
              }
            }

            if (!prNumber) {
              console.log('Could not determine PR number');
              core.setOutput('should_review', 'true');
              return;
            }

            console.log(`Checking for recent Claude reviews on PR #${prNumber}`);

            // Get comments on the PR from the last hour
            const oneHourAgo = new Date(Date.now() - 60 * 60 * 1000);

            try {
              const { data: comments } = await github.rest.issues.listComments({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: prNumber,
                since: oneHourAgo.toISOString()
              });

              // Check if any recent comment contains Claude review markers
              const hasRecentClaudeReview = comments.some(comment => {
                // Check for Claude-related keywords in the comment
                // Be specific to avoid false positives from general mentions
                const isClaudeReview =
                  comment.body.includes('Claude Code Review') ||
                  comment.body.includes('claude-code-review') ||
                  comment.body.includes('🤖 Generated with [Claude Code](https://claude.ai/code)') ||
                  comment.body.includes('Claude finished @') ||
                  (comment.user.login === 'github-actions[bot]' &&
                   comment.body.includes('Code quality and best practices'));

                if (isClaudeReview) {
                  const commentTime = new Date(comment.created_at);
                  console.log(`Found Claude review comment from ${comment.created_at}`);
                  return commentTime > oneHourAgo;
                }
                return false;
              });

              if (hasRecentClaudeReview) {
                console.log('Recent Claude review found (within 1 hour). Skipping new review.');
                core.setOutput('should_review', 'false');
                core.setOutput('skip_reason', 'recent_review_exists');
              } else {
                console.log('No recent Claude review found. Proceeding with review.');
                core.setOutput('should_review', 'true');
              }
            } catch (error) {
              console.error('Error checking for recent reviews:', error);
              // If we can't check, proceed with the review
              core.setOutput('should_review', 'true');
            }

      - name: Skip Review if Recent Review Exists
        if: steps.check-recent-review.outputs.should_review == 'false'
        run: |
          echo "⏰ Skipping Claude review - a review was already performed within the last hour"
          echo "This rate limiting prevents excessive API usage and duplicate reviews."
          exit 0

      - name: Detect AI-Generated Contributions
        id: detect-ai
        if: steps.check-recent-review.outputs.should_review != 'false'
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GH_TOKEN_FOR_CLAUDE || github.token }}
          script: |
            // Determine PR number based on event type
            let prNumber;
            if (context.eventName === 'pull_request') {
              prNumber = context.issue.number;
            } else {
              const prInfoNumber = '${{ steps.pr-info.outputs.pr_number }}';
              const inputsNumber = '${{ inputs.pr_number }}';
              prNumber = parseInt(prInfoNumber || inputsNumber || '0');
            }

            if (!prNumber) {
              console.log('Could not determine PR number for AI detection');
              core.setOutput('is_ai_generated', 'false');
              return;
            }

            try {
              // Get PR commits
              const { data: commits } = await github.rest.pulls.listCommits({
                owner: context.repo.owner,
                repo: context.repo.repo,
                pull_number: prNumber
              });

              // AI tool patterns to detect
              const aiPatterns = [
                /Co-Authored-By:\s*(Claude|Cursor|Windsurf|OpenAI|GitHub Copilot|Zed|OpenCode)/i,
                /Generated with \[Claude Code\]/i,
                /🤖 Generated with/i,
                /claude\.ai\/code/i,
                /cursor\.com/i,
                /windsurf\./i,
                /\[bot\].*authored/i,
                /AI-assisted/i,
                /AI-generated/i,
                /Copilot/i
              ];

              // Check commits for AI patterns
              let aiCommitCount = 0;
              let totalCommitCount = commits.length;

              for (const commit of commits) {
                const message = commit.commit.message;
                const author = commit.commit.author.name;
                const committer = commit.commit.committer.name;

                // Check commit message and authors for AI patterns
                const hasAIPattern = aiPatterns.some(pattern =>
                  pattern.test(message) ||
                  pattern.test(author) ||
                  pattern.test(committer)
                );

                if (hasAIPattern) {
                  aiCommitCount++;
                  console.log(`Found AI-generated commit: ${commit.sha.substring(0, 7)}`);
                }
              }

              const aiPercentage = (aiCommitCount / totalCommitCount) * 100;
              console.log(`AI-generated commits: ${aiCommitCount}/${totalCommitCount} (${aiPercentage.toFixed(1)}%)`);

              // Consider it AI-generated if >50% of commits are from AI tools
              const isAIGenerated = aiPercentage > 50;
              core.setOutput('is_ai_generated', isAIGenerated.toString());
              core.setOutput('ai_percentage', aiPercentage.toFixed(1));
              core.setOutput('ai_commit_count', aiCommitCount.toString());
              core.setOutput('total_commit_count', totalCommitCount.toString());

            } catch (error) {
              console.error('Error detecting AI contributions:', error);
              core.setOutput('is_ai_generated', 'false');
            }

      - name: Checkout repository
        if: (github.event_name == 'pull_request' || steps.pr-info.outputs.skip != 'true') && steps.check-recent-review.outputs.should_review != 'false'
        uses: actions/checkout@v4
        with:
          fetch-depth: 1
          token: ${{ secrets.GH_TOKEN_FOR_CLAUDE }}
          # For workflow_dispatch or workflow_call, checkout the PR branch
          ref: ${{ (github.event_name == 'workflow_dispatch' || github.event_name == 'workflow_call') && steps.pr-info.outputs.pr_head_ref || '' }}

      - name: Set up Python
        if: (github.event_name == 'pull_request' || steps.pr-info.outputs.skip != 'true') && steps.check-recent-review.outputs.should_review != 'false'
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install uv
        if: (github.event_name == 'pull_request' || steps.pr-info.outputs.skip != 'true') && steps.check-recent-review.outputs.should_review != 'false'
        run: |
          curl -LsSf https://astral.sh/uv/install.sh | sh
          echo "$HOME/.cargo/bin" >> $GITHUB_PATH

      - name: Setup project environment
        if: (github.event_name == 'pull_request' || steps.pr-info.outputs.skip != 'true') && steps.check-recent-review.outputs.should_review != 'false'
        run: |
          # Create virtual environment and install dependencies
          uv venv
          uv sync --all-extras
          # Activate venv for subsequent steps
          echo "VIRTUAL_ENV=$PWD/.venv" >> $GITHUB_ENV
          echo "$PWD/.venv/bin" >> $GITHUB_PATH

      - name: Run Claude Code Review
        if: (github.event_name == 'pull_request' || steps.pr-info.outputs.skip != 'true') && steps.check-recent-review.outputs.should_review != 'false'
        id: claude-review
        continue-on-error: true
        uses: anthropics/claude-code-action@beta
        with:
          claude_code_oauth_token: ${{ secrets.CLAUDE_CODE_OAUTH_TOKEN }}
          # Use dedicated GitHub token for Claude to bypass OIDC issues
          github_token: ${{ secrets.GH_TOKEN_FOR_CLAUDE }}
          # For workflow_dispatch or workflow_call events, specify the PR number
          pr_number: ${{ (github.event_name == 'workflow_dispatch' || github.event_name == 'workflow_call') && steps.pr-info.outputs.pr_number || '' }}

          # Optional: Specify model (defaults to Claude Sonnet 4, uncomment for Claude Opus 4)
          # model: "claude-opus-4-20250514"

          # Allow Claude to run quality checks
          allowed_tools: |
            Bash(make lint)
            Bash(make type-check)
            Bash(make test-fast)
            Bash(make check-fast)
            Bash(make format)
            Bash(uv run ruff check)
            Bash(uv run mypy)
            Bash(uv run pytest --no-cov -x)
            Bash(git diff)
            Bash(git status)

          # Dynamic prompt based on AI detection
          direct_prompt: |
            ${{ steps.detect-ai.outputs.is_ai_generated == 'true' && format('⚠️ AI-GENERATED CODE DETECTED: This PR contains {0}% AI-generated commits ({1}/{2}).', steps.detect-ai.outputs.ai_percentage, steps.detect-ai.outputs.ai_commit_count, steps.detect-ai.outputs.total_commit_count) || '' }}

            ${{ steps.detect-ai.outputs.is_ai_generated == 'true' && 'For AI-generated code, please adopt the review tone and standards from Linus Torvalds email about AI contributions: https://lore.kernel.org/lkml/CAHk-=wjLCqUUWd8DzG+xsOn-yVL0Q=O35U9D6j6=2DUWX52ghQ@mail.gmail.com/' || '' }}

            ${{ steps.detect-ai.outputs.is_ai_generated == 'true' && 'Key points from Linus: AI-generated code is "pure garbage" until proven otherwise. Be extremely skeptical and critical. Look for subtle bugs, hallucinations, and incorrect assumptions. Check for code that looks plausible but is actually wrong. Verify all logic, especially edge cases. Be harsh but constructive - the goal is quality, not politeness.' || '' }}

            Review this PR following ScriptRAG's guidelines:

            CRITICAL: First check TO-NEVER-DO.md to ensure changes align with project philosophy.

            Focus on:
            - Python code quality (line length: 88 chars, double quotes for strings)
            - Type annotations completeness (all functions must have types)
            - File size limits (max 1500 lines for regular files, 2000 for tests)
            - Screenplay domain correctness (respect Fountain format, writer autonomy)
            - Test coverage (maintain >80% for new code)
            - Security (no exposed secrets/keys)

            Verify:
            - Changes pass: make lint, make type-check, make test-fast
            - No modifications to creative content without explicit permission
            - Proper error handling for LLM APIs (rate limiting, timeouts)
            - Compliance with SQL_STYLE_GUIDE.md for any SQL changes

            ${{ steps.detect-ai.outputs.is_ai_generated == 'true' && 'Given the AI-generated code, be EXTRA thorough in checking for: Hallucinated imports or functions, Plausible-looking but incorrect logic, Missing edge case handling, Inconsistent error handling patterns, Code that violates project conventions.' || '' }}

            If issues found, tag @terragon-labs for notification.

            Reference specialized areas:
            - Fountain parsing issues → suggest screenplay-sorkin agent
            - Type errors → suggest type-veronica agent
            - Test failures → suggest test-holmes agent
            - Linting issues → suggest ruff-house agent

      - name: Report Claude Code Review Status
        if: always() && (github.event_name == 'pull_request' || steps.pr-info.outputs.skip != 'true') && steps.check-recent-review.outputs.should_review != 'false'
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GH_TOKEN_FOR_CLAUDE }}
          script: |
            const reviewOutcome = '${{ steps.claude-review.outcome }}';

            // Determine PR number based on event type
            let prNumber;
            if (context.eventName === 'pull_request') {
              prNumber = context.issue.number;
            } else if (context.eventName === 'workflow_dispatch' || context.eventName === 'workflow_call') {
              prNumber = parseInt('${{ steps.pr-info.outputs.pr_number }}');
            }

            if (!prNumber) {
              console.log('Could not determine PR number, skipping comment');
              return;
            }

            if (reviewOutcome === 'failure') {
              const comment = [
                '🤖 **Claude Code Review Notice**',
                '',
                '⚠️ The Claude Code review could not be completed due to a known issue.',
                '',
                'This is related to: https://github.com/anthropics/claude-code-action/issues/351',
                '',
                'The review failure does not indicate any problems with your code. This workflow step will continue to fail until the upstream issue is resolved.',
                '',
                '---',
                '_This is an automated message. You can safely ignore this notice._'
              ].join('\n');

              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: prNumber,
                body: comment
              });

              console.log('Claude Code Review failed - known upstream issue');
            } else if (reviewOutcome === 'success') {
              console.log('Claude Code Review completed successfully');
            } else {
              console.log(`Claude Code Review outcome: ${reviewOutcome}`);
            }

          # Optional: Use sticky comments to make Claude reuse the same comment on subsequent pushes to the same PR
          # use_sticky_comment: true
          # Optional: Skip review for certain conditions
          # if: |
          #   !contains(github.event.pull_request.title, '[skip-review]') &&
          #   !contains(github.event.pull_request.title, '[WIP]')
