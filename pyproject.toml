[project]
name = "scriptrag"
version = "0.1.0"
description = "A Graph-Based Screenwriting Assistant using GraphRAG pattern"
authors = [
    {name = "Lars Trieloff", email = "lars@trieloff.net"},
]
readme = "README.md"
license = {text = "MIT"}
requires-python = ">=3.11"
keywords = ["screenwriting", "fountain", "graphrag", "llm", "sqlite", "mcp"]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: Text Processing :: Linguistic",
]

dependencies = [
    # Core database dependencies
    "sqlite-vec>=0.1.0",  # Vector storage for embeddings
    "numpy>=1.24.0",  # Required for vector operations
    # API and networking
    "httpx>=0.25.0",  # Async HTTP client for LLM APIs
    "pydantic>=2.5.0",
    "pydantic-settings>=2.1.0",
    # CLI
    "typer>=0.9.0",
    "rich>=13.7.0",
    # Utilities
    "python-dotenv>=1.0.0",
    "pyyaml>=6.0.1",
    "structlog>=23.2.0",
    "tenacity>=8.2.0",  # Retry logic for LLM calls
    "python-frontmatter>=1.0.0",  # For parsing agent markdown files
    "jsonschema>=4.25.0",  # For validating agent output schemas
    # MCP server
    "mcp[cli]>=0.1.0",
    # LLM integration
    "claude-code-sdk>=0.0.20",  # Claude integration
    # Fountain parsing
    "jouvence>=0.4.2",
    # Git integration
    "gitpython>=3.1.0",
    # Markdown processing
    "markdown-it-py>=3.0.0",
    # File system monitoring
    "watchdog>=3.0.0",
]

[project.optional-dependencies]
dev = [
    # Testing
    "pytest>=7.4.0",
    "pytest-asyncio>=0.21.0",
    "pytest-cov>=4.1.0",
    "pytest-mock>=3.12.0",
    "pytest-timeout>=2.2.0",
    "hypothesis>=6.92.0",

    # Code quality
    "ruff>=0.1.0",
    "isort>=5.13.0",
    "mypy>=1.17.1",
    "types-PyYAML>=6.0.12.20250809",
    "types-requests>=2.31.0",
    "pre-commit>=3.6.0",
    "bandit[toml]>=1.7.5",  # Security linting
    "interrogate>=1.5.0",   # Docstring coverage
    "safety>=3.0.0",        # Dependency vulnerability scanner
    "vulture>=2.10",        # Dead code detection
    "pylint>=3.3.8",        # Additional linting (optional with ruff)
    "sqlfluff>=3.0.0",      # SQL linting

    # Documentation
    "mkdocs>=1.5.0",
    "mkdocs-material>=9.5.0",
    "mkdocstrings[python]>=0.24.0",

    # Development tools
    "ipython>=8.18.0",
    "jupyter>=1.0.0",
    "notebook>=7.0.0",
    "build>=1.3.0",  # Package building
    "twine>=5.0.0",  # Package validation and upload

    # Additional testing tools
    "pytest-benchmark>=4.0.0",  # Performance testing
    "pytest-xdist>=3.5.0",      # Parallel test execution
    "pytest-sugar>=0.9.7",      # Better test output formatting
    "coverage-badge>=1.1.0",    # Generate coverage badges
    "tox>=4.11.0",              # Test across Python versions
]

test = [
    "pytest>=7.4.0",
    "pytest-asyncio>=0.21.0",
    "pytest-cov>=4.1.0",
    "pytest-mock>=3.12.0",
    "pytest-timeout>=2.2.0",
    "pytest-xdist>=3.5.0",
    "hypothesis>=6.92.0",
]

docs = [
    "mkdocs>=1.5.0",
    "mkdocs-material>=9.5.0",
    "mkdocstrings[python]>=0.24.0",
]

[project.urls]
Homepage = "https://github.com/trieloff/scriptrag"
Documentation = "https://github.com/trieloff/scriptrag#readme"
Repository = "https://github.com/trieloff/scriptrag"
Issues = "https://github.com/trieloff/scriptrag/issues"

[project.scripts]
scriptrag = "scriptrag.cli.main:main"

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[tool.hatch.build.targets.wheel]
packages = ["src/scriptrag"]
exclude = [
    "**/CLAUDE.md",
    "**/*.backup",
    "**/tests/",
    "**/__pycache__/",
    "**/.pytest_cache/",
    "**/*.pyc",
    "**/*.pyo",
    "**/node_modules/",
]

[tool.hatch.build.targets.sdist]
exclude = [
    ".github/",
    ".claude/",
    "docs/",
    "tests/",
    "scripts/",
    "notebooks/",
    "examples/",
    "cache/",
    "logs/",
    "exports/",
    "temp/",
    "data/",
    "embeddings/",
    "test_data/",
    "**/CLAUDE.md",
    "**/*.backup",
    "**/__pycache__/",
    "**/.pytest_cache/",
    "**/*.pyc",
    "**/*.pyo",
    "**/node_modules/",
    "Makefile",
    "mkdocs.yml",
    "codecov.yml",
    "pyrightconfig.json",
    "pytest*.ini",
    "commit_fixes.sh",
    "terragon-setup.sh",
    "trigger_ci.txt",
    "uv.lock",
    "AGENTS.md",
    "AI_CONTENT_INDICATORS_DATABASE.md",
    "ARCHITECTURE.md",
    "SIMPLIFICATION_SUMMARY.md",
    "TEST_IMPROVEMENTS_SUMMARY.md",
    "TO-NEVER-DO.md",
    "TYPE_COVERAGE_IMPROVEMENTS.md",
    "WEEKLY_STATUS_REPORT.md",
    ".editorconfig",
    ".env.example",
    ".markdownlint.yaml",
    ".pre-commit-config.yaml",
    ".secrets.baseline",
    ".sqlfluff",
    ".sqlfluffignore",
    ".yamllint.yaml",
    ".gitattributes",
    "config.yaml",
]

[tool.hatch.version]
path = "src/scriptrag/__init__.py"

[tool.pytest.ini_options]
minversion = "7.0"
addopts = [
    "-ra",
    "--strict-markers",
    "--cov=scriptrag",
    "--cov-report=xml",  # Only XML for codecov.io
    "--timeout=300",  # 5 minute timeout per test
    "--timeout-method=thread",  # Use thread method for Windows compatibility
]
testpaths = ["tests"]
pythonpath = ["src"]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
    "requires_llm: marks tests as requiring LLM providers (skipped in CI by default)",
]
log_cli = true
log_cli_level = "INFO"
log_cli_format = "%(asctime)s [%(levelname)8s] %(name)s: %(message)s"
log_cli_date_format = "%Y-%m-%d %H:%M:%S"

[tool.coverage.run]
source = ["scriptrag"]
branch = true
parallel = true
concurrency = ["thread", "multiprocessing"]

[tool.coverage.report]
precision = 2
show_missing = true
skip_covered = false

[tool.ruff]
target-version = "py311"
line-length = 88
indent-width = 4

[tool.ruff.lint]
select = [
    "E",    # pycodestyle errors
    "W",    # pycodestyle warnings
    "F",    # pyflakes
    "I",    # isort
    "N",    # pep8-naming
    "D",    # pydocstyle
    "UP",   # pyupgrade (includes UP045 to prevent Optional[T], use T | None)
    "B",    # flake8-bugbear
    "C4",   # flake8-comprehensions
    "SIM",  # flake8-simplify
    "RUF",  # Ruff-specific rules
    "S",    # flake8-bandit (security)
    "PTH",  # flake8-use-pathlib
    "ERA",  # flake8-eradicate (commented code)
    "A",    # flake8-builtins
    "RET",  # flake8-return
    "ARG",  # flake8-unused-arguments
    "ISC",  # flake8-implicit-str-concat
    "TID",  # flake8-tidy-imports
    "FLY",  # flynt (string formatting)
]
ignore = [
    "D100", # Missing docstring in public module
    "D104", # Missing docstring in public package
    "D106", # Missing docstring in public nested class
    "S608", # Possible SQL injection vector (false positives for trusted queries)
    "B008", # FastAPI function call in argument defaults (Depends, File, etc.)
]

[tool.ruff.lint.per-file-ignores]
"tests/*" = ["D", "S101", "S110", "S108", "ARG001", "ARG002", "F841", "SIM117"]
"src/scriptrag/config/settings.py" = ["N805"]  # Pydantic field validators use cls, not self

[tool.ruff.lint.pydocstyle]
convention = "google"

# Temporarily disable mypy for problematic database files











[tool.ruff.format]
quote-style = "double"
indent-style = "space"
skip-magic-trailing-comma = false
line-ending = "auto"

[tool.mypy]
python_version = "3.11"
mypy_path = "stubs"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
follow_imports = "normal"
ignore_missing_imports = true
# Platform-agnostic configuration (no Darwin hardcoding)
# Tests are included by default for comprehensive type checking

# Per-module configuration for gradual strictness
[[tool.mypy.overrides]]
module = "tests.*"
# Less strict for tests
disallow_untyped_defs = false
disallow_incomplete_defs = false


[tool.isort]
profile = "ruff"
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true
line_length = 88

[tool.bandit]
exclude_dirs = ["tests", "docs"]
skips = ["B101", "B601", "B608", "B105", "B301", "B403"]  # Skip assert_used, shell_use, SQL injection tests, hardcoded password string, pickle usage and import (used for trusted cache only)

[tool.interrogate]
ignore-init-method = true
ignore-init-module = true
ignore-magic = true
ignore-semiprivate = true
ignore-private = true
ignore-property-decorators = true
ignore-module = true
ignore-nested-functions = true
ignore-nested-classes = true
fail-under = 80
exclude = ["tests", "docs", "scripts", "migrations"]
verbose = 1
quiet = false
whitelist-regex = []
color = true

[tool.vulture]
exclude = ["tests/", "docs/", ".venv/", "build/", "dist/"]
min_confidence = 80
paths = ["src/scriptrag"]
ignore_names = ["sql", "texts", "exc_type", "exc_val", "exc_tb"]  # Ignore Protocol method parameters and context manager args

[tool.pylint.messages_control]
disable = [
    "C0103",  # Invalid name (we use some short names)
    "C0114",  # Missing module docstring (handled by interrogate)
    "C0115",  # Missing class docstring (handled by interrogate)
    "C0116",  # Missing function docstring (handled by interrogate)
    "R0903",  # Too few public methods
    "R0913",  # Too many arguments
    "W0212",  # Protected member access
    "E1101",  # No member (false positives with dynamic attributes)
]

[tool.tox]
legacy_tox_ini = """
[tox]
envlist = py311,py312,py313,lint,type,security
isolated_build = true

[testenv]
deps =
    pytest
    pytest-cov
    pytest-asyncio
commands = pytest {posargs}

[testenv:lint]
deps =
    ruff
    interrogate
commands =
    ruff check src tests
    interrogate -c pyproject.toml

[testenv:type]
deps =
    mypy
    types-pyyaml
    types-requests
commands = mypy src

[testenv:security]
deps =
    bandit[toml]
    safety
commands =
    bandit -r src -f json
    safety check
"""
