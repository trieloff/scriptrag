[1m============================= test session starts ==============================[0m
platform linux -- Python 3.11.13, pytest-8.4.1, pluggy-1.6.0 -- /root/repo/.venv/bin/python
cachedir: .pytest_cache
hypothesis profile 'default'
benchmark: 5.1.0 (defaults: timer=time.perf_counter disable_gc=False min_rounds=5 min_time=0.000005 max_time=1.0 calibration_precision=10 warmup=False warmup_iterations=100000)
rootdir: /root/repo
configfile: pytest.ini
testpaths: tests
plugins: cov-6.2.1, hypothesis-6.136.6, asyncio-1.1.0, timeout-2.4.0, sugar-1.0.0, mock-3.14.1, anyio-4.9.0, xdist-3.8.0, benchmark-5.1.0
asyncio: mode=Mode.STRICT, asyncio_default_fixture_loop_scope=None, asyncio_default_test_loop_scope=function
[1mcollecting ... [0mcollected 1132 items

tests/config/test_logging.py::TestConfigureLogging::test_default_configuration [32mPASSED[0m
tests/config/test_logging.py::TestConfigureLogging::test_log_level_configuration [32mPASSED[0m
tests/config/test_logging.py::TestConfigureLogging::test_case_insensitive_log_level [32mPASSED[0m
tests/config/test_logging.py::TestConfigureLogging::test_invalid_log_level_defaults_to_info [32mPASSED[0m
tests/config/test_logging.py::TestConfigureLogging::test_dev_mode_configuration [32mPASSED[0m
tests/config/test_logging.py::TestConfigureLogging::test_json_logs_configuration [32mPASSED[0m
tests/config/test_logging.py::TestConfigureLogging::test_plain_text_production_mode [32mPASSED[0m
tests/config/test_logging.py::TestConfigureLogging::test_file_logging [32mPASSED[0m
tests/config/test_logging.py::TestConfigureLogging::test_file_logging_directory_creation [32mPASSED[0m
tests/config/test_logging.py::TestConfigureLogging::test_file_logging_json_format [32mPASSED[0m
tests/config/test_logging.py::TestConfigureLogging::test_structlog_configuration_called [32mPASSED[0m
tests/config/test_logging.py::TestConfigureLogging::test_file_logging_permission_error [32mPASSED[0m
tests/config/test_logging.py::TestGetLogger::test_get_logger_returns_structlog_instance [32mPASSED[0m
tests/config/test_logging.py::TestGetLogger::test_logger_name_preservation [32mPASSED[0m
tests/config/test_logging.py::TestThirdPartyLogging::test_configure_sqlalchemy_logging [32mPASSED[0m
tests/config/test_logging.py::TestThirdPartyLogging::test_configure_sqlalchemy_logging_case_insensitive [32mPASSED[0m
tests/config/test_logging.py::TestThirdPartyLogging::test_configure_httpx_logging [32mPASSED[0m
tests/config/test_logging.py::TestThirdPartyLogging::test_configure_httpx_logging_custom_level [32mPASSED[0m
tests/config/test_logging.py::TestThirdPartyLogging::test_configure_sqlalchemy_logging_invalid_level [32mPASSED[0m
tests/config/test_logging.py::TestThirdPartyLogging::test_configure_httpx_logging_invalid_level [32mPASSED[0m
tests/config/test_logging.py::TestLoggingConfigs::test_development_config [32mPASSED[0m
tests/config/test_logging.py::TestLoggingConfigs::test_testing_config [32mPASSED[0m
tests/config/test_logging.py::TestLoggingConfigs::test_production_config [32mPASSED[0m
tests/config/test_logging.py::TestSetupLoggingForEnvironment::test_development_environment_setup [2m2025-07-31T06:47:11.463434Z[0m [[32m[1minfo     [0m] [1mLogging configured            [0m [36menvironment[0m=[35mdevelopment[0m [36mjson_logs[0m=[35mFalse[0m [36mlog_file[0m=[35mNone[0m [36mlog_level[0m=[35mDEBUG[0m
[32mPASSED[0m
tests/config/test_logging.py::TestSetupLoggingForEnvironment::test_testing_environment_setup [32mPASSED[0m
tests/config/test_logging.py::TestSetupLoggingForEnvironment::test_production_environment_setup [32mPASSED[0m
tests/config/test_logging.py::TestSetupLoggingForEnvironment::test_unknown_environment_defaults_to_development [2m2025-07-31T06:47:11.471625Z[0m [[32m[1minfo     [0m] [1mLogging configured            [0m [36menvironment[0m=[35munknown[0m [36mjson_logs[0m=[35mFalse[0m [36mlog_file[0m=[35mNone[0m [36mlog_level[0m=[35mDEBUG[0m
[32mPASSED[0m
tests/config/test_logging.py::TestSetupLoggingForEnvironment::test_environment_setup_with_log_file {"environment": "production", "log_level": "INFO", "json_logs": true, "log_file": "/tmp/pytest-of-root/pytest-2/test_environment_setup_with_lo0/app.log", "event": "Logging configured", "level": "info", "timestamp": "2025-07-31T06:47:11.475189Z"}
[32mPASSED[0m
tests/config/test_logging.py::TestSetupLoggingForEnvironment::test_setup_logs_configuration [32mPASSED[0m
tests/config/test_logging.py::TestTemporaryLogLevel::test_temporary_log_level_change [32mPASSED[0m
tests/config/test_logging.py::TestTemporaryLogLevel::test_temporary_log_level_case_insensitive [32mPASSED[0m
tests/config/test_logging.py::TestTemporaryLogLevel::test_temporary_log_level_with_exception [32mPASSED[0m
tests/config/test_logging.py::TestTemporaryLogLevel::test_nested_temporary_log_levels [32mPASSED[0m
tests/config/test_logging.py::TestTemporaryLogLevel::test_temporary_log_level_none_original_level [32mPASSED[0m
tests/config/test_logging.py::TestLoggingIntegration::test_full_logging_workflow [32mPASSED[0m
tests/config/test_logging.py::TestLoggingIntegration::test_contextual_logging [32mPASSED[0m
tests/config/test_logging.py::TestLoggingIntegration::test_exception_logging [32mPASSED[0m
tests/config/test_logging.py::TestLoggingIntegration::test_multiple_logger_instances [32mPASSED[0m
tests/config/test_logging.py::TestLoggingIntegration::test_file_handler_configuration [32mPASSED[0m
tests/config/test_logging.py::TestLoggingIntegration::test_logging_performance [32mPASSED[0m
tests/config/test_settings.py::TestDatabaseSettings::test_default_values [32mPASSED[0m
tests/config/test_settings.py::TestDatabaseSettings::test_path_parent_directory_creation [32mPASSED[0m
tests/config/test_settings.py::TestDatabaseSettings::test_environment_variable_override [32mPASSED[0m
tests/config/test_settings.py::TestLLMSettings::test_default_values [32mPASSED[0m
tests/config/test_settings.py::TestLLMSettings::test_temperature_validation [32mPASSED[0m
tests/config/test_settings.py::TestLLMSettings::test_top_p_validation [32mPASSED[0m
tests/config/test_settings.py::TestLLMSettings::test_environment_variable_override [32mPASSED[0m
tests/config/test_settings.py::TestLoggingSettings::test_default_values [32mPASSED[0m
tests/config/test_settings.py::TestLoggingSettings::test_log_level_validation [32mPASSED[0m
tests/config/test_settings.py::TestLoggingSettings::test_multiple_log_level_validation [32mPASSED[0m
tests/config/test_settings.py::TestLoggingSettings::test_environment_variable_override [32mPASSED[0m
tests/config/test_settings.py::TestMCPSettings::test_default_values [32mPASSED[0m
tests/config/test_settings.py::TestMCPSettings::test_environment_variable_override [32mPASSED[0m
tests/config/test_settings.py::TestPerformanceSettings::test_default_values [32mPASSED[0m
tests/config/test_settings.py::TestPerformanceSettings::test_environment_variable_override [32mPASSED[0m
tests/config/test_settings.py::TestPathSettings::test_default_values [32mPASSED[0m
tests/config/test_settings.py::TestPathSettings::test_directory_creation [32mPASSED[0m
tests/config/test_settings.py::TestPathSettings::test_environment_variable_override [32mPASSED[0m
tests/config/test_settings.py::TestAPISettings::test_default_values [32mPASSED[0m
tests/config/test_settings.py::TestAPISettings::test_environment_variable_override [32mPASSED[0m
tests/config/test_settings.py::TestScriptRAGSettings::test_default_values [32mPASSED[0m
tests/config/test_settings.py::TestScriptRAGSettings::test_environment_validation [32mPASSED[0m
tests/config/test_settings.py::TestScriptRAGSettings::test_nested_environment_variables [32mPASSED[0m
tests/config/test_settings.py::TestScriptRAGSettings::test_from_yaml [32mPASSED[0m
tests/config/test_settings.py::TestScriptRAGSettings::test_from_yaml_file_not_found [32mPASSED[0m
tests/config/test_settings.py::TestScriptRAGSettings::test_to_yaml [32mPASSED[0m
tests/config/test_settings.py::TestScriptRAGSettings::test_get_log_file_path [32mPASSED[0m
tests/config/test_settings.py::TestScriptRAGSettings::test_get_database_path [32mPASSED[0m
tests/config/test_settings.py::TestScriptRAGSettings::test_property_accessors [32mPASSED[0m
tests/config/test_settings.py::TestScriptRAGSettings::test_env_file_loading [32mPASSED[0m
tests/config/test_settings.py::TestGlobalSettings::test_get_settings [32mPASSED[0m
tests/config/test_settings.py::TestGlobalSettings::test_load_settings_from_file [32mPASSED[0m
tests/config/test_settings.py::TestGlobalSettings::test_load_settings_without_file [32mPASSED[0m
tests/config/test_settings.py::TestGlobalSettings::test_reset_settings [32mPASSED[0m
tests/config/test_settings.py::TestDefaultConfigTemplate::test_create_default_config [32mPASSED[0m
tests/config/test_settings.py::TestDefaultConfigTemplate::test_create_default_config_with_subdirs [32mPASSED[0m
tests/config/test_settings.py::TestSettingsIntegration::test_complete_configuration_workflow [32mPASSED[0m
tests/config/test_settings.py::TestSettingsIntegration::test_settings_isolation [32mPASSED[0m
tests/config/test_settings.py::TestSettingsIntegration::test_validation_error_messages [32mPASSED[0m
tests/database/test_content_extractor.py::TestContentExtractorEdgeCases::test_dialogue_with_special_formatting {"event": "Migration sequence is valid", "level": "info", "timestamp": "2025-07-31T06:47:12.283270Z"}
{"event": "Applying 5 pending migrations", "level": "info", "timestamp": "2025-07-31T06:47:12.284594Z"}
{"event": "Applying Migration 1: Create initial database schema", "level": "info", "timestamp": "2025-07-31T06:47:12.284789Z"}
{"event": "Applying initial schema migration", "level": "info", "timestamp": "2025-07-31T06:47:12.285228Z"}
{"event": "Initial schema migration completed", "level": "info", "timestamp": "2025-07-31T06:47:12.387692Z"}
{"event": "Successfully applied migration 1", "level": "info", "timestamp": "2025-07-31T06:47:12.389053Z"}
{"event": "Applying Migration 2: Add sqlite-vec vector storage support to embeddings table", "level": "info", "timestamp": "2025-07-31T06:47:12.389323Z"}
{"event": "Vector storage migration applied successfully", "level": "info", "timestamp": "2025-07-31T06:47:12.403361Z"}
{"event": "Successfully applied migration 2", "level": "info", "timestamp": "2025-07-31T06:47:12.404811Z"}
{"event": "Applying Migration 3: Fix FTS table column naming to match base tables", "level": "info", "timestamp": "2025-07-31T06:47:12.405003Z"}
{"event": "Applying FTS column naming fix migration", "level": "info", "timestamp": "2025-07-31T06:47:12.405490Z"}
{"event": "FTS column naming fix migration applied successfully", "level": "info", "timestamp": "2025-07-31T06:47:12.428855Z"}
{"event": "Successfully applied migration 3", "level": "info", "timestamp": "2025-07-31T06:47:12.430376Z"}
{"event": "Applying Migration 4: Add scene dependencies table for logical ordering", "level": "info", "timestamp": "2025-07-31T06:47:12.430575Z"}
{"event": "Applying scene dependencies migration", "level": "info", "timestamp": "2025-07-31T06:47:12.430969Z"}
{"event": "Scene dependencies migration applied successfully", "level": "info", "timestamp": "2025-07-31T06:47:12.442340Z"}
{"event": "Successfully applied migration 4", "level": "info", "timestamp": "2025-07-31T06:47:12.444681Z"}
{"event": "Applying Migration 0: ", "level": "info", "timestamp": "2025-07-31T06:47:12.445343Z"}
{"event": "Applying Script Bible migration", "level": "info", "timestamp": "2025-07-31T06:47:12.445907Z"}
{"event": "Script Bible migration applied successfully", "level": "info", "timestamp": "2025-07-31T06:47:12.544606Z"}
{"event": "Successfully applied migration 5", "level": "info", "timestamp": "2025-07-31T06:47:12.546238Z"}
{"event": "Database migration completed successfully", "level": "info", "timestamp": "2025-07-31T06:47:12.546418Z"}
[32mPASSED[0m
tests/database/test_content_extractor.py::TestContentExtractorEdgeCases::test_action_lines_with_embedded_emphasis {"event": "Migration sequence is valid", "level": "info", "timestamp": "2025-07-31T06:47:12.573473Z"}
{"event": "Applying 5 pending migrations", "level": "info", "timestamp": "2025-07-31T06:47:12.574287Z"}
{"event": "Applying Migration 1: Create initial database schema", "level": "info", "timestamp": "2025-07-31T06:47:12.574442Z"}
{"event": "Applying initial schema migration", "level": "info", "timestamp": "2025-07-31T06:47:12.574700Z"}
{"event": "Initial schema migration completed", "level": "info", "timestamp": "2025-07-31T06:47:12.695407Z"}
{"event": "Successfully applied migration 1", "level": "info", "timestamp": "2025-07-31T06:47:12.697143Z"}
{"event": "Applying Migration 2: Add sqlite-vec vector storage support to embeddings table", "level": "info", "timestamp": "2025-07-31T06:47:12.697416Z"}
{"event": "Vector storage migration applied successfully", "level": "info", "timestamp": "2025-07-31T06:47:12.713477Z"}
{"event": "Successfully applied migration 2", "level": "info", "timestamp": "2025-07-31T06:47:12.715612Z"}
{"event": "Applying Migration 3: Fix FTS table column naming to match base tables", "level": "info", "timestamp": "2025-07-31T06:47:12.715932Z"}
{"event": "Applying FTS column naming fix migration", "level": "info", "timestamp": "2025-07-31T06:47:12.716435Z"}
{"event": "FTS column naming fix migration applied successfully", "level": "info", "timestamp": "2025-07-31T06:47:12.746952Z"}
{"event": "Successfully applied migration 3", "level": "info", "timestamp": "2025-07-31T06:47:12.748621Z"}
{"event": "Applying Migration 4: Add scene dependencies table for logical ordering", "level": "info", "timestamp": "2025-07-31T06:47:12.748863Z"}
{"event": "Applying scene dependencies migration", "level": "info", "timestamp": "2025-07-31T06:47:12.749289Z"}
{"event": "Scene dependencies migration applied successfully", "level": "info", "timestamp": "2025-07-31T06:47:12.760553Z"}
{"event": "Successfully applied migration 4", "level": "info", "timestamp": "2025-07-31T06:47:12.762385Z"}
{"event": "Applying Migration 0: ", "level": "info", "timestamp": "2025-07-31T06:47:12.762625Z"}
{"event": "Applying Script Bible migration", "level": "info", "timestamp": "2025-07-31T06:47:12.763133Z"}
{"event": "Script Bible migration applied successfully", "level": "info", "timestamp": "2025-07-31T06:47:12.856921Z"}
{"event": "Successfully applied migration 5", "level": "info", "timestamp": "2025-07-31T06:47:12.858829Z"}
{"event": "Database migration completed successfully", "level": "info", "timestamp": "2025-07-31T06:47:12.859002Z"}
[32mPASSED[0m
tests/database/test_content_extractor.py::TestContentExtractorEdgeCases::test_character_names_with_extensions {"event": "Migration sequence is valid", "level": "info", "timestamp": "2025-07-31T06:47:12.877087Z"}
{"event": "Applying 5 pending migrations", "level": "info", "timestamp": "2025-07-31T06:47:12.878360Z"}
{"event": "Applying Migration 1: Create initial database schema", "level": "info", "timestamp": "2025-07-31T06:47:12.878509Z"}
{"event": "Applying initial schema migration", "level": "info", "timestamp": "2025-07-31T06:47:12.878870Z"}
{"event": "Initial schema migration completed", "level": "info", "timestamp": "2025-07-31T06:47:12.983795Z"}
{"event": "Successfully applied migration 1", "level": "info", "timestamp": "2025-07-31T06:47:12.985699Z"}
{"event": "Applying Migration 2: Add sqlite-vec vector storage support to embeddings table", "level": "info", "timestamp": "2025-07-31T06:47:12.985943Z"}
{"event": "Vector storage migration applied successfully", "level": "info", "timestamp": "2025-07-31T06:47:13.000416Z"}
{"event": "Successfully applied migration 2", "level": "info", "timestamp": "2025-07-31T06:47:13.002220Z"}
{"event": "Applying Migration 3: Fix FTS table column naming to match base tables", "level": "info", "timestamp": "2025-07-31T06:47:13.002430Z"}
{"event": "Applying FTS column naming fix migration", "level": "info", "timestamp": "2025-07-31T06:47:13.002848Z"}
{"event": "FTS column naming fix migration applied successfully", "level": "info", "timestamp": "2025-07-31T06:47:13.028176Z"}
{"event": "Successfully applied migration 3", "level": "info", "timestamp": "2025-07-31T06:47:13.030080Z"}
{"event": "Applying Migration 4: Add scene dependencies table for logical ordering", "level": "info", "timestamp": "2025-07-31T06:47:13.030306Z"}
{"event": "Applying scene dependencies migration", "level": "info", "timestamp": "2025-07-31T06:47:13.030701Z"}
{"event": "Scene dependencies migration applied successfully", "level": "info", "timestamp": "2025-07-31T06:47:13.039586Z"}
{"event": "Successfully applied migration 4", "level": "info", "timestamp": "2025-07-31T06:47:13.040902Z"}
{"event": "Applying Migration 0: ", "level": "info", "timestamp": "2025-07-31T06:47:13.041056Z"}
{"event": "Applying Script Bible migration", "level": "info", "timestamp": "2025-07-31T06:47:13.041497Z"}
{"event": "Script Bible migration applied successfully", "level": "info", "timestamp": "2025-07-31T06:47:13.149610Z"}
{"event": "Successfully applied migration 5", "level": "info", "timestamp": "2025-07-31T06:47:13.151198Z"}
{"event": "Database migration completed successfully", "level": "info", "timestamp": "2025-07-31T06:47:13.151366Z"}
[32mPASSED[0m
tests/database/test_content_extractor.py::TestContentExtractorEdgeCases::test_dual_dialogue_handling {"event": "Migration sequence is valid", "level": "info", "timestamp": "2025-07-31T06:47:13.172846Z"}
{"event": "Applying 5 pending migrations", "level": "info", "timestamp": "2025-07-31T06:47:13.173693Z"}
{"event": "Applying Migration 1: Create initial database schema", "level": "info", "timestamp": "2025-07-31T06:47:13.173864Z"}
{"event": "Applying initial schema migration", "level": "info", "timestamp": "2025-07-31T06:47:13.174138Z"}
{"event": "Initial schema migration completed", "level": "info", "timestamp": "2025-07-31T06:47:13.271670Z"}
{"event": "Successfully applied migration 1", "level": "info", "timestamp": "2025-07-31T06:47:13.274648Z"}
{"event": "Applying Migration 2: Add sqlite-vec vector storage support to embeddings table", "level": "info", "timestamp": "2025-07-31T06:47:13.274889Z"}
{"event": "Vector storage migration applied successfully", "level": "info", "timestamp": "2025-07-31T06:47:13.288651Z"}
{"event": "Successfully applied migration 2", "level": "info", "timestamp": "2025-07-31T06:47:13.290497Z"}
{"event": "Applying Migration 3: Fix FTS table column naming to match base tables", "level": "info", "timestamp": "2025-07-31T06:47:13.290693Z"}
{"event": "Applying FTS column naming fix migration", "level": "info", "timestamp": "2025-07-31T06:47:13.291203Z"}
{"event": "FTS column naming fix migration applied successfully", "level": "info", "timestamp": "2025-07-31T06:47:13.315635Z"}
{"event": "Successfully applied migration 3", "level": "info", "timestamp": "2025-07-31T06:47:13.317139Z"}
{"event": "Applying Migration 4: Add scene dependencies table for logical ordering", "level": "info", "timestamp": "2025-07-31T06:47:13.317459Z"}
{"event": "Applying scene dependencies migration", "level": "info", "timestamp": "2025-07-31T06:47:13.317954Z"}
{"event": "Scene dependencies migration applied successfully", "level": "info", "timestamp": "2025-07-31T06:47:13.327608Z"}
{"event": "Successfully applied migration 4", "level": "info", "timestamp": "2025-07-31T06:47:13.329077Z"}
{"event": "Applying Migration 0: ", "level": "info", "timestamp": "2025-07-31T06:47:13.329349Z"}
{"event": "Applying Script Bible migration", "level": "info", "timestamp": "2025-07-31T06:47:13.329893Z"}
{"event": "Script Bible migration applied successfully", "level": "info", "timestamp": "2025-07-31T06:47:13.440829Z"}
{"event": "Successfully applied migration 5", "level": "info", "timestamp": "2025-07-31T06:47:13.443027Z"}
{"event": "Database migration completed successfully", "level": "info", "timestamp": "2025-07-31T06:47:13.443240Z"}
[32mPASSED[0m
tests/database/test_content_extractor.py::TestContentExtractorEdgeCases::test_complex_transitions {"event": "Migration sequence is valid", "level": "info", "timestamp": "2025-07-31T06:47:13.464993Z"}
{"event": "Applying 5 pending migrations", "level": "info", "timestamp": "2025-07-31T06:47:13.466191Z"}
{"event": "Applying Migration 1: Create initial database schema", "level": "info", "timestamp": "2025-07-31T06:47:13.466349Z"}
{"event": "Applying initial schema migration", "level": "info", "timestamp": "2025-07-31T06:47:13.466719Z"}
{"event": "Initial schema migration completed", "level": "info", "timestamp": "2025-07-31T06:47:13.572008Z"}
{"event": "Successfully applied migration 1", "level": "info", "timestamp": "2025-07-31T06:47:13.573711Z"}
{"event": "Applying Migration 2: Add sqlite-vec vector storage support to embeddings table", "level": "info", "timestamp": "2025-07-31T06:47:13.573936Z"}
{"event": "Vector storage migration applied successfully", "level": "info", "timestamp": "2025-07-31T06:47:13.587461Z"}
{"event": "Successfully applied migration 2", "level": "info", "timestamp": "2025-07-31T06:47:13.589159Z"}
{"event": "Applying Migration 3: Fix FTS table column naming to match base tables", "level": "info", "timestamp": "2025-07-31T06:47:13.589454Z"}
{"event": "Applying FTS column naming fix migration", "level": "info", "timestamp": "2025-07-31T06:47:13.589922Z"}
{"event": "FTS column naming fix migration applied successfully", "level": "info", "timestamp": "2025-07-31T06:47:13.614236Z"}
{"event": "Successfully applied migration 3", "level": "info", "timestamp": "2025-07-31T06:47:13.615628Z"}
{"event": "Applying Migration 4: Add scene dependencies table for logical ordering", "level": "info", "timestamp": "2025-07-31T06:47:13.615822Z"}
{"event": "Applying scene dependencies migration", "level": "info", "timestamp": "2025-07-31T06:47:13.616197Z"}
{"event": "Scene dependencies migration applied successfully", "level": "info", "timestamp": "2025-07-31T06:47:13.625085Z"}
{"event": "Successfully applied migration 4", "level": "info", "timestamp": "2025-07-31T06:47:13.626668Z"}
{"event": "Applying Migration 0: ", "level": "info", "timestamp": "2025-07-31T06:47:13.626874Z"}
{"event": "Applying Script Bible migration", "level": "info", "timestamp": "2025-07-31T06:47:13.627238Z"}
{"event": "Script Bible migration applied successfully", "level": "info", "timestamp": "2025-07-31T06:47:13.725824Z"}
{"event": "Successfully applied migration 5", "level": "info", "timestamp": "2025-07-31T06:47:13.727677Z"}
{"event": "Database migration completed successfully", "level": "info", "timestamp": "2025-07-31T06:47:13.727931Z"}
[32mPASSED[0m
tests/database/test_content_extractor.py::TestContentExtractorEdgeCases::test_malformed_fountain_syntax {"event": "Migration sequence is valid", "level": "info", "timestamp": "2025-07-31T06:47:13.749277Z"}
{"event": "Applying 5 pending migrations", "level": "info", "timestamp": "2025-07-31T06:47:13.750342Z"}
{"event": "Applying Migration 1: Create initial database schema", "level": "info", "timestamp": "2025-07-31T06:47:13.750484Z"}
{"event": "Applying initial schema migration", "level": "info", "timestamp": "2025-07-31T06:47:13.750901Z"}
{"event": "Initial schema migration completed", "level": "info", "timestamp": "2025-07-31T06:47:13.851631Z"}
{"event": "Successfully applied migration 1", "level": "info", "timestamp": "2025-07-31T06:47:13.852970Z"}
{"event": "Applying Migration 2: Add sqlite-vec vector storage support to embeddings table", "level": "info", "timestamp": "2025-07-31T06:47:13.853147Z"}
{"event": "Vector storage migration applied successfully", "level": "info", "timestamp": "2025-07-31T06:47:13.866551Z"}
{"event": "Successfully applied migration 2", "level": "info", "timestamp": "2025-07-31T06:47:13.867969Z"}
{"event": "Applying Migration 3: Fix FTS table column naming to match base tables", "level": "info", "timestamp": "2025-07-31T06:47:13.868148Z"}
{"event": "Applying FTS column naming fix migration", "level": "info", "timestamp": "2025-07-31T06:47:13.868536Z"}
{"event": "FTS column naming fix migration applied successfully", "level": "info", "timestamp": "2025-07-31T06:47:13.891490Z"}
{"event": "Successfully applied migration 3", "level": "info", "timestamp": "2025-07-31T06:47:13.892834Z"}
{"event": "Applying Migration 4: Add scene dependencies table for logical ordering", "level": "info", "timestamp": "2025-07-31T06:47:13.893016Z"}
{"event": "Applying scene dependencies migration", "level": "info", "timestamp": "2025-07-31T06:47:13.893458Z"}
{"event": "Scene dependencies migration applied successfully", "level": "info", "timestamp": "2025-07-31T06:47:13.902599Z"}
{"event": "Successfully applied migration 4", "level": "info", "timestamp": "2025-07-31T06:47:13.903955Z"}
{"event": "Applying Migration 0: ", "level": "info", "timestamp": "2025-07-31T06:47:13.904128Z"}
{"event": "Applying Script Bible migration", "level": "info", "timestamp": "2025-07-31T06:47:13.904514Z"}
{"event": "Script Bible migration applied successfully", "level": "info", "timestamp": "2025-07-31T06:47:13.994302Z"}
{"event": "Successfully applied migration 5", "level": "info", "timestamp": "2025-07-31T06:47:13.995595Z"}
{"event": "Database migration completed successfully", "level": "info", "timestamp": "2025-07-31T06:47:13.995766Z"}
[32mPASSED[0m
tests/database/test_content_extractor.py::TestContentExtractorEdgeCases::test_scene_without_elements {"event": "Migration sequence is valid", "level": "info", "timestamp": "2025-07-31T06:47:14.022016Z"}
{"event": "Applying 5 pending migrations", "level": "info", "timestamp": "2025-07-31T06:47:14.022843Z"}
{"event": "Applying Migration 1: Create initial database schema", "level": "info", "timestamp": "2025-07-31T06:47:14.022979Z"}
{"event": "Applying initial schema migration", "level": "info", "timestamp": "2025-07-31T06:47:14.023271Z"}
{"event": "Initial schema migration completed", "level": "info", "timestamp": "2025-07-31T06:47:14.128940Z"}
{"event": "Successfully applied migration 1", "level": "info", "timestamp": "2025-07-31T06:47:14.130783Z"}
{"event": "Applying Migration 2: Add sqlite-vec vector storage support to embeddings table", "level": "info", "timestamp": "2025-07-31T06:47:14.130981Z"}
{"event": "Vector storage migration applied successfully", "level": "info", "timestamp": "2025-07-31T06:47:14.146817Z"}
{"event": "Successfully applied migration 2", "level": "info", "timestamp": "2025-07-31T06:47:14.148305Z"}
{"event": "Applying Migration 3: Fix FTS table column naming to match base tables", "level": "info", "timestamp": "2025-07-31T06:47:14.148557Z"}
{"event": "Applying FTS column naming fix migration", "level": "info", "timestamp": "2025-07-31T06:47:14.149019Z"}
{"event": "FTS column naming fix migration applied successfully", "level": "info", "timestamp": "2025-07-31T06:47:14.173074Z"}
{"event": "Successfully applied migration 3", "level": "info", "timestamp": "2025-07-31T06:47:14.174902Z"}
{"event": "Applying Migration 4: Add scene dependencies table for logical ordering", "level": "info", "timestamp": "2025-07-31T06:47:14.175093Z"}
{"event": "Applying scene dependencies migration", "level": "info", "timestamp": "2025-07-31T06:47:14.175637Z"}
{"event": "Scene dependencies migration applied successfully", "level": "info", "timestamp": "2025-07-31T06:47:14.185882Z"}
{"event": "Successfully applied migration 4", "level": "info", "timestamp": "2025-07-31T06:47:14.187264Z"}
{"event": "Applying Migration 0: ", "level": "info", "timestamp": "2025-07-31T06:47:14.187454Z"}
{"event": "Applying Script Bible migration", "level": "info", "timestamp": "2025-07-31T06:47:14.188103Z"}
{"event": "Script Bible migration applied successfully", "level": "info", "timestamp": "2025-07-31T06:47:14.280252Z"}
{"event": "Successfully applied migration 5", "level": "info", "timestamp": "2025-07-31T06:47:14.282283Z"}
{"event": "Database migration completed successfully", "level": "info", "timestamp": "2025-07-31T06:47:14.282460Z"}
[32mPASSED[0m
tests/database/test_content_extractor.py::TestContentExtractorEdgeCases::test_character_with_no_dialogue {"event": "Migration sequence is valid", "level": "info", "timestamp": "2025-07-31T06:47:14.294177Z"}
{"event": "Applying 5 pending migrations", "level": "info", "timestamp": "2025-07-31T06:47:14.295034Z"}
{"event": "Applying Migration 1: Create initial database schema", "level": "info", "timestamp": "2025-07-31T06:47:14.295169Z"}
{"event": "Applying initial schema migration", "level": "info", "timestamp": "2025-07-31T06:47:14.295475Z"}
{"event": "Initial schema migration completed", "level": "info", "timestamp": "2025-07-31T06:47:14.395568Z"}
{"event": "Successfully applied migration 1", "level": "info", "timestamp": "2025-07-31T06:47:14.396854Z"}
{"event": "Applying Migration 2: Add sqlite-vec vector storage support to embeddings table", "level": "info", "timestamp": "2025-07-31T06:47:14.397029Z"}
{"event": "Vector storage migration applied successfully", "level": "info", "timestamp": "2025-07-31T06:47:14.413699Z"}
{"event": "Successfully applied migration 2", "level": "info", "timestamp": "2025-07-31T06:47:14.415554Z"}
{"event": "Applying Migration 3: Fix FTS table column naming to match base tables", "level": "info", "timestamp": "2025-07-31T06:47:14.415782Z"}
{"event": "Applying FTS column naming fix migration", "level": "info", "timestamp": "2025-07-31T06:47:14.416177Z"}
{"event": "FTS column naming fix migration applied successfully", "level": "info", "timestamp": "2025-07-31T06:47:14.445058Z"}
{"event": "Successfully applied migration 3", "level": "info", "timestamp": "2025-07-31T06:47:14.447071Z"}
{"event": "Applying Migration 4: Add scene dependencies table for logical ordering", "level": "info", "timestamp": "2025-07-31T06:47:14.447268Z"}
{"event": "Applying scene dependencies migration", "level": "info", "timestamp": "2025-07-31T06:47:14.447678Z"}
{"event": "Scene dependencies migration applied successfully", "level": "info", "timestamp": "2025-07-31T06:47:14.456880Z"}
{"event": "Successfully applied migration 4", "level": "info", "timestamp": "2025-07-31T06:47:14.458620Z"}
{"event": "Applying Migration 0: ", "level": "info", "timestamp": "2025-07-31T06:47:14.458816Z"}
{"event": "Applying Script Bible migration", "level": "info", "timestamp": "2025-07-31T06:47:14.459198Z"}
{"event": "Script Bible migration applied successfully", "level": "info", "timestamp": "2025-07-31T06:47:14.548260Z"}
{"event": "Successfully applied migration 5", "level": "info", "timestamp": "2025-07-31T06:47:14.550112Z"}
{"event": "Database migration completed successfully", "level": "info", "timestamp": "2025-07-31T06:47:14.550275Z"}
[32mPASSED[0m
tests/database/test_content_extractor.py::TestContentExtractorEdgeCases::test_location_with_mixed_formats {"event": "Migration sequence is valid", "level": "info", "timestamp": "2025-07-31T06:47:14.561925Z"}
{"event": "Applying 5 pending migrations", "level": "info", "timestamp": "2025-07-31T06:47:14.562674Z"}
{"event": "Applying Migration 1: Create initial database schema", "level": "info", "timestamp": "2025-07-31T06:47:14.562842Z"}
{"event": "Applying initial schema migration", "level": "info", "timestamp": "2025-07-31T06:47:14.563133Z"}
{"event": "Initial schema migration completed", "level": "info", "timestamp": "2025-07-31T06:47:14.664047Z"}
{"event": "Successfully applied migration 1", "level": "info", "timestamp": "2025-07-31T06:47:14.665664Z"}
{"event": "Applying Migration 2: Add sqlite-vec vector storage support to embeddings table", "level": "info", "timestamp": "2025-07-31T06:47:14.665874Z"}
{"event": "Vector storage migration applied successfully", "level": "info", "timestamp": "2025-07-31T06:47:14.679105Z"}
{"event": "Successfully applied migration 2", "level": "info", "timestamp": "2025-07-31T06:47:14.680691Z"}
{"event": "Applying Migration 3: Fix FTS table column naming to match base tables", "level": "info", "timestamp": "2025-07-31T06:47:14.680968Z"}
{"event": "Applying FTS column naming fix migration", "level": "info", "timestamp": "2025-07-31T06:47:14.681463Z"}
{"event": "FTS column naming fix migration applied successfully", "level": "info", "timestamp": "2025-07-31T06:47:14.704916Z"}
{"event": "Successfully applied migration 3", "level": "info", "timestamp": "2025-07-31T06:47:14.706773Z"}
{"event": "Applying Migration 4: Add scene dependencies table for logical ordering", "level": "info", "timestamp": "2025-07-31T06:47:14.706977Z"}
{"event": "Applying scene dependencies migration", "level": "info", "timestamp": "2025-07-31T06:47:14.707363Z"}
{"event": "Scene dependencies migration applied successfully", "level": "info", "timestamp": "2025-07-31T06:47:14.716103Z"}
{"event": "Successfully applied migration 4", "level": "info", "timestamp": "2025-07-31T06:47:14.717417Z"}
{"event": "Applying Migration 0: ", "level": "info", "timestamp": "2025-07-31T06:47:14.717599Z"}
{"event": "Applying Script Bible migration", "level": "info", "timestamp": "2025-07-31T06:47:14.718024Z"}
{"event": "Script Bible migration applied successfully", "level": "info", "timestamp": "2025-07-31T06:47:14.803169Z"}
{"event": "Successfully applied migration 5", "level": "info", "timestamp": "2025-07-31T06:47:14.804497Z"}
{"event": "Database migration completed successfully", "level": "info", "timestamp": "2025-07-31T06:47:14.804646Z"}
[32mPASSED[0m
tests/database/test_knowledge_graph_builder.py::test_knowledge_graph_builder_init [32mPASSED[0m
tests/database/test_knowledge_graph_builder.py::test_build_from_script_basic {"event": "Building knowledge graph for script: Test Script", "level": "info", "timestamp": "2025-07-31T06:47:14.852387Z"}
{"event": "Knowledge graph built successfully: 1 nodes, 0 edges", "level": "info", "timestamp": "2025-07-31T06:47:14.852624Z"}
[32mPASSED[0m
tests/database/test_knowledge_graph_builder.py::test_create_character_node [32mPASSED[0m
tests/database/test_knowledge_graph_builder.py::test_create_scene_node [32mPASSED[0m
tests/database/test_knowledge_graph_builder.py::test_process_scene_elements [32mPASSED[0m
tests/database/test_knowledge_graph_builder.py::test_extract_character_interactions [32mPASSED[0m
tests/database/test_knowledge_graph_builder.py::test_enrich_with_llm [32mPASSED[0m
tests/database/test_knowledge_graph_builder.py::test_build_temporal_graph {"event": "Created 2 temporal relationships", "level": "info", "timestamp": "2025-07-31T06:47:14.934702Z"}
[32mPASSED[0m
tests/database/test_knowledge_graph_builder.py::test_build_logical_dependencies {"event": "Created 1 logical dependency relationships", "level": "info", "timestamp": "2025-07-31T06:47:14.947970Z"}
[32mPASSED[0m
tests/database/test_knowledge_graph_builder.py::test_analyze_temporal_order [32mPASSED[0m
tests/database/test_knowledge_graph_builder.py::test_get_or_create_location_node [32mPASSED[0m
tests/database/test_knowledge_graph_builder.py::test_extract_character_mentions [32mPASSED[0m
tests/database/test_knowledge_graph_builder.py::test_build_from_fountain_file [32mPASSED[0m
tests/models/test_base_models.py::TestBaseEntity::test_base_entity_defaults [32mPASSED[0m
tests/models/test_base_models.py::TestBaseEntity::test_base_entity_custom_values [32mPASSED[0m
tests/models/test_base_models.py::TestBaseEntity::test_uuid_serialization [32mPASSED[0m
tests/models/test_base_models.py::TestBaseEntity::test_datetime_serialization [32mPASSED[0m
tests/models/test_base_models.py::TestBaseEntity::test_metadata_mutation [32mPASSED[0m
tests/models/test_base_models.py::TestLocation::test_location_creation [32mPASSED[0m
tests/models/test_base_models.py::TestLocation::test_location_exterior [32mPASSED[0m
tests/models/test_base_models.py::TestLocation::test_location_no_time [32mPASSED[0m
tests/models/test_base_models.py::TestLocation::test_location_name_validation [32mPASSED[0m
tests/models/test_base_models.py::TestLocation::test_location_name_normalization [32mPASSED[0m
tests/models/test_base_models.py::TestLocation::test_location_str_format [32mPASSED[0m
tests/models/test_base_models.py::TestCharacter::test_character_creation [32mPASSED[0m
tests/models/test_base_models.py::TestCharacter::test_character_minimal [32mPASSED[0m
tests/models/test_base_models.py::TestCharacter::test_character_name_validation [32mPASSED[0m
tests/models/test_base_models.py::TestCharacter::test_character_name_normalization [32mPASSED[0m
tests/models/test_base_models.py::TestCharacter::test_character_inherits_base_entity [32mPASSED[0m
tests/models/test_base_models.py::TestSceneElement::test_scene_element_base [32mPASSED[0m
tests/models/test_base_models.py::TestSceneElement::test_action_element [32mPASSED[0m
tests/models/test_base_models.py::TestSceneElement::test_dialogue_element [32mPASSED[0m
tests/models/test_base_models.py::TestSceneElement::test_parenthetical_element [32mPASSED[0m
tests/models/test_base_models.py::TestSceneElement::test_parenthetical_without_dialogue [32mPASSED[0m
tests/models/test_base_models.py::TestSceneElement::test_transition_element [32mPASSED[0m
tests/models/test_base_models.py::TestScene::test_scene_creation [32mPASSED[0m
tests/models/test_base_models.py::TestScene::test_scene_minimal [32mPASSED[0m
tests/models/test_base_models.py::TestScene::test_scene_with_elements [32mPASSED[0m
tests/models/test_base_models.py::TestScene::test_scene_with_characters [32mPASSED[0m
tests/models/test_base_models.py::TestScene::test_scene_time_metadata [32mPASSED[0m
tests/models/test_base_models.py::TestScene::test_scene_with_episode_season [32mPASSED[0m
tests/models/test_base_models.py::TestScript::test_script_creation [32mPASSED[0m
tests/models/test_base_models.py::TestScript::test_script_minimal [32mPASSED[0m
tests/models/test_base_models.py::TestScript::test_script_title_validation [32mPASSED[0m
tests/models/test_base_models.py::TestScript::test_script_title_normalization [32mPASSED[0m
tests/models/test_base_models.py::TestScript::test_script_source_info [32mPASSED[0m
tests/models/test_base_models.py::TestScript::test_script_as_series [32mPASSED[0m
tests/models/test_base_models.py::TestScript::test_script_title_page [32mPASSED[0m
tests/models/test_base_models.py::TestScript::test_script_with_content_refs [32mPASSED[0m
tests/models/test_continuity_models.py::TestSeriesBible::test_series_bible_creation [32mPASSED[0m
tests/models/test_continuity_models.py::TestSeriesBible::test_series_bible_defaults [32mPASSED[0m
tests/models/test_continuity_models.py::TestSeriesBible::test_series_bible_title_validation [32mPASSED[0m
tests/models/test_continuity_models.py::TestSeriesBible::test_series_bible_title_normalization [32mPASSED[0m
tests/models/test_continuity_models.py::TestSeriesBible::test_series_bible_types [32mPASSED[0m
tests/models/test_continuity_models.py::TestSeriesBible::test_series_bible_statuses [32mPASSED[0m
tests/models/test_continuity_models.py::TestCharacterProfile::test_character_profile_creation [32mPASSED[0m
tests/models/test_continuity_models.py::TestCharacterProfile::test_character_profile_minimal [32mPASSED[0m
tests/models/test_continuity_models.py::TestCharacterProfile::test_character_profile_age_validation [32mPASSED[0m
tests/models/test_continuity_models.py::TestCharacterProfile::test_character_profile_complete [32mPASSED[0m
tests/models/test_continuity_models.py::TestWorldElement::test_world_element_creation [32mPASSED[0m
tests/models/test_continuity_models.py::TestWorldElement::test_world_element_types [32mPASSED[0m
tests/models/test_continuity_models.py::TestWorldElement::test_world_element_importance_validation [32mPASSED[0m
tests/models/test_continuity_models.py::TestWorldElement::test_world_element_name_validation [32mPASSED[0m
tests/models/test_continuity_models.py::TestWorldElement::test_world_element_relationships [32mPASSED[0m
tests/models/test_continuity_models.py::TestStoryTimeline::test_story_timeline_creation [32mPASSED[0m
tests/models/test_continuity_models.py::TestStoryTimeline::test_story_timeline_types [32mPASSED[0m
tests/models/test_continuity_models.py::TestStoryTimeline::test_story_timeline_name_validation [32mPASSED[0m
tests/models/test_continuity_models.py::TestTimelineEvent::test_timeline_event_creation [32mPASSED[0m
tests/models/test_continuity_models.py::TestTimelineEvent::test_timeline_event_continuity [32mPASSED[0m
tests/models/test_continuity_models.py::TestTimelineEvent::test_timeline_event_name_validation [32mPASSED[0m
tests/models/test_continuity_models.py::TestContinuityNote::test_continuity_note_creation [32mPASSED[0m
tests/models/test_continuity_models.py::TestContinuityNote::test_continuity_note_validation [32mPASSED[0m
tests/models/test_continuity_models.py::TestContinuityNote::test_continuity_note_resolution [32mPASSED[0m
tests/models/test_continuity_models.py::TestCharacterKnowledge::test_character_knowledge_creation [32mPASSED[0m
tests/models/test_continuity_models.py::TestCharacterKnowledge::test_character_knowledge_validation [32mPASSED[0m
tests/models/test_continuity_models.py::TestCharacterKnowledge::test_character_knowledge_verification [32mPASSED[0m
tests/models/test_continuity_models.py::TestPlotThread::test_plot_thread_creation [32mPASSED[0m
tests/models/test_continuity_models.py::TestPlotThread::test_plot_thread_types [32mPASSED[0m
tests/models/test_continuity_models.py::TestPlotThread::test_plot_thread_priority_validation [32mPASSED[0m
tests/models/test_continuity_models.py::TestPlotThread::test_plot_thread_character_involvement [32mPASSED[0m
tests/models/test_enums.py::TestElementType::test_element_type_values [32mPASSED[0m
tests/models/test_enums.py::TestElementType::test_element_type_count [32mPASSED[0m
tests/models/test_enums.py::TestElementType::test_element_type_string_conversion [32mPASSED[0m
tests/models/test_enums.py::TestSceneOrderType::test_scene_order_type_values [32mPASSED[0m
tests/models/test_enums.py::TestSceneOrderType::test_scene_order_type_count [32mPASSED[0m
tests/models/test_enums.py::TestSceneOrderType::test_scene_order_type_descriptions [32mPASSED[0m
tests/models/test_enums.py::TestSceneDependencyType::test_scene_dependency_type_values [32mPASSED[0m
tests/models/test_enums.py::TestSceneDependencyType::test_scene_dependency_type_count [32mPASSED[0m
tests/models/test_enums.py::TestBibleEnums::test_bible_type_values [32mPASSED[0m
tests/models/test_enums.py::TestBibleEnums::test_bible_status_values [32mPASSED[0m
tests/models/test_enums.py::TestWorldElementType::test_world_element_type_values [32mPASSED[0m
tests/models/test_enums.py::TestWorldElementType::test_world_element_type_count [32mPASSED[0m
tests/models/test_enums.py::TestTimelineEnums::test_timeline_type_values [32mPASSED[0m
tests/models/test_enums.py::TestTimelineEnums::test_event_type_values [32mPASSED[0m
tests/models/test_enums.py::TestNoteEnums::test_note_type_values [32mPASSED[0m
tests/models/test_enums.py::TestNoteEnums::test_note_severity_values [32mPASSED[0m
tests/models/test_enums.py::TestNoteEnums::test_note_status_values [32mPASSED[0m
tests/models/test_enums.py::TestKnowledgeEnums::test_knowledge_type_values [32mPASSED[0m
tests/models/test_enums.py::TestKnowledgeEnums::test_acquisition_method_values [32mPASSED[0m
tests/models/test_enums.py::TestKnowledgeEnums::test_verification_status_values [32mPASSED[0m
tests/models/test_enums.py::TestPlotThreadEnums::test_plot_thread_type_values [32mPASSED[0m
tests/models/test_enums.py::TestPlotThreadEnums::test_plot_thread_status_values [32mPASSED[0m
tests/models/test_enums.py::TestEnumInheritance::test_all_enums_are_string_enums [32mPASSED[0m
tests/models/test_enums.py::TestEnumUsageInModels::test_enum_field_assignment [32mPASSED[0m
tests/models/test_enums.py::TestEnumUsageInModels::test_enum_comparison [32mPASSED[0m
tests/models/test_relationships.py::TestRelationship::test_relationship_creation [32mPASSED[0m
tests/models/test_relationships.py::TestRelationship::test_relationship_with_properties [32mPASSED[0m
tests/models/test_relationships.py::TestRelationship::test_relationship_created_at [32mPASSED[0m
tests/models/test_relationships.py::TestCharacterAppears::test_character_appears_creation [32mPASSED[0m
tests/models/test_relationships.py::TestCharacterAppears::test_character_appears_defaults [32mPASSED[0m
tests/models/test_relationships.py::TestCharacterAppears::test_character_appears_inheritance [32mPASSED[0m
tests/models/test_relationships.py::TestSceneFollows::test_scene_follows_creation [32mPASSED[0m
tests/models/test_relationships.py::TestSceneFollows::test_scene_follows_order_types [32mPASSED[0m
tests/models/test_relationships.py::TestCharacterSpeaksTo::test_character_speaks_to_creation [32mPASSED[0m
tests/models/test_relationships.py::TestCharacterSpeaksTo::test_character_speaks_to_defaults [32mPASSED[0m
tests/models/test_relationships.py::TestSceneAtLocation::test_scene_at_location_creation [32mPASSED[0m
tests/models/test_relationships.py::TestSceneAtLocation::test_scene_at_location_simple [32mPASSED[0m
tests/models/test_relationships.py::TestSceneDependency::test_scene_dependency_creation [32mPASSED[0m
tests/models/test_relationships.py::TestSceneDependency::test_scene_dependency_types [32mPASSED[0m
tests/models/test_relationships.py::TestSceneDependency::test_scene_dependency_defaults [32mPASSED[0m
tests/models/test_relationships.py::TestSceneDependency::test_scene_dependency_strength_validation [32mPASSED[0m
tests/models/test_relationships.py::TestSceneDependency::test_scene_dependency_inherits_base_entity [32mPASSED[0m
tests/models/test_relationships.py::TestRelationshipPatterns::test_bidirectional_relationships [32mPASSED[0m
tests/models/test_relationships.py::TestRelationshipPatterns::test_multiple_relationships_same_entities [32mPASSED[0m
tests/models/test_relationships.py::TestRelationshipPatterns::test_relationship_serialization [32mPASSED[0m
tests/models/test_series_models.py::TestEpisode::test_episode_creation [32mPASSED[0m
tests/models/test_series_models.py::TestEpisode::test_episode_minimal [32mPASSED[0m
tests/models/test_series_models.py::TestEpisode::test_episode_with_air_date [32mPASSED[0m
tests/models/test_series_models.py::TestEpisode::test_episode_number_validation [32mPASSED[0m
tests/models/test_series_models.py::TestEpisode::test_episode_with_content_refs [32mPASSED[0m
tests/models/test_series_models.py::TestEpisode::test_episode_inherits_base_entity [32mPASSED[0m
tests/models/test_series_models.py::TestEpisode::test_episode_serialization [32mPASSED[0m
tests/models/test_series_models.py::TestSeason::test_season_creation [32mPASSED[0m
tests/models/test_series_models.py::TestSeason::test_season_minimal [32mPASSED[0m
tests/models/test_series_models.py::TestSeason::test_season_number_validation [32mPASSED[0m
tests/models/test_series_models.py::TestSeason::test_season_with_episodes [32mPASSED[0m
tests/models/test_series_models.py::TestSeason::test_season_year_bounds [32mPASSED[0m
tests/models/test_series_models.py::TestSeason::test_season_inherits_base_entity [32mPASSED[0m
tests/models/test_series_models.py::TestSeason::test_season_metadata_usage [32mPASSED[0m
tests/models/test_series_models.py::TestSeason::test_season_serialization [32mPASSED[0m
tests/models/test_series_models.py::TestEpisodeSeasonRelationship::test_consistent_script_ids [32mPASSED[0m
tests/models/test_series_models.py::TestEpisodeSeasonRelationship::test_episode_ordering_within_season [32mPASSED[0m
tests/models/test_series_models.py::TestEpisodeSeasonRelationship::test_multi_season_series [32mPASSED[0m
tests/search/test_hybrid_search.py::TestHybridSearchScoreCombination::test_combines_text_and_semantic_scores [32mPASSED[0m
tests/search/test_hybrid_search.py::TestHybridSearchScoreCombination::test_weights_different_search_types [32mPASSED[0m
tests/search/test_hybrid_search.py::TestHybridSearchDeduplication::test_deduplicates_results_from_multiple_sources [32mPASSED[0m
tests/search/test_hybrid_search.py::TestHybridSearchDeduplication::test_preserves_first_occurrence_during_deduplication [32mPASSED[0m
tests/search/test_hybrid_search.py::TestHybridSearchDeduplication::test_ranking_deduplicates_after_sorting [32mPASSED[0m
tests/search/test_hybrid_search.py::TestHybridSearchDeduplication::test_deduplicates_across_different_types_with_same_id [32mPASSED[0m
tests/search/test_hybrid_search.py::TestHybridSearchRanking::test_exact_match_boost [32mPASSED[0m
tests/search/test_hybrid_search.py::TestHybridSearchRanking::test_query_term_density_boost [32mPASSED[0m
tests/search/test_hybrid_search.py::TestHybridSearchRanking::test_metadata_boost [32mPASSED[0m
tests/search/test_hybrid_search.py::TestHybridSearchRanking::test_recency_boost [32mPASSED[0m
tests/search/test_hybrid_search.py::TestHybridSearchEmptyResults::test_handles_empty_results_from_all_sources [32mPASSED[0m
tests/search/test_hybrid_search.py::TestHybridSearchEmptyResults::test_handles_partial_empty_results [32mPASSED[0m
tests/search/test_hybrid_search.py::TestHybridSearchEmptyResults::test_handles_none_results [32mPASSED[0m
tests/search/test_hybrid_search.py::TestHybridSearchContentTypes::test_search_across_scenes_characters_dialogue [32mPASSED[0m
tests/search/test_hybrid_search.py::TestHybridSearchContentTypes::test_filters_apply_across_all_search_types [32mPASSED[0m
tests/search/test_hybrid_search.py::TestHybridSearchIntegration::test_full_hybrid_search_workflow [32mPASSED[0m
tests/search/test_hybrid_search.py::TestHybridSearchIntegration::test_hybrid_search_performance [32mPASSED[0m
tests/search/test_hybrid_search.py::TestHybridSearchEdgeCases::test_search_with_failing_subsearches {"error": "Action search failed", "event": "Search task failed for SearchType.ACTION", "level": "error", "timestamp": "2025-07-31T06:47:15.505703Z"}
{"error": "Semantic search failed", "event": "Search task failed for SearchType.SEMANTIC", "level": "error", "timestamp": "2025-07-31T06:47:15.505912Z"}
{"event": "Some search types failed: SearchType.ACTION, SearchType.SEMANTIC. Results may be incomplete.", "level": "warning", "timestamp": "2025-07-31T06:47:15.505970Z"}
[32mPASSED[0m
tests/search/test_hybrid_search.py::TestHybridSearchEdgeCases::test_merge_results_with_none_query [32mPASSED[0m
tests/search/test_hybrid_search.py::TestHybridSearchEdgeCases::test_group_results_by_type [32mPASSED[0m
tests/search/test_interface.py::TestSearchInterfaceInit::test_init_with_llm_client [32mPASSED[0m
tests/search/test_interface.py::TestSearchInterfaceInit::test_init_without_llm_client [32mPASSED[0m
tests/search/test_interface.py::TestSearchInterfaceSearch::test_empty_query_returns_empty_results [32mPASSED[0m
tests/search/test_interface.py::TestSearchInterfaceSearch::test_search_with_default_types [32mPASSED[0m
tests/search/test_interface.py::TestSearchInterfaceSearch::test_search_with_specific_types [32mPASSED[0m
tests/search/test_interface.py::TestSearchInterfaceSearch::test_search_with_filters [32mPASSED[0m
tests/search/test_interface.py::TestSearchInterfaceSearch::test_search_with_pagination [32mPASSED[0m
tests/search/test_interface.py::TestSearchInterfaceSearch::test_search_with_min_score_filter [32mPASSED[0m
tests/search/test_interface.py::TestSearchInterfaceSearch::test_search_handles_exceptions {"error": "Search failed", "event": "Search task failed for SearchType.DIALOGUE", "level": "error", "timestamp": "2025-07-31T06:47:15.658422Z"}
{"event": "Some search types failed: SearchType.DIALOGUE. Results may be incomplete.", "level": "warning", "timestamp": "2025-07-31T06:47:15.658588Z"}
[32mPASSED[0m
tests/search/test_interface.py::TestSearchInterfaceSpecializedMethods::test_search_dialogue [32mPASSED[0m
tests/search/test_interface.py::TestSearchInterfaceSpecializedMethods::test_search_similar_scenes [32mPASSED[0m
tests/search/test_interface.py::TestSearchInterfaceSpecializedMethods::test_search_similar_scenes_handles_exception {"error": "Pipeline error", "event": "Similar scene search failed", "level": "error", "timestamp": "2025-07-31T06:47:15.701565Z"}
[32mPASSED[0m
tests/search/test_interface.py::TestSearchInterfaceSpecializedMethods::test_search_by_theme [32mPASSED[0m
tests/search/test_interface.py::TestSearchInterfaceSpecializedMethods::test_search_temporal [32mPASSED[0m
tests/search/test_interface.py::TestSearchInterfacePrivateMethods::test_search_dialogue_private [32mPASSED[0m
tests/search/test_interface.py::TestSearchInterfacePrivateMethods::test_search_semantic_private [32mPASSED[0m
tests/search/test_interface.py::TestSearchInterfacePrivateMethods::test_search_temporal_private [32mPASSED[0m
tests/search/test_interface.py::TestSearchInterfaceResourceManagement::test_close_cleanup [32mPASSED[0m
tests/search/test_interface.py::TestSearchInterfaceResourceManagement::test_close_handles_none_pipeline [32mPASSED[0m
tests/search/test_interface.py::TestSearchInterfaceEdgeCases::test_search_with_empty_search_types [32mPASSED[0m
tests/search/test_interface.py::TestSearchInterfaceEdgeCases::test_search_with_none_entity_filter [32mPASSED[0m
tests/search/test_interface.py::TestSearchInterfaceEdgeCases::test_search_with_invalid_limit [32mPASSED[0m
tests/search/test_interface.py::TestSearchInterfaceEdgeCases::test_concurrent_searches {"query": "test0", "entity_type": null, "limit": 10, "event": "Performing semantic search", "level": "info", "timestamp": "2025-07-31T06:47:15.852545Z"}
{"query": "test0", "results_count": 0, "event": "Semantic search completed", "level": "info", "timestamp": "2025-07-31T06:47:15.852894Z"}
{"query": "test1", "entity_type": null, "limit": 10, "event": "Performing semantic search", "level": "info", "timestamp": "2025-07-31T06:47:15.853479Z"}
{"query": "test1", "results_count": 0, "event": "Semantic search completed", "level": "info", "timestamp": "2025-07-31T06:47:15.856703Z"}
{"query": "test2", "entity_type": null, "limit": 10, "event": "Performing semantic search", "level": "info", "timestamp": "2025-07-31T06:47:15.857318Z"}
{"query": "test2", "results_count": 0, "event": "Semantic search completed", "level": "info", "timestamp": "2025-07-31T06:47:15.857507Z"}
{"query": "test3", "entity_type": null, "limit": 10, "event": "Performing semantic search", "level": "info", "timestamp": "2025-07-31T06:47:15.858006Z"}
{"query": "test3", "results_count": 0, "event": "Semantic search completed", "level": "info", "timestamp": "2025-07-31T06:47:15.858172Z"}
{"query": "test4", "entity_type": null, "limit": 10, "event": "Performing semantic search", "level": "info", "timestamp": "2025-07-31T06:47:15.858582Z"}
{"query": "test4", "results_count": 0, "event": "Semantic search completed", "level": "info", "timestamp": "2025-07-31T06:47:15.858800Z"}
[32mPASSED[0m
tests/search/test_interface.py::TestSearchInterfaceIntegration::test_end_to_end_search_workflow [32mPASSED[0m
tests/search/test_interface.py::TestSearchInterfaceIntegration::test_search_performance_with_large_results [32mPASSED[0m
tests/search/test_ranking.py::TestSearchRankerInit::test_init [32mPASSED[0m
tests/search/test_ranking.py::TestSearchRankerRankResults::test_rank_results_empty_list [32mPASSED[0m
tests/search/test_ranking.py::TestSearchRankerRankResults::test_rank_results_basic_sorting [32mPASSED[0m
tests/search/test_ranking.py::TestSearchRankerRankResults::test_rank_results_type_weights_applied [32mPASSED[0m
tests/search/test_ranking.py::TestSearchRankerRankResults::test_rank_results_exact_match_boost [32mPASSED[0m
tests/search/test_ranking.py::TestSearchRankerRankResults::test_rank_results_metadata_boost [32mPASSED[0m
tests/search/test_ranking.py::TestSearchRankerRankResults::test_rank_results_recency_boost [32mPASSED[0m
tests/search/test_ranking.py::TestSearchRankerRankResults::test_rank_results_no_recency_boost [32mPASSED[0m
tests/search/test_ranking.py::TestSearchRankerRankResults::test_rank_results_deduplication [32mPASSED[0m
tests/search/test_ranking.py::TestSearchRankerRankResults::test_rank_results_score_capping [32mPASSED[0m
tests/search/test_ranking.py::TestSearchRankerFilterResults::test_filter_results_min_score [32mPASSED[0m
tests/search/test_ranking.py::TestSearchRankerFilterResults::test_filter_results_max_results [32mPASSED[0m
tests/search/test_ranking.py::TestSearchRankerFilterResults::test_filter_results_no_deduplication [32mPASSED[0m
tests/search/test_ranking.py::TestSearchRankerFilterResults::test_filter_results_with_deduplication [32mPASSED[0m
tests/search/test_ranking.py::TestSearchRankerGroupResults::test_group_results_by_type [32mPASSED[0m
tests/search/test_ranking.py::TestSearchRankerGroupResults::test_group_results_multiple_same_type [32mPASSED[0m
tests/search/test_ranking.py::TestSearchRankerGroupResults::test_group_results_empty [32mPASSED[0m
tests/search/test_ranking.py::TestSearchRankerMergeResults::test_merge_results_basic [32mPASSED[0m
tests/search/test_ranking.py::TestSearchRankerMergeResults::test_merge_results_with_query_rerank [32mPASSED[0m
tests/search/test_ranking.py::TestSearchRankerMergeResults::test_merge_results_multiple_sets [32mPASSED[0m
tests/search/test_ranking.py::TestSearchRankerMergeResults::test_merge_results_with_duplicates [32mPASSED[0m
tests/search/test_ranking.py::TestSearchRankerMergeResults::test_merge_results_empty_sets [32mPASSED[0m
tests/search/test_ranking.py::TestSearchRankerPrivateMethods::test_calculate_composite_score [32mPASSED[0m
tests/search/test_ranking.py::TestSearchRankerPrivateMethods::test_calculate_density_boost [32mPASSED[0m
tests/search/test_ranking.py::TestSearchRankerPrivateMethods::test_calculate_density_boost_empty_inputs [32mPASSED[0m
tests/search/test_ranking.py::TestSearchRankerPrivateMethods::test_has_exact_match [32mPASSED[0m
tests/search/test_ranking.py::TestSearchRankerPrivateMethods::test_has_exact_match_empty_inputs [32mPASSED[0m
tests/search/test_ranking.py::TestSearchRankerPrivateMethods::test_calculate_metadata_boost [32mPASSED[0m
tests/search/test_ranking.py::TestSearchRankerPrivateMethods::test_calculate_metadata_boost_empty_inputs [32mPASSED[0m
tests/search/test_ranking.py::TestSearchRankerPrivateMethods::test_deduplicate_results [32mPASSED[0m
tests/search/test_ranking.py::TestSearchRankerPrivateMethods::test_deduplicate_results_empty [32mPASSED[0m
tests/search/test_ranking.py::TestSearchRankerEdgeCases::test_ranking_with_unknown_type [32mPASSED[0m
tests/search/test_ranking.py::TestSearchRankerEdgeCases::test_ranking_with_negative_base_score [32mPASSED[0m
tests/search/test_ranking.py::TestSearchRankerEdgeCases::test_ranking_with_missing_metadata_fields [32mPASSED[0m
tests/search/test_ranking.py::TestSearchRankerEdgeCases::test_filter_with_extreme_values [32mPASSED[0m
tests/search/test_ranking.py::TestSearchRankerEdgeCases::test_merge_with_no_arguments [32mPASSED[0m
tests/search/test_ranking.py::TestSearchRankerEdgeCases::test_ranking_performance_with_large_dataset [32mPASSED[0m
tests/search/test_text_search.py::TestTextSearchEngineInit::test_init [32mPASSED[0m
tests/search/test_text_search.py::TestTextSearchEngineValidation::test_validate_limit_valid [32mPASSED[0m
tests/search/test_text_search.py::TestTextSearchEngineValidation::test_validate_limit_invalid_zero_negative {"event": "Invalid limit 0, using default 10", "level": "warning", "timestamp": "2025-07-31T06:47:16.031483Z"}
{"event": "Invalid limit -5, using default 10", "level": "warning", "timestamp": "2025-07-31T06:47:16.031644Z"}
[32mPASSED[0m
tests/search/test_text_search.py::TestTextSearchEngineValidation::test_validate_limit_exceeds_max {"event": "Limit 1001 exceeds max 1000, capping", "level": "warning", "timestamp": "2025-07-31T06:47:16.035791Z"}
{"event": "Limit 9999 exceeds max 1000, capping", "level": "warning", "timestamp": "2025-07-31T06:47:16.035942Z"}
[32mPASSED[0m
tests/search/test_text_search.py::TestTextSearchEngineDialogueSearch::test_search_dialogue_basic [32mPASSED[0m
tests/search/test_text_search.py::TestTextSearchEngineDialogueSearch::test_search_dialogue_with_character_filter [32mPASSED[0m
tests/search/test_text_search.py::TestTextSearchEngineDialogueSearch::test_search_dialogue_with_scene_filter [32mPASSED[0m
tests/search/test_text_search.py::TestTextSearchEngineDialogueSearch::test_search_dialogue_empty_query [32mPASSED[0m
tests/search/test_text_search.py::TestTextSearchEngineDialogueSearch::test_search_dialogue_limit_validation {"event": "Invalid limit -1, using default 10", "level": "warning", "timestamp": "2025-07-31T06:47:16.064014Z"}
[32mPASSED[0m
tests/search/test_text_search.py::TestTextSearchEngineActionSearch::test_search_action_basic [32mPASSED[0m
tests/search/test_text_search.py::TestTextSearchEngineActionSearch::test_search_action_with_scene_filter [32mPASSED[0m
tests/search/test_text_search.py::TestTextSearchEngineFullTextSearch::test_search_full_text [32mPASSED[0m
tests/search/test_text_search.py::TestTextSearchEngineFullTextSearch::test_search_full_text_respects_limit [32mPASSED[0m
tests/search/test_text_search.py::TestTextSearchEngineEntitySearch::test_search_entities_characters [32mPASSED[0m
tests/search/test_text_search.py::TestTextSearchEngineEntitySearch::test_search_entities_locations [32mPASSED[0m
tests/search/test_text_search.py::TestTextSearchEngineEntitySearch::test_search_entities_unknown_type {"event": "Unknown entity type: unknown_type", "level": "warning", "timestamp": "2025-07-31T06:47:16.115801Z"}
[32mPASSED[0m
tests/search/test_text_search.py::TestTextSearchEngineEntitySearch::test_search_entities_invalid_table {"event": "Unknown entity type: malicious", "level": "warning", "timestamp": "2025-07-31T06:47:16.121767Z"}
[32mPASSED[0m
tests/search/test_text_search.py::TestTextSearchEngineEntitySearch::test_search_entities_empty_query [32mPASSED[0m
tests/search/test_text_search.py::TestTextSearchEngineSceneSearch::test_search_scenes_basic [32mPASSED[0m
tests/search/test_text_search.py::TestTextSearchEngineSceneSearch::test_search_scenes_with_location_filter [32mPASSED[0m
tests/search/test_text_search.py::TestTextSearchEngineSceneSearch::test_search_scenes_with_character_filter [32mPASSED[0m
tests/search/test_text_search.py::TestTextSearchEngineSceneSearch::test_search_scenes_description_match [32mPASSED[0m
tests/search/test_text_search.py::TestTextSearchEngineScoring::test_calculate_text_score_exact_match [32mPASSED[0m
tests/search/test_text_search.py::TestTextSearchEngineScoring::test_calculate_text_score_whole_word_match [32mPASSED[0m
tests/search/test_text_search.py::TestTextSearchEngineScoring::test_calculate_text_score_substring_match [32mPASSED[0m
tests/search/test_text_search.py::TestTextSearchEngineScoring::test_calculate_text_score_partial_word_match [32mPASSED[0m
tests/search/test_text_search.py::TestTextSearchEngineScoring::test_calculate_text_score_no_match [32mPASSED[0m
tests/search/test_text_search.py::TestTextSearchEngineScoring::test_calculate_text_score_empty_inputs [32mPASSED[0m
tests/search/test_text_search.py::TestTextSearchEngineScoring::test_calculate_text_score_case_insensitive [32mPASSED[0m
tests/search/test_text_search.py::TestTextSearchEngineScoring::test_calculate_text_score_frequency_boost [32mPASSED[0m
tests/search/test_text_search.py::TestTextSearchEngineScoring::test_calculate_text_score_position_boost [32mPASSED[0m
tests/search/test_text_search.py::TestTextSearchEngineHighlighting::test_extract_highlights_basic [32mPASSED[0m
tests/search/test_text_search.py::TestTextSearchEngineHighlighting::test_extract_highlights_context [32mPASSED[0m
tests/search/test_text_search.py::TestTextSearchEngineHighlighting::test_extract_highlights_word_boundaries [32mPASSED[0m
tests/search/test_text_search.py::TestTextSearchEngineHighlighting::test_extract_highlights_multiple_matches [32mPASSED[0m
tests/search/test_text_search.py::TestTextSearchEngineHighlighting::test_extract_highlights_limit [32mPASSED[0m
tests/search/test_text_search.py::TestTextSearchEngineHighlighting::test_extract_highlights_empty_inputs [32mPASSED[0m
tests/search/test_text_search.py::TestTextSearchEngineHighlighting::test_extract_highlights_no_match [32mPASSED[0m
tests/search/test_text_search.py::TestTextSearchEngineHighlighting::test_extract_highlights_ellipsis [32mPASSED[0m
tests/search/test_text_search.py::TestTextSearchEngineEntityAppearances::test_get_entity_appearance_count_character [32mPASSED[0m
tests/search/test_text_search.py::TestTextSearchEngineEntityAppearances::test_get_entity_appearance_count_location [32mPASSED[0m
tests/search/test_text_search.py::TestTextSearchEngineEntityAppearances::test_get_entity_appearance_count_object [32mPASSED[0m
tests/search/test_text_search.py::TestTextSearchEngineEntityAppearances::test_get_entity_appearance_count_unknown_type [32mPASSED[0m
tests/search/test_text_search.py::TestTextSearchEngineEntityAppearances::test_get_entity_appearance_count_no_result [32mPASSED[0m
tests/search/test_text_search.py::TestTextSearchEngineEdgeCases::test_search_with_sql_injection_attempt [32mPASSED[0m
tests/search/test_text_search.py::TestTextSearchEngineEdgeCases::test_search_with_unicode_content [32mPASSED[0m
tests/search/test_text_search.py::TestTextSearchEngineEdgeCases::test_search_with_very_long_query [32mPASSED[0m
tests/search/test_text_search.py::TestTextSearchEngineEdgeCases::test_search_with_special_characters [32mPASSED[0m
tests/search/test_types.py::TestSearchType::test_search_type_values [32mPASSED[0m
tests/search/test_types.py::TestSearchType::test_search_type_is_string_enum [32mPASSED[0m
tests/search/test_types.py::TestSearchType::test_search_type_iteration [32mPASSED[0m
tests/search/test_types.py::TestSearchType::test_search_type_comparison [32mPASSED[0m
tests/search/test_types.py::TestSearchType::test_search_type_in_container [32mPASSED[0m
tests/search/test_types.py::TestSearchType::test_search_type_string_operations [32mPASSED[0m
tests/search/test_types.py::TestSearchResult::test_search_result_creation [32mPASSED[0m
tests/search/test_types.py::TestSearchResult::test_search_result_required_fields [32mPASSED[0m
tests/search/test_types.py::TestSearchResult::test_search_result_metadata_types [32mPASSED[0m
tests/search/test_types.py::TestSearchResult::test_search_result_empty_collections [32mPASSED[0m
tests/search/test_types.py::TestSearchResult::test_search_result_highlights_list [32mPASSED[0m
tests/search/test_types.py::TestSearchResult::test_search_result_score_range [32mPASSED[0m
tests/search/test_types.py::TestSearchResult::test_search_result_modification [32mPASSED[0m
tests/search/test_types.py::TestSearchResult::test_search_result_dict_access [32mPASSED[0m
tests/search/test_types.py::TestSearchResult::test_search_result_copy [32mPASSED[0m
tests/search/test_types.py::TestSearchResults::test_search_results_empty_list [32mPASSED[0m
tests/search/test_types.py::TestSearchResults::test_search_results_with_results [32mPASSED[0m
tests/search/test_types.py::TestSearchResults::test_search_results_list_operations [32mPASSED[0m
tests/search/test_types.py::TestSearchResults::test_search_results_iteration [32mPASSED[0m
tests/search/test_types.py::TestSearchResults::test_search_results_slicing [32mPASSED[0m
tests/search/test_types.py::TestSearchResults::test_search_results_type_consistency [32mPASSED[0m
tests/search/test_types.py::TestSearchTypesIntegration::test_search_type_in_search_result [32mPASSED[0m
tests/search/test_types.py::TestSearchTypesIntegration::test_search_results_filtering_by_type [32mPASSED[0m
tests/search/test_types.py::TestSearchTypesIntegration::test_search_results_grouping_by_type [32mPASSED[0m
tests/search/test_types.py::TestSearchTypesIntegration::test_comprehensive_search_result_creation [32mPASSED[0m
tests/search/test_types.py::TestSearchTypesIntegration::test_edge_case_values [32mPASSED[0m
tests/test_api.py::test_root_endpoint {"event": "Migration sequence is valid", "level": "info", "timestamp": "2025-07-31T06:47:16.312251Z"}
{"event": "Applying 5 pending migrations", "level": "info", "timestamp": "2025-07-31T06:47:16.313154Z"}
{"event": "Applying Migration 1: Create initial database schema", "level": "info", "timestamp": "2025-07-31T06:47:16.313388Z"}
{"event": "Applying initial schema migration", "level": "info", "timestamp": "2025-07-31T06:47:16.313812Z"}
{"event": "Initial schema migration completed", "level": "info", "timestamp": "2025-07-31T06:47:16.408931Z"}
{"event": "Successfully applied migration 1", "level": "info", "timestamp": "2025-07-31T06:47:16.410537Z"}
{"event": "Applying Migration 2: Add sqlite-vec vector storage support to embeddings table", "level": "info", "timestamp": "2025-07-31T06:47:16.410768Z"}
{"event": "Vector storage migration applied successfully", "level": "info", "timestamp": "2025-07-31T06:47:16.424052Z"}
{"event": "Successfully applied migration 2", "level": "info", "timestamp": "2025-07-31T06:47:16.425499Z"}
{"event": "Applying Migration 3: Fix FTS table column naming to match base tables", "level": "info", "timestamp": "2025-07-31T06:47:16.425678Z"}
{"event": "Applying FTS column naming fix migration", "level": "info", "timestamp": "2025-07-31T06:47:16.426065Z"}
{"event": "FTS column naming fix migration applied successfully", "level": "info", "timestamp": "2025-07-31T06:47:16.451941Z"}
{"event": "Successfully applied migration 3", "level": "info", "timestamp": "2025-07-31T06:47:16.454849Z"}
{"event": "Applying Migration 4: Add scene dependencies table for logical ordering", "level": "info", "timestamp": "2025-07-31T06:47:16.455063Z"}
{"event": "Applying scene dependencies migration", "level": "info", "timestamp": "2025-07-31T06:47:16.455995Z"}
{"event": "Scene dependencies migration applied successfully", "level": "info", "timestamp": "2025-07-31T06:47:16.466154Z"}
{"event": "Successfully applied migration 4", "level": "info", "timestamp": "2025-07-31T06:47:16.467890Z"}
{"event": "Applying Migration 0: ", "level": "info", "timestamp": "2025-07-31T06:47:16.468268Z"}
{"event": "Applying Script Bible migration", "level": "info", "timestamp": "2025-07-31T06:47:16.468819Z"}
{"event": "Script Bible migration applied successfully", "level": "info", "timestamp": "2025-07-31T06:47:16.558402Z"}
{"event": "Successfully applied migration 5", "level": "info", "timestamp": "2025-07-31T06:47:16.560266Z"}
{"event": "Database migration completed successfully", "level": "info", "timestamp": "2025-07-31T06:47:16.560435Z"}
{"event": "Starting ScriptRAG API", "level": "info", "timestamp": "2025-07-31T06:47:16.701004Z"}
{"event": "DatabaseOperations uses synchronous SQLite operations in async functions. This blocks the event loop and should be fixed for production use.", "level": "warning", "timestamp": "2025-07-31T06:47:16.701335Z"}
{"event": "Migration sequence is valid", "level": "info", "timestamp": "2025-07-31T06:47:16.701523Z"}
{"event": "Database is already at latest version", "level": "info", "timestamp": "2025-07-31T06:47:16.703986Z"}
{"db_url": "sqlite+aiosqlite:////tmp/tmppv2d1hot.db", "event": "Database operations initialized", "level": "info", "timestamp": "2025-07-31T06:47:16.708959Z"}
[32mPASSED[0m{"event": "Shutting down ScriptRAG API", "level": "info", "timestamp": "2025-07-31T06:47:16.717508Z"}

tests/test_api.py::test_health_endpoint {"event": "Migration sequence is valid", "level": "info", "timestamp": "2025-07-31T06:47:17.057583Z"}
{"event": "Applying 5 pending migrations", "level": "info", "timestamp": "2025-07-31T06:47:17.058432Z"}
{"event": "Applying Migration 1: Create initial database schema", "level": "info", "timestamp": "2025-07-31T06:47:17.058578Z"}
{"event": "Applying initial schema migration", "level": "info", "timestamp": "2025-07-31T06:47:17.058945Z"}
{"event": "Initial schema migration completed", "level": "info", "timestamp": "2025-07-31T06:47:17.152456Z"}
{"event": "Successfully applied migration 1", "level": "info", "timestamp": "2025-07-31T06:47:17.154080Z"}
{"event": "Applying Migration 2: Add sqlite-vec vector storage support to embeddings table", "level": "info", "timestamp": "2025-07-31T06:47:17.154269Z"}
{"event": "Vector storage migration applied successfully", "level": "info", "timestamp": "2025-07-31T06:47:17.166997Z"}
{"event": "Successfully applied migration 2", "level": "info", "timestamp": "2025-07-31T06:47:17.168345Z"}
{"event": "Applying Migration 3: Fix FTS table column naming to match base tables", "level": "info", "timestamp": "2025-07-31T06:47:17.168537Z"}
{"event": "Applying FTS column naming fix migration", "level": "info", "timestamp": "2025-07-31T06:47:17.168955Z"}
{"event": "FTS column naming fix migration applied successfully", "level": "info", "timestamp": "2025-07-31T06:47:17.194439Z"}
{"event": "Successfully applied migration 3", "level": "info", "timestamp": "2025-07-31T06:47:17.195868Z"}
{"event": "Applying Migration 4: Add scene dependencies table for logical ordering", "level": "info", "timestamp": "2025-07-31T06:47:17.196048Z"}
{"event": "Applying scene dependencies migration", "level": "info", "timestamp": "2025-07-31T06:47:17.196421Z"}
{"event": "Scene dependencies migration applied successfully", "level": "info", "timestamp": "2025-07-31T06:47:17.205011Z"}
{"event": "Successfully applied migration 4", "level": "info", "timestamp": "2025-07-31T06:47:17.206530Z"}
{"event": "Applying Migration 0: ", "level": "info", "timestamp": "2025-07-31T06:47:17.206718Z"}
{"event": "Applying Script Bible migration", "level": "info", "timestamp": "2025-07-31T06:47:17.207128Z"}
{"event": "Script Bible migration applied successfully", "level": "info", "timestamp": "2025-07-31T06:47:17.291931Z"}
{"event": "Successfully applied migration 5", "level": "info", "timestamp": "2025-07-31T06:47:17.293453Z"}
{"event": "Database migration completed successfully", "level": "info", "timestamp": "2025-07-31T06:47:17.293601Z"}
{"event": "Starting ScriptRAG API", "level": "info", "timestamp": "2025-07-31T06:47:17.422224Z"}
{"event": "DatabaseOperations uses synchronous SQLite operations in async functions. This blocks the event loop and should be fixed for production use.", "level": "warning", "timestamp": "2025-07-31T06:47:17.422807Z"}
{"event": "Migration sequence is valid", "level": "info", "timestamp": "2025-07-31T06:47:17.423125Z"}
{"event": "Database is already at latest version", "level": "info", "timestamp": "2025-07-31T06:47:17.425540Z"}
{"db_url": "sqlite+aiosqlite:////tmp/tmpmlfoan69.db", "event": "Database operations initialized", "level": "info", "timestamp": "2025-07-31T06:47:17.430721Z"}
[32mPASSED[0m{"event": "Shutting down ScriptRAG API", "level": "info", "timestamp": "2025-07-31T06:47:17.437767Z"}

tests/test_api.py::test_list_scripts_empty {"event": "Migration sequence is valid", "level": "info", "timestamp": "2025-07-31T06:47:17.779458Z"}
{"event": "Applying 5 pending migrations", "level": "info", "timestamp": "2025-07-31T06:47:17.780347Z"}
{"event": "Applying Migration 1: Create initial database schema", "level": "info", "timestamp": "2025-07-31T06:47:17.780498Z"}
{"event": "Applying initial schema migration", "level": "info", "timestamp": "2025-07-31T06:47:17.780874Z"}
{"event": "Initial schema migration completed", "level": "info", "timestamp": "2025-07-31T06:47:17.877396Z"}
{"event": "Successfully applied migration 1", "level": "info", "timestamp": "2025-07-31T06:47:17.879258Z"}
{"event": "Applying Migration 2: Add sqlite-vec vector storage support to embeddings table", "level": "info", "timestamp": "2025-07-31T06:47:17.879672Z"}
{"event": "Vector storage migration applied successfully", "level": "info", "timestamp": "2025-07-31T06:47:17.893478Z"}
{"event": "Successfully applied migration 2", "level": "info", "timestamp": "2025-07-31T06:47:17.895067Z"}
{"event": "Applying Migration 3: Fix FTS table column naming to match base tables", "level": "info", "timestamp": "2025-07-31T06:47:17.895257Z"}
{"event": "Applying FTS column naming fix migration", "level": "info", "timestamp": "2025-07-31T06:47:17.895642Z"}
{"event": "FTS column naming fix migration applied successfully", "level": "info", "timestamp": "2025-07-31T06:47:17.918332Z"}
{"event": "Successfully applied migration 3", "level": "info", "timestamp": "2025-07-31T06:47:17.919545Z"}
{"event": "Applying Migration 4: Add scene dependencies table for logical ordering", "level": "info", "timestamp": "2025-07-31T06:47:17.919730Z"}
{"event": "Applying scene dependencies migration", "level": "info", "timestamp": "2025-07-31T06:47:17.920091Z"}
{"event": "Scene dependencies migration applied successfully", "level": "info", "timestamp": "2025-07-31T06:47:17.930270Z"}
{"event": "Successfully applied migration 4", "level": "info", "timestamp": "2025-07-31T06:47:17.932236Z"}
{"event": "Applying Migration 0: ", "level": "info", "timestamp": "2025-07-31T06:47:17.932691Z"}
{"event": "Applying Script Bible migration", "level": "info", "timestamp": "2025-07-31T06:47:17.933309Z"}
{"event": "Script Bible migration applied successfully", "level": "info", "timestamp": "2025-07-31T06:47:18.025577Z"}
{"event": "Successfully applied migration 5", "level": "info", "timestamp": "2025-07-31T06:47:18.027868Z"}
{"event": "Database migration completed successfully", "level": "info", "timestamp": "2025-07-31T06:47:18.028033Z"}
{"event": "Starting ScriptRAG API", "level": "info", "timestamp": "2025-07-31T06:47:18.133607Z"}
{"event": "DatabaseOperations uses synchronous SQLite operations in async functions. This blocks the event loop and should be fixed for production use.", "level": "warning", "timestamp": "2025-07-31T06:47:18.134129Z"}
{"event": "Migration sequence is valid", "level": "info", "timestamp": "2025-07-31T06:47:18.134458Z"}
{"event": "Database is already at latest version", "level": "info", "timestamp": "2025-07-31T06:47:18.136848Z"}
{"db_url": "sqlite+aiosqlite:////tmp/tmpo7ql3349.db", "event": "Database operations initialized", "level": "info", "timestamp": "2025-07-31T06:47:18.141590Z"}
[32mPASSED[0m{"event": "Shutting down ScriptRAG API", "level": "info", "timestamp": "2025-07-31T06:47:18.149350Z"}

tests/test_api.py::test_script_not_found {"event": "Migration sequence is valid", "level": "info", "timestamp": "2025-07-31T06:47:18.480844Z"}
{"event": "Applying 5 pending migrations", "level": "info", "timestamp": "2025-07-31T06:47:18.481847Z"}
{"event": "Applying Migration 1: Create initial database schema", "level": "info", "timestamp": "2025-07-31T06:47:18.481992Z"}
{"event": "Applying initial schema migration", "level": "info", "timestamp": "2025-07-31T06:47:18.482259Z"}
{"event": "Initial schema migration completed", "level": "info", "timestamp": "2025-07-31T06:47:18.586470Z"}
{"event": "Successfully applied migration 1", "level": "info", "timestamp": "2025-07-31T06:47:18.587989Z"}
{"event": "Applying Migration 2: Add sqlite-vec vector storage support to embeddings table", "level": "info", "timestamp": "2025-07-31T06:47:18.588265Z"}
{"event": "Vector storage migration applied successfully", "level": "info", "timestamp": "2025-07-31T06:47:18.602046Z"}
{"event": "Successfully applied migration 2", "level": "info", "timestamp": "2025-07-31T06:47:18.603720Z"}
{"event": "Applying Migration 3: Fix FTS table column naming to match base tables", "level": "info", "timestamp": "2025-07-31T06:47:18.604011Z"}
{"event": "Applying FTS column naming fix migration", "level": "info", "timestamp": "2025-07-31T06:47:18.604472Z"}
{"event": "FTS column naming fix migration applied successfully", "level": "info", "timestamp": "2025-07-31T06:47:18.631892Z"}
{"event": "Successfully applied migration 3", "level": "info", "timestamp": "2025-07-31T06:47:18.633360Z"}
{"event": "Applying Migration 4: Add scene dependencies table for logical ordering", "level": "info", "timestamp": "2025-07-31T06:47:18.633548Z"}
{"event": "Applying scene dependencies migration", "level": "info", "timestamp": "2025-07-31T06:47:18.633919Z"}
{"event": "Scene dependencies migration applied successfully", "level": "info", "timestamp": "2025-07-31T06:47:18.643710Z"}
{"event": "Successfully applied migration 4", "level": "info", "timestamp": "2025-07-31T06:47:18.645336Z"}
{"event": "Applying Migration 0: ", "level": "info", "timestamp": "2025-07-31T06:47:18.645577Z"}
{"event": "Applying Script Bible migration", "level": "info", "timestamp": "2025-07-31T06:47:18.646008Z"}
{"event": "Script Bible migration applied successfully", "level": "info", "timestamp": "2025-07-31T06:47:18.746527Z"}
{"event": "Successfully applied migration 5", "level": "info", "timestamp": "2025-07-31T06:47:18.748455Z"}
{"event": "Database migration completed successfully", "level": "info", "timestamp": "2025-07-31T06:47:18.748610Z"}
{"event": "Starting ScriptRAG API", "level": "info", "timestamp": "2025-07-31T06:47:18.853959Z"}
{"event": "DatabaseOperations uses synchronous SQLite operations in async functions. This blocks the event loop and should be fixed for production use.", "level": "warning", "timestamp": "2025-07-31T06:47:18.854264Z"}
{"event": "Migration sequence is valid", "level": "info", "timestamp": "2025-07-31T06:47:18.854529Z"}
{"event": "Database is already at latest version", "level": "info", "timestamp": "2025-07-31T06:47:18.856704Z"}
{"db_url": "sqlite+aiosqlite:////tmp/tmpf49jeedd.db", "event": "Database operations initialized", "level": "info", "timestamp": "2025-07-31T06:47:18.861097Z"}
[32mPASSED[0m{"event": "Shutting down ScriptRAG API", "level": "info", "timestamp": "2025-07-31T06:47:18.868522Z"}

tests/test_api.py::test_upload_script {"event": "Migration sequence is valid", "level": "info", "timestamp": "2025-07-31T06:47:19.202228Z"}
{"event": "Applying 5 pending migrations", "level": "info", "timestamp": "2025-07-31T06:47:19.203142Z"}
{"event": "Applying Migration 1: Create initial database schema", "level": "info", "timestamp": "2025-07-31T06:47:19.203296Z"}
{"event": "Applying initial schema migration", "level": "info", "timestamp": "2025-07-31T06:47:19.203643Z"}
{"event": "Initial schema migration completed", "level": "info", "timestamp": "2025-07-31T06:47:19.294615Z"}
{"event": "Successfully applied migration 1", "level": "info", "timestamp": "2025-07-31T06:47:19.295933Z"}
{"event": "Applying Migration 2: Add sqlite-vec vector storage support to embeddings table", "level": "info", "timestamp": "2025-07-31T06:47:19.296113Z"}
{"event": "Vector storage migration applied successfully", "level": "info", "timestamp": "2025-07-31T06:47:19.309158Z"}
{"event": "Successfully applied migration 2", "level": "info", "timestamp": "2025-07-31T06:47:19.310680Z"}
{"event": "Applying Migration 3: Fix FTS table column naming to match base tables", "level": "info", "timestamp": "2025-07-31T06:47:19.310895Z"}
{"event": "Applying FTS column naming fix migration", "level": "info", "timestamp": "2025-07-31T06:47:19.311264Z"}
{"event": "FTS column naming fix migration applied successfully", "level": "info", "timestamp": "2025-07-31T06:47:19.334221Z"}
{"event": "Successfully applied migration 3", "level": "info", "timestamp": "2025-07-31T06:47:19.335588Z"}
{"event": "Applying Migration 4: Add scene dependencies table for logical ordering", "level": "info", "timestamp": "2025-07-31T06:47:19.335790Z"}
{"event": "Applying scene dependencies migration", "level": "info", "timestamp": "2025-07-31T06:47:19.336160Z"}
{"event": "Scene dependencies migration applied successfully", "level": "info", "timestamp": "2025-07-31T06:47:19.345552Z"}
{"event": "Successfully applied migration 4", "level": "info", "timestamp": "2025-07-31T06:47:19.347423Z"}
{"event": "Applying Migration 0: ", "level": "info", "timestamp": "2025-07-31T06:47:19.347883Z"}
{"event": "Applying Script Bible migration", "level": "info", "timestamp": "2025-07-31T06:47:19.348412Z"}
{"event": "Script Bible migration applied successfully", "level": "info", "timestamp": "2025-07-31T06:47:19.443347Z"}
{"event": "Successfully applied migration 5", "level": "info", "timestamp": "2025-07-31T06:47:19.445122Z"}
{"event": "Database migration completed successfully", "level": "info", "timestamp": "2025-07-31T06:47:19.445328Z"}
{"event": "Starting ScriptRAG API", "level": "info", "timestamp": "2025-07-31T06:47:19.551456Z"}
{"event": "DatabaseOperations uses synchronous SQLite operations in async functions. This blocks the event loop and should be fixed for production use.", "level": "warning", "timestamp": "2025-07-31T06:47:19.552044Z"}
{"event": "Migration sequence is valid", "level": "info", "timestamp": "2025-07-31T06:47:19.552404Z"}
{"event": "Database is already at latest version", "level": "info", "timestamp": "2025-07-31T06:47:19.555500Z"}
{"db_url": "sqlite+aiosqlite:////tmp/tmpohyzwhfc.db", "event": "Database operations initialized", "level": "info", "timestamp": "2025-07-31T06:47:19.561161Z"}
{"event": "Created script graph node 177f2518-7fa2-4a9c-9a24-a14a954c3b26 for 'Test Script'", "level": "info", "timestamp": "2025-07-31T06:47:19.576644Z"}
{"script_id": "f52a2bac-0521-4256-9fa6-b126e206a0e6", "title": "Test Script", "event": "Stored script", "level": "info", "timestamp": "2025-07-31T06:47:19.579903Z"}
[32mPASSED[0m{"event": "Shutting down ScriptRAG API", "level": "info", "timestamp": "2025-07-31T06:47:19.584056Z"}

tests/test_api.py::test_scene_search_invalid_params {"event": "Migration sequence is valid", "level": "info", "timestamp": "2025-07-31T06:47:19.926573Z"}
{"event": "Applying 5 pending migrations", "level": "info", "timestamp": "2025-07-31T06:47:19.927456Z"}
{"event": "Applying Migration 1: Create initial database schema", "level": "info", "timestamp": "2025-07-31T06:47:19.927609Z"}
{"event": "Applying initial schema migration", "level": "info", "timestamp": "2025-07-31T06:47:19.927929Z"}
{"event": "Initial schema migration completed", "level": "info", "timestamp": "2025-07-31T06:47:20.056350Z"}
{"event": "Successfully applied migration 1", "level": "info", "timestamp": "2025-07-31T06:47:20.058549Z"}
{"event": "Applying Migration 2: Add sqlite-vec vector storage support to embeddings table", "level": "info", "timestamp": "2025-07-31T06:47:20.058925Z"}
{"event": "Vector storage migration applied successfully", "level": "info", "timestamp": "2025-07-31T06:47:20.077381Z"}
{"event": "Successfully applied migration 2", "level": "info", "timestamp": "2025-07-31T06:47:20.079383Z"}
{"event": "Applying Migration 3: Fix FTS table column naming to match base tables", "level": "info", "timestamp": "2025-07-31T06:47:20.079674Z"}
{"event": "Applying FTS column naming fix migration", "level": "info", "timestamp": "2025-07-31T06:47:20.080235Z"}
{"event": "FTS column naming fix migration applied successfully", "level": "info", "timestamp": "2025-07-31T06:47:20.112087Z"}
{"event": "Successfully applied migration 3", "level": "info", "timestamp": "2025-07-31T06:47:20.114244Z"}
{"event": "Applying Migration 4: Add scene dependencies table for logical ordering", "level": "info", "timestamp": "2025-07-31T06:47:20.114548Z"}
{"event": "Applying scene dependencies migration", "level": "info", "timestamp": "2025-07-31T06:47:20.115135Z"}
{"event": "Scene dependencies migration applied successfully", "level": "info", "timestamp": "2025-07-31T06:47:20.126965Z"}
{"event": "Successfully applied migration 4", "level": "info", "timestamp": "2025-07-31T06:47:20.128610Z"}
{"event": "Applying Migration 0: ", "level": "info", "timestamp": "2025-07-31T06:47:20.128917Z"}
{"event": "Applying Script Bible migration", "level": "info", "timestamp": "2025-07-31T06:47:20.129500Z"}
{"event": "Script Bible migration applied successfully", "level": "info", "timestamp": "2025-07-31T06:47:20.244827Z"}
{"event": "Successfully applied migration 5", "level": "info", "timestamp": "2025-07-31T06:47:20.246959Z"}
{"event": "Database migration completed successfully", "level": "info", "timestamp": "2025-07-31T06:47:20.247249Z"}
{"event": "Starting ScriptRAG API", "level": "info", "timestamp": "2025-07-31T06:47:20.354639Z"}
{"event": "DatabaseOperations uses synchronous SQLite operations in async functions. This blocks the event loop and should be fixed for production use.", "level": "warning", "timestamp": "2025-07-31T06:47:20.355015Z"}
{"event": "Migration sequence is valid", "level": "info", "timestamp": "2025-07-31T06:47:20.355218Z"}
{"event": "Database is already at latest version", "level": "info", "timestamp": "2025-07-31T06:47:20.357520Z"}
{"db_url": "sqlite+aiosqlite:////tmp/tmpfxvi43tm.db", "event": "Database operations initialized", "level": "info", "timestamp": "2025-07-31T06:47:20.361959Z"}
[32mPASSED[0m{"event": "Shutting down ScriptRAG API", "level": "info", "timestamp": "2025-07-31T06:47:20.380535Z"}

tests/test_api.py::test_semantic_search_missing_query {"event": "Migration sequence is valid", "level": "info", "timestamp": "2025-07-31T06:47:20.744198Z"}
{"event": "Applying 5 pending migrations", "level": "info", "timestamp": "2025-07-31T06:47:20.745086Z"}
{"event": "Applying Migration 1: Create initial database schema", "level": "info", "timestamp": "2025-07-31T06:47:20.745292Z"}
{"event": "Applying initial schema migration", "level": "info", "timestamp": "2025-07-31T06:47:20.745877Z"}
{"event": "Initial schema migration completed", "level": "info", "timestamp": "2025-07-31T06:47:20.849784Z"}
{"event": "Successfully applied migration 1", "level": "info", "timestamp": "2025-07-31T06:47:20.851323Z"}
{"event": "Applying Migration 2: Add sqlite-vec vector storage support to embeddings table", "level": "info", "timestamp": "2025-07-31T06:47:20.851524Z"}
{"event": "Vector storage migration applied successfully", "level": "info", "timestamp": "2025-07-31T06:47:20.866364Z"}
{"event": "Successfully applied migration 2", "level": "info", "timestamp": "2025-07-31T06:47:20.867923Z"}
{"event": "Applying Migration 3: Fix FTS table column naming to match base tables", "level": "info", "timestamp": "2025-07-31T06:47:20.868120Z"}
{"event": "Applying FTS column naming fix migration", "level": "info", "timestamp": "2025-07-31T06:47:20.868480Z"}
{"event": "FTS column naming fix migration applied successfully", "level": "info", "timestamp": "2025-07-31T06:47:20.894400Z"}
{"event": "Successfully applied migration 3", "level": "info", "timestamp": "2025-07-31T06:47:20.895851Z"}
{"event": "Applying Migration 4: Add scene dependencies table for logical ordering", "level": "info", "timestamp": "2025-07-31T06:47:20.896045Z"}
{"event": "Applying scene dependencies migration", "level": "info", "timestamp": "2025-07-31T06:47:20.896419Z"}
{"event": "Scene dependencies migration applied successfully", "level": "info", "timestamp": "2025-07-31T06:47:20.908996Z"}
{"event": "Successfully applied migration 4", "level": "info", "timestamp": "2025-07-31T06:47:20.911100Z"}
{"event": "Applying Migration 0: ", "level": "info", "timestamp": "2025-07-31T06:47:20.911466Z"}
{"event": "Applying Script Bible migration", "level": "info", "timestamp": "2025-07-31T06:47:20.911953Z"}
{"event": "Script Bible migration applied successfully", "level": "info", "timestamp": "2025-07-31T06:47:21.026054Z"}
{"event": "Successfully applied migration 5", "level": "info", "timestamp": "2025-07-31T06:47:21.027985Z"}
{"event": "Database migration completed successfully", "level": "info", "timestamp": "2025-07-31T06:47:21.028146Z"}
{"event": "Starting ScriptRAG API", "level": "info", "timestamp": "2025-07-31T06:47:21.138886Z"}
{"event": "DatabaseOperations uses synchronous SQLite operations in async functions. This blocks the event loop and should be fixed for production use.", "level": "warning", "timestamp": "2025-07-31T06:47:21.139572Z"}
{"event": "Migration sequence is valid", "level": "info", "timestamp": "2025-07-31T06:47:21.139848Z"}
{"event": "Database is already at latest version", "level": "info", "timestamp": "2025-07-31T06:47:21.143043Z"}
{"db_url": "sqlite+aiosqlite:////tmp/tmppj0sek5n.db", "event": "Database operations initialized", "level": "info", "timestamp": "2025-07-31T06:47:21.148879Z"}
[32mPASSED[0m{"event": "Shutting down ScriptRAG API", "level": "info", "timestamp": "2025-07-31T06:47:21.165312Z"}

tests/test_api.py::test_openapi_schema {"event": "Migration sequence is valid", "level": "info", "timestamp": "2025-07-31T06:47:21.545019Z"}
{"event": "Applying 5 pending migrations", "level": "info", "timestamp": "2025-07-31T06:47:21.546140Z"}
{"event": "Applying Migration 1: Create initial database schema", "level": "info", "timestamp": "2025-07-31T06:47:21.546344Z"}
{"event": "Applying initial schema migration", "level": "info", "timestamp": "2025-07-31T06:47:21.546810Z"}
{"event": "Initial schema migration completed", "level": "info", "timestamp": "2025-07-31T06:47:21.674240Z"}
{"event": "Successfully applied migration 1", "level": "info", "timestamp": "2025-07-31T06:47:21.675872Z"}
{"event": "Applying Migration 2: Add sqlite-vec vector storage support to embeddings table", "level": "info", "timestamp": "2025-07-31T06:47:21.676064Z"}
{"event": "Vector storage migration applied successfully", "level": "info", "timestamp": "2025-07-31T06:47:21.692543Z"}
{"event": "Successfully applied migration 2", "level": "info", "timestamp": "2025-07-31T06:47:21.694719Z"}
{"event": "Applying Migration 3: Fix FTS table column naming to match base tables", "level": "info", "timestamp": "2025-07-31T06:47:21.694976Z"}
{"event": "Applying FTS column naming fix migration", "level": "info", "timestamp": "2025-07-31T06:47:21.695533Z"}
{"event": "FTS column naming fix migration applied successfully", "level": "info", "timestamp": "2025-07-31T06:47:21.724136Z"}
{"event": "Successfully applied migration 3", "level": "info", "timestamp": "2025-07-31T06:47:21.726102Z"}
{"event": "Applying Migration 4: Add scene dependencies table for logical ordering", "level": "info", "timestamp": "2025-07-31T06:47:21.726308Z"}
{"event": "Applying scene dependencies migration", "level": "info", "timestamp": "2025-07-31T06:47:21.726726Z"}
{"event": "Scene dependencies migration applied successfully", "level": "info", "timestamp": "2025-07-31T06:47:21.736489Z"}
{"event": "Successfully applied migration 4", "level": "info", "timestamp": "2025-07-31T06:47:21.738611Z"}
{"event": "Applying Migration 0: ", "level": "info", "timestamp": "2025-07-31T06:47:21.738821Z"}
{"event": "Applying Script Bible migration", "level": "info", "timestamp": "2025-07-31T06:47:21.739192Z"}
{"event": "Script Bible migration applied successfully", "level": "info", "timestamp": "2025-07-31T06:47:21.832175Z"}
{"event": "Successfully applied migration 5", "level": "info", "timestamp": "2025-07-31T06:47:21.834060Z"}
{"event": "Database migration completed successfully", "level": "info", "timestamp": "2025-07-31T06:47:21.834218Z"}
{"event": "Starting ScriptRAG API", "level": "info", "timestamp": "2025-07-31T06:47:21.946454Z"}
{"event": "DatabaseOperations uses synchronous SQLite operations in async functions. This blocks the event loop and should be fixed for production use.", "level": "warning", "timestamp": "2025-07-31T06:47:21.947214Z"}
{"event": "Migration sequence is valid", "level": "info", "timestamp": "2025-07-31T06:47:21.947501Z"}
{"event": "Database is already at latest version", "level": "info", "timestamp": "2025-07-31T06:47:21.951110Z"}
{"db_url": "sqlite+aiosqlite:////tmp/tmpl2s26by9.db", "event": "Database operations initialized", "level": "info", "timestamp": "2025-07-31T06:47:21.958437Z"}
[32mPASSED[0m{"event": "Shutting down ScriptRAG API", "level": "info", "timestamp": "2025-07-31T06:47:22.077723Z"}

tests/test_api.py::test_docs_available {"event": "Migration sequence is valid", "level": "info", "timestamp": "2025-07-31T06:47:22.414843Z"}
{"event": "Applying 5 pending migrations", "level": "info", "timestamp": "2025-07-31T06:47:22.415780Z"}
{"event": "Applying Migration 1: Create initial database schema", "level": "info", "timestamp": "2025-07-31T06:47:22.415934Z"}
{"event": "Applying initial schema migration", "level": "info", "timestamp": "2025-07-31T06:47:22.416221Z"}
{"event": "Initial schema migration completed", "level": "info", "timestamp": "2025-07-31T06:47:22.518100Z"}
{"event": "Successfully applied migration 1", "level": "info", "timestamp": "2025-07-31T06:47:22.519620Z"}
{"event": "Applying Migration 2: Add sqlite-vec vector storage support to embeddings table", "level": "info", "timestamp": "2025-07-31T06:47:22.520057Z"}
{"event": "Vector storage migration applied successfully", "level": "info", "timestamp": "2025-07-31T06:47:22.534890Z"}
{"event": "Successfully applied migration 2", "level": "info", "timestamp": "2025-07-31T06:47:22.536347Z"}
{"event": "Applying Migration 3: Fix FTS table column naming to match base tables", "level": "info", "timestamp": "2025-07-31T06:47:22.536541Z"}
{"event": "Applying FTS column naming fix migration", "level": "info", "timestamp": "2025-07-31T06:47:22.536993Z"}
{"event": "FTS column naming fix migration applied successfully", "level": "info", "timestamp": "2025-07-31T06:47:22.560262Z"}
{"event": "Successfully applied migration 3", "level": "info", "timestamp": "2025-07-31T06:47:22.561954Z"}
{"event": "Applying Migration 4: Add scene dependencies table for logical ordering", "level": "info", "timestamp": "2025-07-31T06:47:22.562152Z"}
{"event": "Applying scene dependencies migration", "level": "info", "timestamp": "2025-07-31T06:47:22.562552Z"}
{"event": "Scene dependencies migration applied successfully", "level": "info", "timestamp": "2025-07-31T06:47:22.571220Z"}
{"event": "Successfully applied migration 4", "level": "info", "timestamp": "2025-07-31T06:47:22.572553Z"}
{"event": "Applying Migration 0: ", "level": "info", "timestamp": "2025-07-31T06:47:22.572756Z"}
{"event": "Applying Script Bible migration", "level": "info", "timestamp": "2025-07-31T06:47:22.573142Z"}
{"event": "Script Bible migration applied successfully", "level": "info", "timestamp": "2025-07-31T06:47:22.670216Z"}
{"event": "Successfully applied migration 5", "level": "info", "timestamp": "2025-07-31T06:47:22.672171Z"}
{"event": "Database migration completed successfully", "level": "info", "timestamp": "2025-07-31T06:47:22.672694Z"}
{"event": "Starting ScriptRAG API", "level": "info", "timestamp": "2025-07-31T06:47:22.797274Z"}
{"event": "DatabaseOperations uses synchronous SQLite operations in async functions. This blocks the event loop and should be fixed for production use.", "level": "warning", "timestamp": "2025-07-31T06:47:22.798020Z"}
{"event": "Migration sequence is valid", "level": "info", "timestamp": "2025-07-31T06:47:22.798294Z"}
{"event": "Database is already at latest version", "level": "info", "timestamp": "2025-07-31T06:47:22.801912Z"}
{"db_url": "sqlite+aiosqlite:////tmp/tmp1m4pg2dv.db", "event": "Database operations initialized", "level": "info", "timestamp": "2025-07-31T06:47:22.808915Z"}
[32mPASSED[0m{"event": "Shutting down ScriptRAG API", "level": "info", "timestamp": "2025-07-31T06:47:22.816933Z"}

tests/test_api_app.py::TestCORSMiddleware::test_cors_preflight_request {"event": "Starting ScriptRAG API", "level": "info", "timestamp": "2025-07-31T06:47:23.240675Z"}
[32mPASSED[0m{"event": "Shutting down ScriptRAG API", "level": "info", "timestamp": "2025-07-31T06:47:23.249580Z"}

tests/test_api_app.py::TestCORSMiddleware::test_cors_actual_request {"event": "Starting ScriptRAG API", "level": "info", "timestamp": "2025-07-31T06:47:23.351644Z"}
[32mPASSED[0m{"event": "Shutting down ScriptRAG API", "level": "info", "timestamp": "2025-07-31T06:47:23.360408Z"}

tests/test_api_app.py::TestCORSMiddleware::test_cors_disallowed_origin {"event": "Starting ScriptRAG API", "level": "info", "timestamp": "2025-07-31T06:47:23.466006Z"}
[32mPASSED[0m{"event": "Shutting down ScriptRAG API", "level": "info", "timestamp": "2025-07-31T06:47:23.474812Z"}

tests/test_api_app.py::TestCORSMiddleware::test_cors_wildcard_methods {"event": "Starting ScriptRAG API", "level": "info", "timestamp": "2025-07-31T06:47:23.580401Z"}
[32mPASSED[0m{"event": "Shutting down ScriptRAG API", "level": "info", "timestamp": "2025-07-31T06:47:23.591903Z"}

tests/test_api_app.py::TestCORSMiddleware::test_cors_custom_headers {"event": "Starting ScriptRAG API", "level": "info", "timestamp": "2025-07-31T06:47:23.693582Z"}
[32mPASSED[0m{"event": "Shutting down ScriptRAG API", "level": "info", "timestamp": "2025-07-31T06:47:23.702452Z"}

tests/test_api_app.py::TestExceptionHandlers::test_http_exception_handler {"event": "Starting ScriptRAG API", "level": "info", "timestamp": "2025-07-31T06:47:23.804112Z"}
[32mPASSED[0m{"event": "Shutting down ScriptRAG API", "level": "info", "timestamp": "2025-07-31T06:47:23.813257Z"}

tests/test_api_app.py::TestExceptionHandlers::test_custom_exception_handler_integration {"event": "Starting ScriptRAG API", "level": "info", "timestamp": "2025-07-31T06:47:23.913617Z"}
{"event": "Shutting down ScriptRAG API", "level": "info", "timestamp": "2025-07-31T06:47:23.919808Z"}
[32mPASSED[0m
tests/test_api_app.py::TestExceptionHandlers::test_request_validation_error {"event": "Starting ScriptRAG API", "level": "info", "timestamp": "2025-07-31T06:47:24.018062Z"}
[32mPASSED[0m{"event": "Shutting down ScriptRAG API", "level": "info", "timestamp": "2025-07-31T06:47:24.028008Z"}

tests/test_api_app.py::TestExceptionHandlers::test_validation_error_missing_required_field {"event": "Starting ScriptRAG API", "level": "info", "timestamp": "2025-07-31T06:47:24.125036Z"}
[32mPASSED[0m{"event": "Shutting down ScriptRAG API", "level": "info", "timestamp": "2025-07-31T06:47:24.134660Z"}

tests/test_api_app.py::TestExceptionHandlers::test_internal_server_error_handling {"event": "Starting ScriptRAG API", "level": "info", "timestamp": "2025-07-31T06:47:24.239274Z"}
{"event": "Shutting down ScriptRAG API", "level": "info", "timestamp": "2025-07-31T06:47:24.245350Z"}
[32mPASSED[0m
tests/test_api_app.py::TestExceptionHandlers::test_multiple_exception_handlers {"event": "Starting ScriptRAG API", "level": "info", "timestamp": "2025-07-31T06:47:24.343440Z"}
{"event": "Shutting down ScriptRAG API", "level": "info", "timestamp": "2025-07-31T06:47:24.352610Z"}
[32mPASSED[0m
tests/test_api_app.py::TestLifespanEvents::test_lifespan_startup_shutdown {"event": "Starting ScriptRAG API", "level": "info", "timestamp": "2025-07-31T06:47:24.372526Z"}
{"event": "Shutting down ScriptRAG API", "level": "info", "timestamp": "2025-07-31T06:47:24.375361Z"}
[32mPASSED[0m
tests/test_api_app.py::TestLifespanEvents::test_lifespan_startup_failure {"event": "Starting ScriptRAG API", "level": "info", "timestamp": "2025-07-31T06:47:24.387628Z"}
[32mPASSED[0m
tests/test_api_app.py::TestMiddlewareOrder::test_middleware_execution_order {"event": "Starting ScriptRAG API", "level": "info", "timestamp": "2025-07-31T06:47:24.485240Z"}
{"event": "Shutting down ScriptRAG API", "level": "info", "timestamp": "2025-07-31T06:47:24.493128Z"}
[32mPASSED[0m
tests/test_api_app.py::TestMiddlewareOrder::test_middleware_modifies_response {"event": "Starting ScriptRAG API", "level": "info", "timestamp": "2025-07-31T06:47:24.593037Z"}
{"event": "Shutting down ScriptRAG API", "level": "info", "timestamp": "2025-07-31T06:47:24.602965Z"}
[32mPASSED[0m
tests/test_api_app.py::TestMiddlewareOrder::test_middleware_timing {"event": "Starting ScriptRAG API", "level": "info", "timestamp": "2025-07-31T06:47:24.702693Z"}
{"event": "Shutting down ScriptRAG API", "level": "info", "timestamp": "2025-07-31T06:47:24.710420Z"}
[32mPASSED[0m
tests/test_api_app.py::TestMiddlewareOrder::test_middleware_error_handling {"event": "Starting ScriptRAG API", "level": "info", "timestamp": "2025-07-31T06:47:24.810121Z"}
{"event": "Shutting down ScriptRAG API", "level": "info", "timestamp": "2025-07-31T06:47:24.817427Z"}
[32mPASSED[0m
tests/test_api_app.py::TestEndpoints::test_root_endpoint {"event": "Starting ScriptRAG API", "level": "info", "timestamp": "2025-07-31T06:47:24.916922Z"}
[32mPASSED[0m{"event": "Shutting down ScriptRAG API", "level": "info", "timestamp": "2025-07-31T06:47:24.925300Z"}

tests/test_api_app.py::TestEndpoints::test_health_endpoint {"event": "Starting ScriptRAG API", "level": "info", "timestamp": "2025-07-31T06:47:25.022467Z"}
[32mPASSED[0m{"event": "Shutting down ScriptRAG API", "level": "info", "timestamp": "2025-07-31T06:47:25.030910Z"}

tests/test_api_app.py::TestEndpoints::test_openapi_endpoint {"event": "Starting ScriptRAG API", "level": "info", "timestamp": "2025-07-31T06:47:25.127844Z"}
[32mPASSED[0m{"event": "Shutting down ScriptRAG API", "level": "info", "timestamp": "2025-07-31T06:47:25.215245Z"}

tests/test_api_app.py::TestEndpoints::test_docs_endpoint {"event": "Starting ScriptRAG API", "level": "info", "timestamp": "2025-07-31T06:47:25.310613Z"}
[32mPASSED[0m{"event": "Shutting down ScriptRAG API", "level": "info", "timestamp": "2025-07-31T06:47:25.319173Z"}

tests/test_api_app.py::TestEndpoints::test_redoc_endpoint {"event": "Starting ScriptRAG API", "level": "info", "timestamp": "2025-07-31T06:47:25.415726Z"}
[32mPASSED[0m{"event": "Shutting down ScriptRAG API", "level": "info", "timestamp": "2025-07-31T06:47:25.423986Z"}

tests/test_api_app.py::TestErrorResponseFormats::test_404_error_format {"event": "Starting ScriptRAG API", "level": "info", "timestamp": "2025-07-31T06:47:25.520086Z"}
[32mPASSED[0m{"event": "Shutting down ScriptRAG API", "level": "info", "timestamp": "2025-07-31T06:47:25.528839Z"}

tests/test_api_app.py::TestErrorResponseFormats::test_422_error_format {"event": "Starting ScriptRAG API", "level": "info", "timestamp": "2025-07-31T06:47:25.625844Z"}
[32mPASSED[0m{"event": "Shutting down ScriptRAG API", "level": "info", "timestamp": "2025-07-31T06:47:25.635615Z"}

tests/test_api_app.py::TestErrorResponseFormats::test_method_not_allowed_format {"event": "Starting ScriptRAG API", "level": "info", "timestamp": "2025-07-31T06:47:25.738256Z"}
[32mPASSED[0m{"event": "Shutting down ScriptRAG API", "level": "info", "timestamp": "2025-07-31T06:47:25.747339Z"}

tests/test_api_app.py::TestRequestHeaders::test_content_type_json {"event": "Starting ScriptRAG API", "level": "info", "timestamp": "2025-07-31T06:47:26.261464Z"}
[32mPASSED[0m{"event": "Shutting down ScriptRAG API", "level": "info", "timestamp": "2025-07-31T06:47:26.277350Z"}

tests/test_api_app.py::TestRequestHeaders::test_unsupported_content_type {"event": "Starting ScriptRAG API", "level": "info", "timestamp": "2025-07-31T06:47:26.375974Z"}
[32mPASSED[0m{"event": "Shutting down ScriptRAG API", "level": "info", "timestamp": "2025-07-31T06:47:26.386348Z"}

tests/test_api_app.py::TestRequestHeaders::test_missing_content_type {"event": "Starting ScriptRAG API", "level": "info", "timestamp": "2025-07-31T06:47:26.487853Z"}
[32mPASSED[0m{"event": "Shutting down ScriptRAG API", "level": "info", "timestamp": "2025-07-31T06:47:26.496903Z"}

tests/test_api_app.py::TestAPISecurityFeatures::test_large_request_body {"event": "Starting ScriptRAG API", "level": "info", "timestamp": "2025-07-31T06:47:26.599703Z"}
[32mPASSED[0m{"event": "Shutting down ScriptRAG API", "level": "info", "timestamp": "2025-07-31T06:47:27.228331Z"}

tests/test_api_app.py::TestAPISecurityFeatures::test_sql_injection_attempt {"event": "Starting ScriptRAG API", "level": "info", "timestamp": "2025-07-31T06:47:27.385473Z"}
[32mPASSED[0m{"event": "Shutting down ScriptRAG API", "level": "info", "timestamp": "2025-07-31T06:47:27.408393Z"}

tests/test_api_app.py::TestAPISecurityFeatures::test_path_traversal_attempt {"event": "Starting ScriptRAG API", "level": "info", "timestamp": "2025-07-31T06:47:27.515516Z"}
[32mPASSED[0m{"event": "Shutting down ScriptRAG API", "level": "info", "timestamp": "2025-07-31T06:47:27.524582Z"}

tests/test_api_app.py::TestAPISecurityFeatures::test_xss_prevention {"event": "Starting ScriptRAG API", "level": "info", "timestamp": "2025-07-31T06:47:27.629616Z"}
[32mPASSED[0m{"event": "Shutting down ScriptRAG API", "level": "info", "timestamp": "2025-07-31T06:47:27.638923Z"}

tests/test_api_app.py::TestAsyncBehavior::test_concurrent_requests [32mPASSED[0m
tests/test_api_app.py::TestAsyncBehavior::test_long_running_request_timeout {"event": "Starting ScriptRAG API", "level": "info", "timestamp": "2025-07-31T06:47:27.846862Z"}
{"event": "Shutting down ScriptRAG API", "level": "info", "timestamp": "2025-07-31T06:47:32.859270Z"}
[32mPASSED[0m
tests/test_api_app.py::TestAppConfiguration::test_app_metadata {"event": "Starting ScriptRAG API", "level": "info", "timestamp": "2025-07-31T06:47:32.957681Z"}
[32mPASSED[0m{"event": "Shutting down ScriptRAG API", "level": "info", "timestamp": "2025-07-31T06:47:33.039981Z"}

tests/test_api_app.py::TestAppConfiguration::test_custom_docs_urls {"event": "Starting ScriptRAG API", "level": "info", "timestamp": "2025-07-31T06:47:33.133835Z"}
[32mPASSED[0m{"event": "Shutting down ScriptRAG API", "level": "info", "timestamp": "2025-07-31T06:47:33.223082Z"}

tests/test_api_app.py::TestAppConfiguration::test_app_state_initialization {"event": "Starting ScriptRAG API", "level": "info", "timestamp": "2025-07-31T06:47:33.319981Z"}
{"event": "Shutting down ScriptRAG API", "level": "info", "timestamp": "2025-07-31T06:47:33.326785Z"}
[32mPASSED[0m
tests/test_api_db_operations.py::TestDatabaseOperationsInitialization::test_initialize_success {"event": "DatabaseOperations uses synchronous SQLite operations in async functions. This blocks the event loop and should be fixed for production use.", "level": "warning", "timestamp": "2025-07-31T06:47:33.336678Z"}
{"db_url": "sqlite+aiosqlite:///test.db", "event": "Database operations initialized", "level": "info", "timestamp": "2025-07-31T06:47:33.338685Z"}
[32mPASSED[0m
tests/test_api_db_operations.py::TestDatabaseOperationsInitialization::test_close_connection [32mPASSED[0m
tests/test_api_db_operations.py::TestScriptOperations::test_store_script_success {"script_id": "da8e7ac6-f30e-405b-baa6-e4fcdb3e8cff", "title": "Test Script", "event": "Stored script", "level": "info", "timestamp": "2025-07-31T06:47:33.354107Z"}
[32mPASSED[0m
tests/test_api_db_operations.py::TestScriptOperations::test_store_script_no_connection [32mPASSED[0m
tests/test_api_db_operations.py::TestScriptOperations::test_get_script_success [32mPASSED[0m
tests/test_api_db_operations.py::TestScriptOperations::test_get_script_not_found [32mPASSED[0m
tests/test_api_db_operations.py::TestScriptOperations::test_get_script_invalid_json_metadata [32mPASSED[0m
tests/test_api_db_operations.py::TestScriptOperations::test_list_scripts_success {"placeholder_fields": ["has_embeddings"], "script_count": 2, "event": "list_scripts returning placeholder values", "level": "warning", "timestamp": "2025-07-31T06:47:33.400286Z"}
[32mPASSED[0m
tests/test_api_db_operations.py::TestScriptOperations::test_list_scripts_empty [32mPASSED[0m
tests/test_api_db_operations.py::TestScriptOperations::test_delete_script_success {"script_id": "34d6643c-1f9e-45a7-a427-59dcfcdf938e", "event": "Deleted script", "level": "info", "timestamp": "2025-07-31T06:47:33.420061Z"}
[32mPASSED[0m
tests/test_api_db_operations.py::TestEmbeddingOperations::test_generate_embeddings_success [32mPASSED[0m
tests/test_api_db_operations.py::TestEmbeddingOperations::test_generate_embeddings_no_pipeline [32mPASSED[0m
tests/test_api_db_operations.py::TestHelperMethods::test_extract_characters [32mPASSED[0m
tests/test_api_db_operations.py::TestHelperMethods::test_extract_characters_empty [32mPASSED[0m
tests/test_api_db_operations.py::TestHelperMethods::test_extract_characters_no_dialogue [32mPASSED[0m
tests/test_api_db_operations.py::TestHelperMethods::test_extract_characters_with_parentheticals [32mPASSED[0m
tests/test_api_db_operations.py::TestSceneOperations::test_get_scene_success [32mPASSED[0m
tests/test_api_db_operations.py::TestSceneOperations::test_create_scene_success [32mPASSED[0m
tests/test_api_db_operations.py::TestSceneOperations::test_update_scene_success [32mPASSED[0m
tests/test_api_db_operations.py::TestSceneOperations::test_delete_scene_success [32mPASSED[0m
tests/test_api_db_operations.py::TestSceneOperations::test_shift_scene_numbers_success [32mPASSED[0m
tests/test_api_embeddings.py::TestEmbeddingGenerationEndpoint::test_generate_embeddings_success [32mPASSED[0m
tests/test_api_embeddings.py::TestEmbeddingGenerationEndpoint::test_generate_embeddings_with_regenerate [32mPASSED[0m
tests/test_api_embeddings.py::TestEmbeddingGenerationEndpoint::test_generate_embeddings_script_not_found [32mPASSED[0m
tests/test_api_embeddings.py::TestEmbeddingGenerationEndpoint::test_generate_embeddings_processing_error {"script_id": "9cb7c42f-667d-47c7-bd83-da76d5221d04", "error": "Embedding model unavailable", "event": "Failed to generate embeddings", "level": "error", "timestamp": "2025-07-31T06:47:33.875033Z"}
[32mPASSED[0m
tests/test_api_embeddings.py::TestEmbeddingGenerationEndpoint::test_generate_embeddings_default_regenerate [32mPASSED[0m
tests/test_api_embeddings.py::TestEmbeddingStatusEndpoint::test_get_embedding_status_complete [32mPASSED[0m
tests/test_api_embeddings.py::TestEmbeddingStatusEndpoint::test_get_embedding_status_partial [32mPASSED[0m
tests/test_api_embeddings.py::TestEmbeddingStatusEndpoint::test_get_embedding_status_no_scenes [32mPASSED[0m
tests/test_api_embeddings.py::TestEmbeddingStatusEndpoint::test_get_embedding_status_script_not_found [32mPASSED[0m
tests/test_api_embeddings.py::TestEmbeddingStatusEndpoint::test_get_embedding_status_database_error {"script_id": "189884ad-0716-4275-9d60-1f8514b9ba50", "error": "Database connection lost", "event": "Failed to get embedding status", "level": "error", "timestamp": "2025-07-31T06:47:34.862697Z"}
[32mPASSED[0m
tests/test_api_embeddings.py::TestEmbeddingStatusEndpoint::test_get_embedding_status_no_embeddings [32mPASSED[0m
tests/test_api_graphs.py::TestCharacterGraphEndpoint::test_get_character_graph_success [32mPASSED[0m
tests/test_api_graphs.py::TestCharacterGraphEndpoint::test_get_character_graph_empty_result [32mPASSED[0m
tests/test_api_graphs.py::TestCharacterGraphEndpoint::test_get_character_graph_database_error {"character": "JOHN", "error": "Database connection failed", "event": "Failed to get character graph", "level": "error", "timestamp": "2025-07-31T06:47:35.250195Z"}
[32mPASSED[0m
tests/test_api_graphs.py::TestCharacterGraphEndpoint::test_get_character_graph_validation_error [32mPASSED[0m
tests/test_api_graphs.py::TestTimelineGraphEndpoint::test_get_timeline_graph_success [32mPASSED[0m
tests/test_api_graphs.py::TestTimelineGraphEndpoint::test_get_timeline_graph_script_not_found [32mPASSED[0m
tests/test_api_graphs.py::TestTimelineGraphEndpoint::test_get_timeline_graph_different_groupings [32mPASSED[0m
tests/test_api_graphs.py::TestLocationGraphEndpoint::test_get_location_graph_success [32mPASSED[0m
tests/test_api_graphs.py::TestLocationGraphEndpoint::test_get_location_graph_script_not_found [32mPASSED[0m
tests/test_api_graphs.py::TestLocationGraphEndpoint::test_get_location_graph_empty_script [32mPASSED[0m
tests/test_api_graphs.py::TestLocationGraphEndpoint::test_get_location_graph_database_error {"script_id": "ddd5e02d-f7b0-451a-93a6-3fae75845a4e", "error": "Database error", "event": "Failed to get location graph", "level": "error", "timestamp": "2025-07-31T06:47:36.037414Z"}
[32mPASSED[0m
tests/test_api_graphs.py::TestGraphNodeTypeConversion::test_node_type_conversion [32mPASSED[0m
tests/test_api_scene_operations_phase_5_2.py::TestEnhancedSceneAPIEndpoints::test_enhanced_update_scene_success [32mPASSED[0m
tests/test_api_scene_operations_phase_5_2.py::TestEnhancedSceneAPIEndpoints::test_enhanced_update_scene_not_found [32mPASSED[0m
tests/test_api_scene_operations_phase_5_2.py::TestEnhancedSceneAPIEndpoints::test_enhanced_update_scene_failure [32mPASSED[0m
tests/test_api_scene_operations_phase_5_2.py::TestEnhancedSceneAPIEndpoints::test_enhanced_delete_scene_success [32mPASSED[0m
tests/test_api_scene_operations_phase_5_2.py::TestEnhancedSceneAPIEndpoints::test_enhanced_delete_scene_not_found [32mPASSED[0m
tests/test_api_scene_operations_phase_5_2.py::TestEnhancedSceneAPIEndpoints::test_enhanced_delete_scene_failure [32mPASSED[0m
tests/test_api_scene_operations_phase_5_2.py::TestEnhancedSceneAPIEndpoints::test_inject_scene_at_position_success [32mPASSED[0m
tests/test_api_scene_operations_phase_5_2.py::TestEnhancedSceneAPIEndpoints::test_inject_scene_reference_not_found [32mPASSED[0m
tests/test_api_scene_operations_phase_5_2.py::TestEnhancedSceneAPIEndpoints::test_inject_scene_failure [32mPASSED[0m
tests/test_api_scene_operations_phase_5_2.py::TestEnhancedSceneAPIEndpoints::test_validate_story_continuity_success [32mPASSED[0m
tests/test_api_scene_operations_phase_5_2.py::TestEnhancedSceneAPIEndpoints::test_validate_story_continuity_script_not_found [32mPASSED[0m
tests/test_api_scene_operations_phase_5_2.py::TestEnhancedSceneAPIEndpoints::test_update_scene_metadata_success [32mPASSED[0m
tests/test_api_scene_operations_phase_5_2.py::TestEnhancedSceneAPIEndpoints::test_update_scene_metadata_not_found [32mPASSED[0m
tests/test_api_scene_operations_phase_5_2.py::TestEnhancedSceneAPIEndpoints::test_update_scene_metadata_failure [32mPASSED[0m
tests/test_api_scene_operations_phase_5_2.py::TestSceneOperationsAPIIntegration::test_api_endpoint_registration [32mPASSED[0m
tests/test_api_scene_operations_phase_5_2.py::TestSceneOperationsAPIIntegration::test_scene_update_request_schema [32mPASSED[0m
tests/test_api_scene_operations_phase_5_2.py::TestSceneOperationsAPIIntegration::test_optional_fields_in_update_request [32mPASSED[0m
tests/test_api_scene_operations_phase_5_2.py::TestSceneOperationsAPIIntegration::test_error_handling_consistency {"scene_id": "scene_001", "error": "Database error", "event": "Failed to update scene", "level": "error", "timestamp": "2025-07-31T06:47:36.476461Z"}
{"scene_id": "scene_001", "error": "Database error", "event": "Failed to delete scene", "level": "error", "timestamp": "2025-07-31T06:47:36.476758Z"}
{"scene_id": "scene_001", "position": 1, "error": "Database error", "event": "Failed to inject scene at position", "level": "error", "timestamp": "2025-07-31T06:47:36.476957Z"}
[32mPASSED[0m
tests/test_api_scene_ordering.py::TestSceneOrderingEndpoints::test_reorder_scenes {"event": "Migration sequence is valid", "level": "info", "timestamp": "2025-07-31T06:47:36.481356Z"}
{"event": "Applying 5 pending migrations", "level": "info", "timestamp": "2025-07-31T06:47:36.482160Z"}
{"event": "Applying Migration 1: Create initial database schema", "level": "info", "timestamp": "2025-07-31T06:47:36.482297Z"}
{"event": "Applying initial schema migration", "level": "info", "timestamp": "2025-07-31T06:47:36.482557Z"}
{"event": "Initial schema migration completed", "level": "info", "timestamp": "2025-07-31T06:47:36.578080Z"}
{"event": "Successfully applied migration 1", "level": "info", "timestamp": "2025-07-31T06:47:36.579320Z"}
{"event": "Applying Migration 2: Add sqlite-vec vector storage support to embeddings table", "level": "info", "timestamp": "2025-07-31T06:47:36.579510Z"}
{"event": "Vector storage migration applied successfully", "level": "info", "timestamp": "2025-07-31T06:47:36.595399Z"}
{"event": "Successfully applied migration 2", "level": "info", "timestamp": "2025-07-31T06:47:36.597138Z"}
{"event": "Applying Migration 3: Fix FTS table column naming to match base tables", "level": "info", "timestamp": "2025-07-31T06:47:36.597553Z"}
{"event": "Applying FTS column naming fix migration", "level": "info", "timestamp": "2025-07-31T06:47:36.598011Z"}
{"event": "FTS column naming fix migration applied successfully", "level": "info", "timestamp": "2025-07-31T06:47:36.623689Z"}
{"event": "Successfully applied migration 3", "level": "info", "timestamp": "2025-07-31T06:47:36.625337Z"}
{"event": "Applying Migration 4: Add scene dependencies table for logical ordering", "level": "info", "timestamp": "2025-07-31T06:47:36.625882Z"}
{"event": "Applying scene dependencies migration", "level": "info", "timestamp": "2025-07-31T06:47:36.626561Z"}
{"event": "Scene dependencies migration applied successfully", "level": "info", "timestamp": "2025-07-31T06:47:36.639015Z"}
{"event": "Successfully applied migration 4", "level": "info", "timestamp": "2025-07-31T06:47:36.641079Z"}
{"event": "Applying Migration 0: ", "level": "info", "timestamp": "2025-07-31T06:47:36.641426Z"}
{"event": "Applying Script Bible migration", "level": "info", "timestamp": "2025-07-31T06:47:36.641843Z"}
{"event": "Script Bible migration applied successfully", "level": "info", "timestamp": "2025-07-31T06:47:36.751914Z"}
{"event": "Successfully applied migration 5", "level": "info", "timestamp": "2025-07-31T06:47:36.753329Z"}
{"event": "Database migration completed successfully", "level": "info", "timestamp": "2025-07-31T06:47:36.753483Z"}
{"event": "Starting ScriptRAG API", "level": "info", "timestamp": "2025-07-31T06:47:36.881038Z"}
{"event": "DatabaseOperations uses synchronous SQLite operations in async functions. This blocks the event loop and should be fixed for production use.", "level": "warning", "timestamp": "2025-07-31T06:47:36.881323Z"}
{"event": "Migration sequence is valid", "level": "info", "timestamp": "2025-07-31T06:47:36.881465Z"}
{"event": "Database is already at latest version", "level": "info", "timestamp": "2025-07-31T06:47:36.883674Z"}
{"db_url": "sqlite+aiosqlite:////tmp/tmpex9ogsa2.db", "event": "Database operations initialized", "level": "info", "timestamp": "2025-07-31T06:47:36.888112Z"}
{"event": "Created script graph node 1fcbc723-c193-4ac7-81fd-83838bb8541b for 'Test Script'", "level": "info", "timestamp": "2025-07-31T06:47:36.899661Z"}
{"script_id": "a927ecdf-5e24-43df-9a8c-a0a3977c4a8d", "title": "Test Script", "event": "Stored script", "level": "info", "timestamp": "2025-07-31T06:47:36.913411Z"}
{"event": "Updated script order for 5 scenes", "level": "info", "timestamp": "2025-07-31T06:47:36.927128Z"}
[32mPASSED[0m{"event": "Shutting down ScriptRAG API", "level": "info", "timestamp": "2025-07-31T06:47:36.932596Z"}

tests/test_api_scene_ordering.py::TestSceneOrderingEndpoints::test_infer_temporal_order {"event": "Migration sequence is valid", "level": "info", "timestamp": "2025-07-31T06:47:37.402015Z"}
{"event": "Applying 5 pending migrations", "level": "info", "timestamp": "2025-07-31T06:47:37.403118Z"}
{"event": "Applying Migration 1: Create initial database schema", "level": "info", "timestamp": "2025-07-31T06:47:37.403370Z"}
{"event": "Applying initial schema migration", "level": "info", "timestamp": "2025-07-31T06:47:37.403786Z"}
{"event": "Initial schema migration completed", "level": "info", "timestamp": "2025-07-31T06:47:37.511052Z"}
{"event": "Successfully applied migration 1", "level": "info", "timestamp": "2025-07-31T06:47:37.512678Z"}
{"event": "Applying Migration 2: Add sqlite-vec vector storage support to embeddings table", "level": "info", "timestamp": "2025-07-31T06:47:37.512915Z"}
{"event": "Vector storage migration applied successfully", "level": "info", "timestamp": "2025-07-31T06:47:37.527907Z"}
{"event": "Successfully applied migration 2", "level": "info", "timestamp": "2025-07-31T06:47:37.529714Z"}
{"event": "Applying Migration 3: Fix FTS table column naming to match base tables", "level": "info", "timestamp": "2025-07-31T06:47:37.529948Z"}
{"event": "Applying FTS column naming fix migration", "level": "info", "timestamp": "2025-07-31T06:47:37.530378Z"}
{"event": "FTS column naming fix migration applied successfully", "level": "info", "timestamp": "2025-07-31T06:47:37.558875Z"}
{"event": "Successfully applied migration 3", "level": "info", "timestamp": "2025-07-31T06:47:37.560340Z"}
{"event": "Applying Migration 4: Add scene dependencies table for logical ordering", "level": "info", "timestamp": "2025-07-31T06:47:37.560535Z"}
{"event": "Applying scene dependencies migration", "level": "info", "timestamp": "2025-07-31T06:47:37.561063Z"}
{"event": "Scene dependencies migration applied successfully", "level": "info", "timestamp": "2025-07-31T06:47:37.571194Z"}
{"event": "Successfully applied migration 4", "level": "info", "timestamp": "2025-07-31T06:47:37.572877Z"}
{"event": "Applying Migration 0: ", "level": "info", "timestamp": "2025-07-31T06:47:37.573080Z"}
{"event": "Applying Script Bible migration", "level": "info", "timestamp": "2025-07-31T06:47:37.573582Z"}
{"event": "Script Bible migration applied successfully", "level": "info", "timestamp": "2025-07-31T06:47:37.675541Z"}
{"event": "Successfully applied migration 5", "level": "info", "timestamp": "2025-07-31T06:47:37.680077Z"}
{"event": "Database migration completed successfully", "level": "info", "timestamp": "2025-07-31T06:47:37.680252Z"}
{"event": "Starting ScriptRAG API", "level": "info", "timestamp": "2025-07-31T06:47:37.811670Z"}
{"event": "DatabaseOperations uses synchronous SQLite operations in async functions. This blocks the event loop and should be fixed for production use.", "level": "warning", "timestamp": "2025-07-31T06:47:37.812096Z"}
{"event": "Migration sequence is valid", "level": "info", "timestamp": "2025-07-31T06:47:37.812308Z"}
{"event": "Database is already at latest version", "level": "info", "timestamp": "2025-07-31T06:47:37.814918Z"}
{"db_url": "sqlite+aiosqlite:////tmp/tmpkpqcteyf.db", "event": "Database operations initialized", "level": "info", "timestamp": "2025-07-31T06:47:37.819923Z"}
{"event": "Created script graph node 77fd6062-612a-4590-a127-c46e11df9d23 for 'Test Script'", "level": "info", "timestamp": "2025-07-31T06:47:37.831318Z"}
{"script_id": "526599ef-6c5d-47fe-834c-e9bd2e503a00", "title": "Test Script", "event": "Stored script", "level": "info", "timestamp": "2025-07-31T06:47:37.846139Z"}
{"event": "Inferred temporal order for 5 scenes", "level": "info", "timestamp": "2025-07-31T06:47:37.857863Z"}
[32mPASSED[0m{"event": "Shutting down ScriptRAG API", "level": "info", "timestamp": "2025-07-31T06:47:37.861928Z"}

tests/test_api_scene_ordering.py::TestSceneOrderingEndpoints::test_analyze_dependencies {"event": "Migration sequence is valid", "level": "info", "timestamp": "2025-07-31T06:47:38.205472Z"}
{"event": "Applying 5 pending migrations", "level": "info", "timestamp": "2025-07-31T06:47:38.206349Z"}
{"event": "Applying Migration 1: Create initial database schema", "level": "info", "timestamp": "2025-07-31T06:47:38.206513Z"}
{"event": "Applying initial schema migration", "level": "info", "timestamp": "2025-07-31T06:47:38.206890Z"}
{"event": "Initial schema migration completed", "level": "info", "timestamp": "2025-07-31T06:47:38.303813Z"}
{"event": "Successfully applied migration 1", "level": "info", "timestamp": "2025-07-31T06:47:38.305255Z"}
{"event": "Applying Migration 2: Add sqlite-vec vector storage support to embeddings table", "level": "info", "timestamp": "2025-07-31T06:47:38.305460Z"}
{"event": "Vector storage migration applied successfully", "level": "info", "timestamp": "2025-07-31T06:47:38.318890Z"}
{"event": "Successfully applied migration 2", "level": "info", "timestamp": "2025-07-31T06:47:38.320498Z"}
{"event": "Applying Migration 3: Fix FTS table column naming to match base tables", "level": "info", "timestamp": "2025-07-31T06:47:38.320702Z"}
{"event": "Applying FTS column naming fix migration", "level": "info", "timestamp": "2025-07-31T06:47:38.321141Z"}
{"event": "FTS column naming fix migration applied successfully", "level": "info", "timestamp": "2025-07-31T06:47:38.344620Z"}
{"event": "Successfully applied migration 3", "level": "info", "timestamp": "2025-07-31T06:47:38.346345Z"}
{"event": "Applying Migration 4: Add scene dependencies table for logical ordering", "level": "info", "timestamp": "2025-07-31T06:47:38.346561Z"}
{"event": "Applying scene dependencies migration", "level": "info", "timestamp": "2025-07-31T06:47:38.346999Z"}
{"event": "Scene dependencies migration applied successfully", "level": "info", "timestamp": "2025-07-31T06:47:38.356117Z"}
{"event": "Successfully applied migration 4", "level": "info", "timestamp": "2025-07-31T06:47:38.357420Z"}
{"event": "Applying Migration 0: ", "level": "info", "timestamp": "2025-07-31T06:47:38.357624Z"}
{"event": "Applying Script Bible migration", "level": "info", "timestamp": "2025-07-31T06:47:38.358056Z"}
{"event": "Script Bible migration applied successfully", "level": "info", "timestamp": "2025-07-31T06:47:38.488502Z"}
{"event": "Successfully applied migration 5", "level": "info", "timestamp": "2025-07-31T06:47:38.492184Z"}
{"event": "Database migration completed successfully", "level": "info", "timestamp": "2025-07-31T06:47:38.492367Z"}
{"event": "Starting ScriptRAG API", "level": "info", "timestamp": "2025-07-31T06:47:38.620268Z"}
{"event": "DatabaseOperations uses synchronous SQLite operations in async functions. This blocks the event loop and should be fixed for production use.", "level": "warning", "timestamp": "2025-07-31T06:47:38.620798Z"}
{"event": "Migration sequence is valid", "level": "info", "timestamp": "2025-07-31T06:47:38.621226Z"}
{"event": "Database is already at latest version", "level": "info", "timestamp": "2025-07-31T06:47:38.623607Z"}
{"db_url": "sqlite+aiosqlite:////tmp/tmpamvcb885.db", "event": "Database operations initialized", "level": "info", "timestamp": "2025-07-31T06:47:38.628173Z"}
{"event": "Created script graph node c126d011-7586-4ad1-a3fe-2a25a4e10d10 for 'Test Script'", "level": "info", "timestamp": "2025-07-31T06:47:38.640213Z"}
{"script_id": "314cc771-79c1-41b3-a6ac-b1b60d72b57e", "title": "Test Script", "event": "Stored script", "level": "info", "timestamp": "2025-07-31T06:47:38.657313Z"}
{"event": "Analyzed and created 1 scene dependencies", "level": "info", "timestamp": "2025-07-31T06:47:38.667848Z"}
[32mPASSED[0m{"event": "Shutting down ScriptRAG API", "level": "info", "timestamp": "2025-07-31T06:47:38.671919Z"}

tests/test_api_scene_ordering.py::TestSceneOrderingEndpoints::test_get_scene_dependencies {"event": "Migration sequence is valid", "level": "info", "timestamp": "2025-07-31T06:47:39.042856Z"}
{"event": "Applying 5 pending migrations", "level": "info", "timestamp": "2025-07-31T06:47:39.044405Z"}
{"event": "Applying Migration 1: Create initial database schema", "level": "info", "timestamp": "2025-07-31T06:47:39.044648Z"}
{"event": "Applying initial schema migration", "level": "info", "timestamp": "2025-07-31T06:47:39.045285Z"}
{"event": "Initial schema migration completed", "level": "info", "timestamp": "2025-07-31T06:47:39.166603Z"}
{"event": "Successfully applied migration 1", "level": "info", "timestamp": "2025-07-31T06:47:39.168416Z"}
{"event": "Applying Migration 2: Add sqlite-vec vector storage support to embeddings table", "level": "info", "timestamp": "2025-07-31T06:47:39.168703Z"}
{"event": "Vector storage migration applied successfully", "level": "info", "timestamp": "2025-07-31T06:47:39.183403Z"}
{"event": "Successfully applied migration 2", "level": "info", "timestamp": "2025-07-31T06:47:39.185244Z"}
{"event": "Applying Migration 3: Fix FTS table column naming to match base tables", "level": "info", "timestamp": "2025-07-31T06:47:39.185451Z"}
{"event": "Applying FTS column naming fix migration", "level": "info", "timestamp": "2025-07-31T06:47:39.185913Z"}
{"event": "FTS column naming fix migration applied successfully", "level": "info", "timestamp": "2025-07-31T06:47:39.212060Z"}
{"event": "Successfully applied migration 3", "level": "info", "timestamp": "2025-07-31T06:47:39.213827Z"}
{"event": "Applying Migration 4: Add scene dependencies table for logical ordering", "level": "info", "timestamp": "2025-07-31T06:47:39.214030Z"}
{"event": "Applying scene dependencies migration", "level": "info", "timestamp": "2025-07-31T06:47:39.214441Z"}
{"event": "Scene dependencies migration applied successfully", "level": "info", "timestamp": "2025-07-31T06:47:39.223925Z"}
{"event": "Successfully applied migration 4", "level": "info", "timestamp": "2025-07-31T06:47:39.225418Z"}
{"event": "Applying Migration 0: ", "level": "info", "timestamp": "2025-07-31T06:47:39.225597Z"}
{"event": "Applying Script Bible migration", "level": "info", "timestamp": "2025-07-31T06:47:39.226008Z"}
{"event": "Script Bible migration applied successfully", "level": "info", "timestamp": "2025-07-31T06:47:39.320476Z"}
{"event": "Successfully applied migration 5", "level": "info", "timestamp": "2025-07-31T06:47:39.324077Z"}
{"event": "Database migration completed successfully", "level": "info", "timestamp": "2025-07-31T06:47:39.324223Z"}
{"event": "Starting ScriptRAG API", "level": "info", "timestamp": "2025-07-31T06:47:39.433058Z"}
{"event": "DatabaseOperations uses synchronous SQLite operations in async functions. This blocks the event loop and should be fixed for production use.", "level": "warning", "timestamp": "2025-07-31T06:47:39.433517Z"}
{"event": "Migration sequence is valid", "level": "info", "timestamp": "2025-07-31T06:47:39.433838Z"}
{"event": "Database is already at latest version", "level": "info", "timestamp": "2025-07-31T06:47:39.436471Z"}
{"db_url": "sqlite+aiosqlite:////tmp/tmpukj2n1gb.db", "event": "Database operations initialized", "level": "info", "timestamp": "2025-07-31T06:47:39.441326Z"}
{"event": "Created script graph node 767eb269-ad97-4d86-a974-b5bf89bb87e8 for 'Test Script'", "level": "info", "timestamp": "2025-07-31T06:47:39.452842Z"}
{"script_id": "b20c9fd4-cdae-458e-9b93-01661610a439", "title": "Test Script", "event": "Stored script", "level": "info", "timestamp": "2025-07-31T06:47:39.466536Z"}
{"event": "Analyzed and created 1 scene dependencies", "level": "info", "timestamp": "2025-07-31T06:47:39.475539Z"}
[32mPASSED[0m{"event": "Shutting down ScriptRAG API", "level": "info", "timestamp": "2025-07-31T06:47:39.487280Z"}

tests/test_api_scene_ordering.py::TestSceneOrderingEndpoints::test_get_scene_dependencies_invalid_direction {"event": "Migration sequence is valid", "level": "info", "timestamp": "2025-07-31T06:47:39.828261Z"}
{"event": "Applying 5 pending migrations", "level": "info", "timestamp": "2025-07-31T06:47:39.829245Z"}
{"event": "Applying Migration 1: Create initial database schema", "level": "info", "timestamp": "2025-07-31T06:47:39.829403Z"}
{"event": "Applying initial schema migration", "level": "info", "timestamp": "2025-07-31T06:47:39.829779Z"}
{"event": "Initial schema migration completed", "level": "info", "timestamp": "2025-07-31T06:47:39.946453Z"}
{"event": "Successfully applied migration 1", "level": "info", "timestamp": "2025-07-31T06:47:39.948305Z"}
{"event": "Applying Migration 2: Add sqlite-vec vector storage support to embeddings table", "level": "info", "timestamp": "2025-07-31T06:47:39.948598Z"}
{"event": "Vector storage migration applied successfully", "level": "info", "timestamp": "2025-07-31T06:47:39.966033Z"}
{"event": "Successfully applied migration 2", "level": "info", "timestamp": "2025-07-31T06:47:39.968208Z"}
{"event": "Applying Migration 3: Fix FTS table column naming to match base tables", "level": "info", "timestamp": "2025-07-31T06:47:39.968483Z"}
{"event": "Applying FTS column naming fix migration", "level": "info", "timestamp": "2025-07-31T06:47:39.968965Z"}
{"event": "FTS column naming fix migration applied successfully", "level": "info", "timestamp": "2025-07-31T06:47:39.999623Z"}
{"event": "Successfully applied migration 3", "level": "info", "timestamp": "2025-07-31T06:47:40.001382Z"}
{"event": "Applying Migration 4: Add scene dependencies table for logical ordering", "level": "info", "timestamp": "2025-07-31T06:47:40.001647Z"}
{"event": "Applying scene dependencies migration", "level": "info", "timestamp": "2025-07-31T06:47:40.002110Z"}
{"event": "Scene dependencies migration applied successfully", "level": "info", "timestamp": "2025-07-31T06:47:40.012511Z"}
{"event": "Successfully applied migration 4", "level": "info", "timestamp": "2025-07-31T06:47:40.014694Z"}
{"event": "Applying Migration 0: ", "level": "info", "timestamp": "2025-07-31T06:47:40.014948Z"}
{"event": "Applying Script Bible migration", "level": "info", "timestamp": "2025-07-31T06:47:40.015452Z"}
{"event": "Script Bible migration applied successfully", "level": "info", "timestamp": "2025-07-31T06:47:40.114004Z"}
{"event": "Successfully applied migration 5", "level": "info", "timestamp": "2025-07-31T06:47:40.117657Z"}
{"event": "Database migration completed successfully", "level": "info", "timestamp": "2025-07-31T06:47:40.117854Z"}
{"event": "Starting ScriptRAG API", "level": "info", "timestamp": "2025-07-31T06:47:40.237696Z"}
{"event": "DatabaseOperations uses synchronous SQLite operations in async functions. This blocks the event loop and should be fixed for production use.", "level": "warning", "timestamp": "2025-07-31T06:47:40.238432Z"}
{"event": "Migration sequence is valid", "level": "info", "timestamp": "2025-07-31T06:47:40.238954Z"}
{"event": "Database is already at latest version", "level": "info", "timestamp": "2025-07-31T06:47:40.242509Z"}
{"db_url": "sqlite+aiosqlite:////tmp/tmpar4t0aeb.db", "event": "Database operations initialized", "level": "info", "timestamp": "2025-07-31T06:47:40.247689Z"}
{"event": "Created script graph node 1591da01-039c-4a37-bff2-afafdb8cbd86 for 'Test Script'", "level": "info", "timestamp": "2025-07-31T06:47:40.259855Z"}
{"script_id": "d7ffa121-286f-4ee1-9f57-55108cb679c5", "title": "Test Script", "event": "Stored script", "level": "info", "timestamp": "2025-07-31T06:47:40.279687Z"}
[32mPASSED[0m{"event": "Shutting down ScriptRAG API", "level": "info", "timestamp": "2025-07-31T06:47:40.295484Z"}

tests/test_api_scene_ordering.py::TestSceneOrderingEndpoints::test_calculate_logical_order {"event": "Migration sequence is valid", "level": "info", "timestamp": "2025-07-31T06:47:40.657625Z"}
{"event": "Applying 5 pending migrations", "level": "info", "timestamp": "2025-07-31T06:47:40.658490Z"}
{"event": "Applying Migration 1: Create initial database schema", "level": "info", "timestamp": "2025-07-31T06:47:40.658629Z"}
{"event": "Applying initial schema migration", "level": "info", "timestamp": "2025-07-31T06:47:40.658957Z"}
{"event": "Initial schema migration completed", "level": "info", "timestamp": "2025-07-31T06:47:40.755611Z"}
{"event": "Successfully applied migration 1", "level": "info", "timestamp": "2025-07-31T06:47:40.756981Z"}
{"event": "Applying Migration 2: Add sqlite-vec vector storage support to embeddings table", "level": "info", "timestamp": "2025-07-31T06:47:40.757222Z"}
{"event": "Vector storage migration applied successfully", "level": "info", "timestamp": "2025-07-31T06:47:40.770682Z"}
{"event": "Successfully applied migration 2", "level": "info", "timestamp": "2025-07-31T06:47:40.772378Z"}
{"event": "Applying Migration 3: Fix FTS table column naming to match base tables", "level": "info", "timestamp": "2025-07-31T06:47:40.772568Z"}
{"event": "Applying FTS column naming fix migration", "level": "info", "timestamp": "2025-07-31T06:47:40.772958Z"}
{"event": "FTS column naming fix migration applied successfully", "level": "info", "timestamp": "2025-07-31T06:47:40.796813Z"}
{"event": "Successfully applied migration 3", "level": "info", "timestamp": "2025-07-31T06:47:40.798371Z"}
{"event": "Applying Migration 4: Add scene dependencies table for logical ordering", "level": "info", "timestamp": "2025-07-31T06:47:40.798555Z"}
{"event": "Applying scene dependencies migration", "level": "info", "timestamp": "2025-07-31T06:47:40.798933Z"}
{"event": "Scene dependencies migration applied successfully", "level": "info", "timestamp": "2025-07-31T06:47:40.807968Z"}
{"event": "Successfully applied migration 4", "level": "info", "timestamp": "2025-07-31T06:47:40.809261Z"}
{"event": "Applying Migration 0: ", "level": "info", "timestamp": "2025-07-31T06:47:40.809443Z"}
{"event": "Applying Script Bible migration", "level": "info", "timestamp": "2025-07-31T06:47:40.809827Z"}
{"event": "Script Bible migration applied successfully", "level": "info", "timestamp": "2025-07-31T06:47:40.908125Z"}
{"event": "Successfully applied migration 5", "level": "info", "timestamp": "2025-07-31T06:47:40.911945Z"}
{"event": "Database migration completed successfully", "level": "info", "timestamp": "2025-07-31T06:47:40.912109Z"}
{"event": "Starting ScriptRAG API", "level": "info", "timestamp": "2025-07-31T06:47:41.031818Z"}
{"event": "DatabaseOperations uses synchronous SQLite operations in async functions. This blocks the event loop and should be fixed for production use.", "level": "warning", "timestamp": "2025-07-31T06:47:41.032198Z"}
{"event": "Migration sequence is valid", "level": "info", "timestamp": "2025-07-31T06:47:41.032485Z"}
{"event": "Database is already at latest version", "level": "info", "timestamp": "2025-07-31T06:47:41.034890Z"}
{"db_url": "sqlite+aiosqlite:////tmp/tmp1iqi_grh.db", "event": "Database operations initialized", "level": "info", "timestamp": "2025-07-31T06:47:41.039221Z"}
{"event": "Created script graph node 527e220e-533d-402c-8540-7033618b0b2a for 'Test Script'", "level": "info", "timestamp": "2025-07-31T06:47:41.050977Z"}
{"script_id": "9179badb-8360-447e-a7c8-4965d23d502c", "title": "Test Script", "event": "Stored script", "level": "info", "timestamp": "2025-07-31T06:47:41.068838Z"}
{"event": "Analyzed and created 1 scene dependencies", "level": "info", "timestamp": "2025-07-31T06:47:41.077922Z"}
[32mPASSED[0m{"event": "Shutting down ScriptRAG API", "level": "info", "timestamp": "2025-07-31T06:47:41.087931Z"}

tests/test_api_scene_ordering.py::TestSceneOrderingEndpoints::test_validate_ordering {"event": "Migration sequence is valid", "level": "info", "timestamp": "2025-07-31T06:47:41.423180Z"}
{"event": "Applying 5 pending migrations", "level": "info", "timestamp": "2025-07-31T06:47:41.424104Z"}
{"event": "Applying Migration 1: Create initial database schema", "level": "info", "timestamp": "2025-07-31T06:47:41.424250Z"}
{"event": "Applying initial schema migration", "level": "info", "timestamp": "2025-07-31T06:47:41.424615Z"}
{"event": "Initial schema migration completed", "level": "info", "timestamp": "2025-07-31T06:47:41.535989Z"}
{"event": "Successfully applied migration 1", "level": "info", "timestamp": "2025-07-31T06:47:41.537586Z"}
{"event": "Applying Migration 2: Add sqlite-vec vector storage support to embeddings table", "level": "info", "timestamp": "2025-07-31T06:47:41.537883Z"}
{"event": "Vector storage migration applied successfully", "level": "info", "timestamp": "2025-07-31T06:47:41.555789Z"}
{"event": "Successfully applied migration 2", "level": "info", "timestamp": "2025-07-31T06:47:41.557579Z"}
{"event": "Applying Migration 3: Fix FTS table column naming to match base tables", "level": "info", "timestamp": "2025-07-31T06:47:41.557803Z"}
{"event": "Applying FTS column naming fix migration", "level": "info", "timestamp": "2025-07-31T06:47:41.558209Z"}
{"event": "FTS column naming fix migration applied successfully", "level": "info", "timestamp": "2025-07-31T06:47:41.587114Z"}
{"event": "Successfully applied migration 3", "level": "info", "timestamp": "2025-07-31T06:47:41.588664Z"}
{"event": "Applying Migration 4: Add scene dependencies table for logical ordering", "level": "info", "timestamp": "2025-07-31T06:47:41.588875Z"}
{"event": "Applying scene dependencies migration", "level": "info", "timestamp": "2025-07-31T06:47:41.589320Z"}
{"event": "Scene dependencies migration applied successfully", "level": "info", "timestamp": "2025-07-31T06:47:41.599872Z"}
{"event": "Successfully applied migration 4", "level": "info", "timestamp": "2025-07-31T06:47:41.601426Z"}
{"event": "Applying Migration 0: ", "level": "info", "timestamp": "2025-07-31T06:47:41.601614Z"}
{"event": "Applying Script Bible migration", "level": "info", "timestamp": "2025-07-31T06:47:41.602043Z"}
{"event": "Script Bible migration applied successfully", "level": "info", "timestamp": "2025-07-31T06:47:41.700294Z"}
{"event": "Successfully applied migration 5", "level": "info", "timestamp": "2025-07-31T06:47:41.703890Z"}
{"event": "Database migration completed successfully", "level": "info", "timestamp": "2025-07-31T06:47:41.704039Z"}
{"event": "Starting ScriptRAG API", "level": "info", "timestamp": "2025-07-31T06:47:41.809277Z"}
{"event": "DatabaseOperations uses synchronous SQLite operations in async functions. This blocks the event loop and should be fixed for production use.", "level": "warning", "timestamp": "2025-07-31T06:47:41.809859Z"}
{"event": "Migration sequence is valid", "level": "info", "timestamp": "2025-07-31T06:47:41.810166Z"}
{"event": "Database is already at latest version", "level": "info", "timestamp": "2025-07-31T06:47:41.812526Z"}
{"db_url": "sqlite+aiosqlite:////tmp/tmpt22rdmus.db", "event": "Database operations initialized", "level": "info", "timestamp": "2025-07-31T06:47:41.817009Z"}
{"event": "Created script graph node 0dabd4fe-2943-450e-a75c-339da8a0f0bd for 'Test Script'", "level": "info", "timestamp": "2025-07-31T06:47:41.827540Z"}
{"script_id": "02f4ca3d-83e0-4fc2-bb16-419e19752f4e", "title": "Test Script", "event": "Stored script", "level": "info", "timestamp": "2025-07-31T06:47:41.842293Z"}
[32mPASSED[0m{"event": "Shutting down ScriptRAG API", "level": "info", "timestamp": "2025-07-31T06:47:41.855627Z"}

tests/test_api_scene_ordering.py::TestSceneOrderingEndpoints::test_ordering_nonexistent_script {"event": "Migration sequence is valid", "level": "info", "timestamp": "2025-07-31T06:47:42.187861Z"}
{"event": "Applying 5 pending migrations", "level": "info", "timestamp": "2025-07-31T06:47:42.188723Z"}
{"event": "Applying Migration 1: Create initial database schema", "level": "info", "timestamp": "2025-07-31T06:47:42.188902Z"}
{"event": "Applying initial schema migration", "level": "info", "timestamp": "2025-07-31T06:47:42.189333Z"}
{"event": "Initial schema migration completed", "level": "info", "timestamp": "2025-07-31T06:47:42.293444Z"}
{"event": "Successfully applied migration 1", "level": "info", "timestamp": "2025-07-31T06:47:42.295059Z"}
{"event": "Applying Migration 2: Add sqlite-vec vector storage support to embeddings table", "level": "info", "timestamp": "2025-07-31T06:47:42.295249Z"}
{"event": "Vector storage migration applied successfully", "level": "info", "timestamp": "2025-07-31T06:47:42.309353Z"}
{"event": "Successfully applied migration 2", "level": "info", "timestamp": "2025-07-31T06:47:42.311057Z"}
{"event": "Applying Migration 3: Fix FTS table column naming to match base tables", "level": "info", "timestamp": "2025-07-31T06:47:42.311243Z"}
{"event": "Applying FTS column naming fix migration", "level": "info", "timestamp": "2025-07-31T06:47:42.311652Z"}
{"event": "FTS column naming fix migration applied successfully", "level": "info", "timestamp": "2025-07-31T06:47:42.341271Z"}
{"event": "Successfully applied migration 3", "level": "info", "timestamp": "2025-07-31T06:47:42.343064Z"}
{"event": "Applying Migration 4: Add scene dependencies table for logical ordering", "level": "info", "timestamp": "2025-07-31T06:47:42.343249Z"}
{"event": "Applying scene dependencies migration", "level": "info", "timestamp": "2025-07-31T06:47:42.343649Z"}
{"event": "Scene dependencies migration applied successfully", "level": "info", "timestamp": "2025-07-31T06:47:42.354932Z"}
{"event": "Successfully applied migration 4", "level": "info", "timestamp": "2025-07-31T06:47:42.356551Z"}
{"event": "Applying Migration 0: ", "level": "info", "timestamp": "2025-07-31T06:47:42.356721Z"}
{"event": "Applying Script Bible migration", "level": "info", "timestamp": "2025-07-31T06:47:42.357130Z"}
{"event": "Script Bible migration applied successfully", "level": "info", "timestamp": "2025-07-31T06:47:42.461594Z"}
{"event": "Successfully applied migration 5", "level": "info", "timestamp": "2025-07-31T06:47:42.465245Z"}
{"event": "Database migration completed successfully", "level": "info", "timestamp": "2025-07-31T06:47:42.465406Z"}
{"event": "Starting ScriptRAG API", "level": "info", "timestamp": "2025-07-31T06:47:42.575046Z"}
{"event": "DatabaseOperations uses synchronous SQLite operations in async functions. This blocks the event loop and should be fixed for production use.", "level": "warning", "timestamp": "2025-07-31T06:47:42.575378Z"}
{"event": "Migration sequence is valid", "level": "info", "timestamp": "2025-07-31T06:47:42.575587Z"}
{"event": "Database is already at latest version", "level": "info", "timestamp": "2025-07-31T06:47:42.577939Z"}
{"db_url": "sqlite+aiosqlite:////tmp/tmpmdhpsdym.db", "event": "Database operations initialized", "level": "info", "timestamp": "2025-07-31T06:47:42.582307Z"}
[32mPASSED[0m{"event": "Shutting down ScriptRAG API", "level": "info", "timestamp": "2025-07-31T06:47:42.603291Z"}

tests/test_api_scene_ordering.py::TestSceneOrderingEndpoints::test_ordering_invalid_order_type {"event": "Migration sequence is valid", "level": "info", "timestamp": "2025-07-31T06:47:42.938716Z"}
{"event": "Applying 5 pending migrations", "level": "info", "timestamp": "2025-07-31T06:47:42.939561Z"}
{"event": "Applying Migration 1: Create initial database schema", "level": "info", "timestamp": "2025-07-31T06:47:42.939715Z"}
{"event": "Applying initial schema migration", "level": "info", "timestamp": "2025-07-31T06:47:42.940040Z"}
{"event": "Initial schema migration completed", "level": "info", "timestamp": "2025-07-31T06:47:43.049877Z"}
{"event": "Successfully applied migration 1", "level": "info", "timestamp": "2025-07-31T06:47:43.051644Z"}
{"event": "Applying Migration 2: Add sqlite-vec vector storage support to embeddings table", "level": "info", "timestamp": "2025-07-31T06:47:43.051869Z"}
{"event": "Vector storage migration applied successfully", "level": "info", "timestamp": "2025-07-31T06:47:43.066805Z"}
{"event": "Successfully applied migration 2", "level": "info", "timestamp": "2025-07-31T06:47:43.068702Z"}
{"event": "Applying Migration 3: Fix FTS table column naming to match base tables", "level": "info", "timestamp": "2025-07-31T06:47:43.068937Z"}
{"event": "Applying FTS column naming fix migration", "level": "info", "timestamp": "2025-07-31T06:47:43.069424Z"}
{"event": "FTS column naming fix migration applied successfully", "level": "info", "timestamp": "2025-07-31T06:47:43.093136Z"}
{"event": "Successfully applied migration 3", "level": "info", "timestamp": "2025-07-31T06:47:43.094693Z"}
{"event": "Applying Migration 4: Add scene dependencies table for logical ordering", "level": "info", "timestamp": "2025-07-31T06:47:43.094965Z"}
{"event": "Applying scene dependencies migration", "level": "info", "timestamp": "2025-07-31T06:47:43.095393Z"}
{"event": "Scene dependencies migration applied successfully", "level": "info", "timestamp": "2025-07-31T06:47:43.105250Z"}
{"event": "Successfully applied migration 4", "level": "info", "timestamp": "2025-07-31T06:47:43.106793Z"}
{"event": "Applying Migration 0: ", "level": "info", "timestamp": "2025-07-31T06:47:43.106967Z"}
{"event": "Applying Script Bible migration", "level": "info", "timestamp": "2025-07-31T06:47:43.107340Z"}
{"event": "Script Bible migration applied successfully", "level": "info", "timestamp": "2025-07-31T06:47:43.196097Z"}
{"event": "Successfully applied migration 5", "level": "info", "timestamp": "2025-07-31T06:47:43.197705Z"}
{"event": "Database migration completed successfully", "level": "info", "timestamp": "2025-07-31T06:47:43.197893Z"}
{"event": "Starting ScriptRAG API", "level": "info", "timestamp": "2025-07-31T06:47:43.310785Z"}
{"event": "DatabaseOperations uses synchronous SQLite operations in async functions. This blocks the event loop and should be fixed for production use.", "level": "warning", "timestamp": "2025-07-31T06:47:43.311335Z"}
{"event": "Migration sequence is valid", "level": "info", "timestamp": "2025-07-31T06:47:43.311684Z"}
{"event": "Database is already at latest version", "level": "info", "timestamp": "2025-07-31T06:47:43.314521Z"}
{"db_url": "sqlite+aiosqlite:////tmp/tmpyys3vki6.db", "event": "Database operations initialized", "level": "info", "timestamp": "2025-07-31T06:47:43.320485Z"}
{"event": "Created script graph node d0c74a3e-f965-4301-ab17-edfe52567489 for 'Test Script'", "level": "info", "timestamp": "2025-07-31T06:47:43.332187Z"}
{"script_id": "ec627ffd-aaaf-4bc9-a605-bb55d944cfd1", "title": "Test Script", "event": "Stored script", "level": "info", "timestamp": "2025-07-31T06:47:43.347496Z"}
{"event": "Invalid order type: invalid_type", "level": "error", "timestamp": "2025-07-31T06:47:43.354293Z"}
[32mPASSED[0m{"event": "Shutting down ScriptRAG API", "level": "info", "timestamp": "2025-07-31T06:47:43.357409Z"}

tests/test_api_scenes.py::TestSceneEndpoints::test_get_scene_success [32mPASSED[0m
tests/test_api_scenes.py::TestSceneEndpoints::test_get_scene_not_found [32mPASSED[0m
tests/test_api_scenes.py::TestSceneEndpoints::test_get_scene_database_error {"scene_id": "8323e03b-aa20-43c7-9d6c-6b30fe8022be", "error": "Database connection failed", "event": "Failed to get scene", "level": "error", "timestamp": "2025-07-31T06:47:44.023132Z"}
[32mPASSED[0m
tests/test_api_scenes.py::TestSceneEndpoints::test_create_scene_success [32mPASSED[0m
tests/test_api_scenes.py::TestSceneEndpoints::test_create_scene_script_not_found [32mPASSED[0m
tests/test_api_scenes.py::TestSceneEndpoints::test_create_scene_database_error {"error": "Database write failed", "event": "Failed to create scene", "level": "error", "timestamp": "2025-07-31T06:47:44.331377Z"}
[32mPASSED[0m
tests/test_api_scenes.py::TestSceneEndpoints::test_update_scene_success [32mPASSED[0m
tests/test_api_scenes.py::TestSceneEndpoints::test_update_scene_not_found [32mPASSED[0m
tests/test_api_scenes.py::TestSceneEndpoints::test_delete_scene_success [32mPASSED[0m
tests/test_api_scenes.py::TestSceneEndpoints::test_delete_scene_not_found [32mPASSED[0m
tests/test_api_scenes.py::TestSceneEndpoints::test_inject_scene_after_success [32mPASSED[0m
tests/test_api_scenes.py::TestSceneEndpoints::test_inject_scene_after_ref_not_found [32mPASSED[0m
tests/test_api_scenes.py::TestSceneEndpoints::test_inject_scene_after_database_error {"scene_id": "bb549710-3411-4ff4-86c0-687fac5f5ca4", "error": "'heading'", "event": "Failed to inject scene after", "level": "error", "timestamp": "2025-07-31T06:47:45.109973Z"}
[32mPASSED[0m
tests/test_api_scenes.py::TestSceneEndpointValidation::test_create_scene_invalid_data [32mPASSED[0m
tests/test_api_scenes.py::TestSceneEndpointValidation::test_update_scene_partial_data [32mPASSED[0m
tests/test_api_validation.py::TestScriptUploadValidation::test_upload_empty_title {"event": "Migration sequence is valid", "level": "info", "timestamp": "2025-07-31T06:47:45.407886Z"}
{"event": "Applying 5 pending migrations", "level": "info", "timestamp": "2025-07-31T06:47:45.409089Z"}
{"event": "Applying Migration 1: Create initial database schema", "level": "info", "timestamp": "2025-07-31T06:47:45.409379Z"}
{"event": "Applying initial schema migration", "level": "info", "timestamp": "2025-07-31T06:47:45.410874Z"}
{"event": "Initial schema migration completed", "level": "info", "timestamp": "2025-07-31T06:47:45.763316Z"}
{"event": "Successfully applied migration 1", "level": "info", "timestamp": "2025-07-31T06:47:45.765152Z"}
{"event": "Applying Migration 2: Add sqlite-vec vector storage support to embeddings table", "level": "info", "timestamp": "2025-07-31T06:47:45.765490Z"}
{"event": "Vector storage migration applied successfully", "level": "info", "timestamp": "2025-07-31T06:47:45.784247Z"}
{"event": "Successfully applied migration 2", "level": "info", "timestamp": "2025-07-31T06:47:45.786391Z"}
{"event": "Applying Migration 3: Fix FTS table column naming to match base tables", "level": "info", "timestamp": "2025-07-31T06:47:45.786663Z"}
{"event": "Applying FTS column naming fix migration", "level": "info", "timestamp": "2025-07-31T06:47:45.787194Z"}
{"event": "FTS column naming fix migration applied successfully", "level": "info", "timestamp": "2025-07-31T06:47:45.819588Z"}
{"event": "Successfully applied migration 3", "level": "info", "timestamp": "2025-07-31T06:47:45.821636Z"}
{"event": "Applying Migration 4: Add scene dependencies table for logical ordering", "level": "info", "timestamp": "2025-07-31T06:47:45.821925Z"}
{"event": "Applying scene dependencies migration", "level": "info", "timestamp": "2025-07-31T06:47:45.822452Z"}
{"event": "Scene dependencies migration applied successfully", "level": "info", "timestamp": "2025-07-31T06:47:45.834541Z"}
{"event": "Successfully applied migration 4", "level": "info", "timestamp": "2025-07-31T06:47:45.836584Z"}
{"event": "Applying Migration 0: ", "level": "info", "timestamp": "2025-07-31T06:47:45.836921Z"}
{"event": "Applying Script Bible migration", "level": "info", "timestamp": "2025-07-31T06:47:45.837542Z"}
{"event": "Script Bible migration applied successfully", "level": "info", "timestamp": "2025-07-31T06:47:45.958999Z"}
{"event": "Successfully applied migration 5", "level": "info", "timestamp": "2025-07-31T06:47:45.960844Z"}
{"event": "Database migration completed successfully", "level": "info", "timestamp": "2025-07-31T06:47:45.961110Z"}
{"event": "Starting ScriptRAG API", "level": "info", "timestamp": "2025-07-31T06:47:46.070905Z"}
{"event": "DatabaseOperations uses synchronous SQLite operations in async functions. This blocks the event loop and should be fixed for production use.", "level": "warning", "timestamp": "2025-07-31T06:47:46.071221Z"}
{"event": "Migration sequence is valid", "level": "info", "timestamp": "2025-07-31T06:47:46.071442Z"}
{"event": "Database is already at latest version", "level": "info", "timestamp": "2025-07-31T06:47:46.074892Z"}
{"db_url": "sqlite+aiosqlite:////tmp/tmpt3aapb5u.db", "event": "Database operations initialized", "level": "info", "timestamp": "2025-07-31T06:47:46.082674Z"}
[32mPASSED[0m{"event": "Shutting down ScriptRAG API", "level": "info", "timestamp": "2025-07-31T06:47:46.091955Z"}

tests/test_api_validation.py::TestScriptUploadValidation::test_upload_whitespace_title {"event": "Migration sequence is valid", "level": "info", "timestamp": "2025-07-31T06:47:46.533992Z"}
{"event": "Applying 5 pending migrations", "level": "info", "timestamp": "2025-07-31T06:47:46.534949Z"}
{"event": "Applying Migration 1: Create initial database schema", "level": "info", "timestamp": "2025-07-31T06:47:46.535089Z"}
{"event": "Applying initial schema migration", "level": "info", "timestamp": "2025-07-31T06:47:46.535450Z"}
{"event": "Initial schema migration completed", "level": "info", "timestamp": "2025-07-31T06:47:46.648369Z"}
{"event": "Successfully applied migration 1", "level": "info", "timestamp": "2025-07-31T06:47:46.650114Z"}
{"event": "Applying Migration 2: Add sqlite-vec vector storage support to embeddings table", "level": "info", "timestamp": "2025-07-31T06:47:46.650296Z"}
{"event": "Vector storage migration applied successfully", "level": "info", "timestamp": "2025-07-31T06:47:46.665252Z"}
{"event": "Successfully applied migration 2", "level": "info", "timestamp": "2025-07-31T06:47:46.666906Z"}
{"event": "Applying Migration 3: Fix FTS table column naming to match base tables", "level": "info", "timestamp": "2025-07-31T06:47:46.667086Z"}
{"event": "Applying FTS column naming fix migration", "level": "info", "timestamp": "2025-07-31T06:47:46.667454Z"}
{"event": "FTS column naming fix migration applied successfully", "level": "info", "timestamp": "2025-07-31T06:47:46.694329Z"}
{"event": "Successfully applied migration 3", "level": "info", "timestamp": "2025-07-31T06:47:46.695821Z"}
{"event": "Applying Migration 4: Add scene dependencies table for logical ordering", "level": "info", "timestamp": "2025-07-31T06:47:46.695994Z"}
{"event": "Applying scene dependencies migration", "level": "info", "timestamp": "2025-07-31T06:47:46.696357Z"}
{"event": "Scene dependencies migration applied successfully", "level": "info", "timestamp": "2025-07-31T06:47:46.706210Z"}
{"event": "Successfully applied migration 4", "level": "info", "timestamp": "2025-07-31T06:47:46.707943Z"}
{"event": "Applying Migration 0: ", "level": "info", "timestamp": "2025-07-31T06:47:46.708198Z"}
{"event": "Applying Script Bible migration", "level": "info", "timestamp": "2025-07-31T06:47:46.708692Z"}
{"event": "Script Bible migration applied successfully", "level": "info", "timestamp": "2025-07-31T06:47:46.838701Z"}
{"event": "Successfully applied migration 5", "level": "info", "timestamp": "2025-07-31T06:47:46.840524Z"}
{"event": "Database migration completed successfully", "level": "info", "timestamp": "2025-07-31T06:47:46.840668Z"}
{"event": "Starting ScriptRAG API", "level": "info", "timestamp": "2025-07-31T06:47:46.954682Z"}
{"event": "DatabaseOperations uses synchronous SQLite operations in async functions. This blocks the event loop and should be fixed for production use.", "level": "warning", "timestamp": "2025-07-31T06:47:46.955250Z"}
{"event": "Migration sequence is valid", "level": "info", "timestamp": "2025-07-31T06:47:46.955609Z"}
{"event": "Database is already at latest version", "level": "info", "timestamp": "2025-07-31T06:47:46.958096Z"}
{"db_url": "sqlite+aiosqlite:////tmp/tmp3ktzlmjo.db", "event": "Database operations initialized", "level": "info", "timestamp": "2025-07-31T06:47:46.962777Z"}
[32mPASSED[0m{"event": "Shutting down ScriptRAG API", "level": "info", "timestamp": "2025-07-31T06:47:46.971346Z"}

tests/test_api_validation.py::TestScriptUploadValidation::test_upload_title_too_long {"event": "Migration sequence is valid", "level": "info", "timestamp": "2025-07-31T06:47:47.330369Z"}
{"event": "Applying 5 pending migrations", "level": "info", "timestamp": "2025-07-31T06:47:47.331294Z"}
{"event": "Applying Migration 1: Create initial database schema", "level": "info", "timestamp": "2025-07-31T06:47:47.331446Z"}
{"event": "Applying initial schema migration", "level": "info", "timestamp": "2025-07-31T06:47:47.331800Z"}
{"event": "Initial schema migration completed", "level": "info", "timestamp": "2025-07-31T06:47:47.444098Z"}
{"event": "Successfully applied migration 1", "level": "info", "timestamp": "2025-07-31T06:47:47.445813Z"}
{"event": "Applying Migration 2: Add sqlite-vec vector storage support to embeddings table", "level": "info", "timestamp": "2025-07-31T06:47:47.446005Z"}
{"event": "Vector storage migration applied successfully", "level": "info", "timestamp": "2025-07-31T06:47:47.462657Z"}
{"event": "Successfully applied migration 2", "level": "info", "timestamp": "2025-07-31T06:47:47.464294Z"}
{"event": "Applying Migration 3: Fix FTS table column naming to match base tables", "level": "info", "timestamp": "2025-07-31T06:47:47.464512Z"}
{"event": "Applying FTS column naming fix migration", "level": "info", "timestamp": "2025-07-31T06:47:47.465045Z"}
{"event": "FTS column naming fix migration applied successfully", "level": "info", "timestamp": "2025-07-31T06:47:47.492829Z"}
{"event": "Successfully applied migration 3", "level": "info", "timestamp": "2025-07-31T06:47:47.494730Z"}
{"event": "Applying Migration 4: Add scene dependencies table for logical ordering", "level": "info", "timestamp": "2025-07-31T06:47:47.494956Z"}
{"event": "Applying scene dependencies migration", "level": "info", "timestamp": "2025-07-31T06:47:47.495502Z"}
{"event": "Scene dependencies migration applied successfully", "level": "info", "timestamp": "2025-07-31T06:47:47.507056Z"}
{"event": "Successfully applied migration 4", "level": "info", "timestamp": "2025-07-31T06:47:47.508791Z"}
{"event": "Applying Migration 0: ", "level": "info", "timestamp": "2025-07-31T06:47:47.508980Z"}
{"event": "Applying Script Bible migration", "level": "info", "timestamp": "2025-07-31T06:47:47.509439Z"}
{"event": "Script Bible migration applied successfully", "level": "info", "timestamp": "2025-07-31T06:47:47.614069Z"}
{"event": "Successfully applied migration 5", "level": "info", "timestamp": "2025-07-31T06:47:47.615888Z"}
{"event": "Database migration completed successfully", "level": "info", "timestamp": "2025-07-31T06:47:47.616091Z"}
{"event": "Starting ScriptRAG API", "level": "info", "timestamp": "2025-07-31T06:47:47.728150Z"}
{"event": "DatabaseOperations uses synchronous SQLite operations in async functions. This blocks the event loop and should be fixed for production use.", "level": "warning", "timestamp": "2025-07-31T06:47:47.728653Z"}
{"event": "Migration sequence is valid", "level": "info", "timestamp": "2025-07-31T06:47:47.728985Z"}
{"event": "Database is already at latest version", "level": "info", "timestamp": "2025-07-31T06:47:47.731414Z"}
{"db_url": "sqlite+aiosqlite:////tmp/tmppxtjytdv.db", "event": "Database operations initialized", "level": "info", "timestamp": "2025-07-31T06:47:47.735884Z"}
[32mPASSED[0m{"event": "Shutting down ScriptRAG API", "level": "info", "timestamp": "2025-07-31T06:47:47.743553Z"}

tests/test_api_validation.py::TestScriptUploadValidation::test_upload_title_special_chars_only {"event": "Migration sequence is valid", "level": "info", "timestamp": "2025-07-31T06:47:48.106332Z"}
{"event": "Applying 5 pending migrations", "level": "info", "timestamp": "2025-07-31T06:47:48.107576Z"}
{"event": "Applying Migration 1: Create initial database schema", "level": "info", "timestamp": "2025-07-31T06:47:48.107786Z"}
{"event": "Applying initial schema migration", "level": "info", "timestamp": "2025-07-31T06:47:48.108193Z"}
{"event": "Initial schema migration completed", "level": "info", "timestamp": "2025-07-31T06:47:48.236619Z"}
{"event": "Successfully applied migration 1", "level": "info", "timestamp": "2025-07-31T06:47:48.238764Z"}
{"event": "Applying Migration 2: Add sqlite-vec vector storage support to embeddings table", "level": "info", "timestamp": "2025-07-31T06:47:48.238974Z"}
{"event": "Vector storage migration applied successfully", "level": "info", "timestamp": "2025-07-31T06:47:48.253412Z"}
{"event": "Successfully applied migration 2", "level": "info", "timestamp": "2025-07-31T06:47:48.255016Z"}
{"event": "Applying Migration 3: Fix FTS table column naming to match base tables", "level": "info", "timestamp": "2025-07-31T06:47:48.255209Z"}
{"event": "Applying FTS column naming fix migration", "level": "info", "timestamp": "2025-07-31T06:47:48.255656Z"}
{"event": "FTS column naming fix migration applied successfully", "level": "info", "timestamp": "2025-07-31T06:47:48.279834Z"}
{"event": "Successfully applied migration 3", "level": "info", "timestamp": "2025-07-31T06:47:48.281366Z"}
{"event": "Applying Migration 4: Add scene dependencies table for logical ordering", "level": "info", "timestamp": "2025-07-31T06:47:48.281566Z"}
{"event": "Applying scene dependencies migration", "level": "info", "timestamp": "2025-07-31T06:47:48.282004Z"}
{"event": "Scene dependencies migration applied successfully", "level": "info", "timestamp": "2025-07-31T06:47:48.291385Z"}
{"event": "Successfully applied migration 4", "level": "info", "timestamp": "2025-07-31T06:47:48.292864Z"}
{"event": "Applying Migration 0: ", "level": "info", "timestamp": "2025-07-31T06:47:48.293047Z"}
{"event": "Applying Script Bible migration", "level": "info", "timestamp": "2025-07-31T06:47:48.293504Z"}
{"event": "Script Bible migration applied successfully", "level": "info", "timestamp": "2025-07-31T06:47:48.387804Z"}
{"event": "Successfully applied migration 5", "level": "info", "timestamp": "2025-07-31T06:47:48.390182Z"}
{"event": "Database migration completed successfully", "level": "info", "timestamp": "2025-07-31T06:47:48.390350Z"}
{"event": "Starting ScriptRAG API", "level": "info", "timestamp": "2025-07-31T06:47:48.532817Z"}
{"event": "DatabaseOperations uses synchronous SQLite operations in async functions. This blocks the event loop and should be fixed for production use.", "level": "warning", "timestamp": "2025-07-31T06:47:48.533386Z"}
{"event": "Migration sequence is valid", "level": "info", "timestamp": "2025-07-31T06:47:48.533580Z"}
{"event": "Database is already at latest version", "level": "info", "timestamp": "2025-07-31T06:47:48.536322Z"}
{"db_url": "sqlite+aiosqlite:////tmp/tmp5tiwygeq.db", "event": "Database operations initialized", "level": "info", "timestamp": "2025-07-31T06:47:48.540888Z"}
[32mPASSED[0m{"event": "Shutting down ScriptRAG API", "level": "info", "timestamp": "2025-07-31T06:47:48.550881Z"}

tests/test_api_validation.py::TestScriptUploadValidation::test_upload_empty_content {"event": "Migration sequence is valid", "level": "info", "timestamp": "2025-07-31T06:47:48.896466Z"}
{"event": "Applying 5 pending migrations", "level": "info", "timestamp": "2025-07-31T06:47:48.897473Z"}
{"event": "Applying Migration 1: Create initial database schema", "level": "info", "timestamp": "2025-07-31T06:47:48.897631Z"}
{"event": "Applying initial schema migration", "level": "info", "timestamp": "2025-07-31T06:47:48.897951Z"}
{"event": "Initial schema migration completed", "level": "info", "timestamp": "2025-07-31T06:47:48.995859Z"}
{"event": "Successfully applied migration 1", "level": "info", "timestamp": "2025-07-31T06:47:48.997377Z"}
{"event": "Applying Migration 2: Add sqlite-vec vector storage support to embeddings table", "level": "info", "timestamp": "2025-07-31T06:47:48.997574Z"}
{"event": "Vector storage migration applied successfully", "level": "info", "timestamp": "2025-07-31T06:47:49.011808Z"}
{"event": "Successfully applied migration 2", "level": "info", "timestamp": "2025-07-31T06:47:49.013330Z"}
{"event": "Applying Migration 3: Fix FTS table column naming to match base tables", "level": "info", "timestamp": "2025-07-31T06:47:49.013528Z"}
{"event": "Applying FTS column naming fix migration", "level": "info", "timestamp": "2025-07-31T06:47:49.014002Z"}
{"event": "FTS column naming fix migration applied successfully", "level": "info", "timestamp": "2025-07-31T06:47:49.039567Z"}
{"event": "Successfully applied migration 3", "level": "info", "timestamp": "2025-07-31T06:47:49.041033Z"}
{"event": "Applying Migration 4: Add scene dependencies table for logical ordering", "level": "info", "timestamp": "2025-07-31T06:47:49.041282Z"}
{"event": "Applying scene dependencies migration", "level": "info", "timestamp": "2025-07-31T06:47:49.041686Z"}
{"event": "Scene dependencies migration applied successfully", "level": "info", "timestamp": "2025-07-31T06:47:49.051881Z"}
{"event": "Successfully applied migration 4", "level": "info", "timestamp": "2025-07-31T06:47:49.053384Z"}
{"event": "Applying Migration 0: ", "level": "info", "timestamp": "2025-07-31T06:47:49.053580Z"}
{"event": "Applying Script Bible migration", "level": "info", "timestamp": "2025-07-31T06:47:49.054005Z"}
{"event": "Script Bible migration applied successfully", "level": "info", "timestamp": "2025-07-31T06:47:49.153994Z"}
{"event": "Successfully applied migration 5", "level": "info", "timestamp": "2025-07-31T06:47:49.155796Z"}
{"event": "Database migration completed successfully", "level": "info", "timestamp": "2025-07-31T06:47:49.155942Z"}
{"event": "Starting ScriptRAG API", "level": "info", "timestamp": "2025-07-31T06:47:49.264471Z"}
{"event": "DatabaseOperations uses synchronous SQLite operations in async functions. This blocks the event loop and should be fixed for production use.", "level": "warning", "timestamp": "2025-07-31T06:47:49.265001Z"}
{"event": "Migration sequence is valid", "level": "info", "timestamp": "2025-07-31T06:47:49.265388Z"}
{"event": "Database is already at latest version", "level": "info", "timestamp": "2025-07-31T06:47:49.267729Z"}
{"db_url": "sqlite+aiosqlite:////tmp/tmp046_cwyz.db", "event": "Database operations initialized", "level": "info", "timestamp": "2025-07-31T06:47:49.272236Z"}
[32mPASSED[0m{"event": "Shutting down ScriptRAG API", "level": "info", "timestamp": "2025-07-31T06:47:49.279485Z"}

tests/test_api_validation.py::TestScriptUploadValidation::test_upload_whitespace_content {"event": "Migration sequence is valid", "level": "info", "timestamp": "2025-07-31T06:47:49.614471Z"}
{"event": "Applying 5 pending migrations", "level": "info", "timestamp": "2025-07-31T06:47:49.615459Z"}
{"event": "Applying Migration 1: Create initial database schema", "level": "info", "timestamp": "2025-07-31T06:47:49.615607Z"}
{"event": "Applying initial schema migration", "level": "info", "timestamp": "2025-07-31T06:47:49.615940Z"}
{"event": "Initial schema migration completed", "level": "info", "timestamp": "2025-07-31T06:47:49.717814Z"}
{"event": "Successfully applied migration 1", "level": "info", "timestamp": "2025-07-31T06:47:49.719206Z"}
{"event": "Applying Migration 2: Add sqlite-vec vector storage support to embeddings table", "level": "info", "timestamp": "2025-07-31T06:47:49.719399Z"}
{"event": "Vector storage migration applied successfully", "level": "info", "timestamp": "2025-07-31T06:47:49.733670Z"}
{"event": "Successfully applied migration 2", "level": "info", "timestamp": "2025-07-31T06:47:49.735409Z"}
{"event": "Applying Migration 3: Fix FTS table column naming to match base tables", "level": "info", "timestamp": "2025-07-31T06:47:49.735605Z"}
{"event": "Applying FTS column naming fix migration", "level": "info", "timestamp": "2025-07-31T06:47:49.736053Z"}
{"event": "FTS column naming fix migration applied successfully", "level": "info", "timestamp": "2025-07-31T06:47:49.765842Z"}
{"event": "Successfully applied migration 3", "level": "info", "timestamp": "2025-07-31T06:47:49.767326Z"}
{"event": "Applying Migration 4: Add scene dependencies table for logical ordering", "level": "info", "timestamp": "2025-07-31T06:47:49.767519Z"}
{"event": "Applying scene dependencies migration", "level": "info", "timestamp": "2025-07-31T06:47:49.767961Z"}
{"event": "Scene dependencies migration applied successfully", "level": "info", "timestamp": "2025-07-31T06:47:49.778034Z"}
{"event": "Successfully applied migration 4", "level": "info", "timestamp": "2025-07-31T06:47:49.779564Z"}
{"event": "Applying Migration 0: ", "level": "info", "timestamp": "2025-07-31T06:47:49.779771Z"}
{"event": "Applying Script Bible migration", "level": "info", "timestamp": "2025-07-31T06:47:49.780159Z"}
{"event": "Script Bible migration applied successfully", "level": "info", "timestamp": "2025-07-31T06:47:49.866245Z"}
{"event": "Successfully applied migration 5", "level": "info", "timestamp": "2025-07-31T06:47:49.867862Z"}
{"event": "Database migration completed successfully", "level": "info", "timestamp": "2025-07-31T06:47:49.868007Z"}
{"event": "Starting ScriptRAG API", "level": "info", "timestamp": "2025-07-31T06:47:49.986420Z"}
{"event": "DatabaseOperations uses synchronous SQLite operations in async functions. This blocks the event loop and should be fixed for production use.", "level": "warning", "timestamp": "2025-07-31T06:47:49.986723Z"}
{"event": "Migration sequence is valid", "level": "info", "timestamp": "2025-07-31T06:47:49.986937Z"}
{"event": "Database is already at latest version", "level": "info", "timestamp": "2025-07-31T06:47:49.989274Z"}
{"db_url": "sqlite+aiosqlite:////tmp/tmp42dza508.db", "event": "Database operations initialized", "level": "info", "timestamp": "2025-07-31T06:47:49.993721Z"}
[32mPASSED[0m{"event": "Shutting down ScriptRAG API", "level": "info", "timestamp": "2025-07-31T06:47:50.001926Z"}

tests/test_api_validation.py::TestScriptUploadValidation::test_upload_content_too_large {"event": "Migration sequence is valid", "level": "info", "timestamp": "2025-07-31T06:47:50.357104Z"}
{"event": "Applying 5 pending migrations", "level": "info", "timestamp": "2025-07-31T06:47:50.358087Z"}
{"event": "Applying Migration 1: Create initial database schema", "level": "info", "timestamp": "2025-07-31T06:47:50.358223Z"}
{"event": "Applying initial schema migration", "level": "info", "timestamp": "2025-07-31T06:47:50.358580Z"}
{"event": "Initial schema migration completed", "level": "info", "timestamp": "2025-07-31T06:47:50.460423Z"}
{"event": "Successfully applied migration 1", "level": "info", "timestamp": "2025-07-31T06:47:50.462238Z"}
{"event": "Applying Migration 2: Add sqlite-vec vector storage support to embeddings table", "level": "info", "timestamp": "2025-07-31T06:47:50.462447Z"}
{"event": "Vector storage migration applied successfully", "level": "info", "timestamp": "2025-07-31T06:47:50.477227Z"}
{"event": "Successfully applied migration 2", "level": "info", "timestamp": "2025-07-31T06:47:50.478977Z"}
{"event": "Applying Migration 3: Fix FTS table column naming to match base tables", "level": "info", "timestamp": "2025-07-31T06:47:50.479169Z"}
{"event": "Applying FTS column naming fix migration", "level": "info", "timestamp": "2025-07-31T06:47:50.479572Z"}
{"event": "FTS column naming fix migration applied successfully", "level": "info", "timestamp": "2025-07-31T06:47:50.504244Z"}
{"event": "Successfully applied migration 3", "level": "info", "timestamp": "2025-07-31T06:47:50.505727Z"}
{"event": "Applying Migration 4: Add scene dependencies table for logical ordering", "level": "info", "timestamp": "2025-07-31T06:47:50.505987Z"}
{"event": "Applying scene dependencies migration", "level": "info", "timestamp": "2025-07-31T06:47:50.506388Z"}
{"event": "Scene dependencies migration applied successfully", "level": "info", "timestamp": "2025-07-31T06:47:50.515438Z"}
{"event": "Successfully applied migration 4", "level": "info", "timestamp": "2025-07-31T06:47:50.517025Z"}
{"event": "Applying Migration 0: ", "level": "info", "timestamp": "2025-07-31T06:47:50.517329Z"}
{"event": "Applying Script Bible migration", "level": "info", "timestamp": "2025-07-31T06:47:50.517784Z"}
{"event": "Script Bible migration applied successfully", "level": "info", "timestamp": "2025-07-31T06:47:50.614208Z"}
{"event": "Successfully applied migration 5", "level": "info", "timestamp": "2025-07-31T06:47:50.615917Z"}
{"event": "Database migration completed successfully", "level": "info", "timestamp": "2025-07-31T06:47:50.616070Z"}
{"event": "Starting ScriptRAG API", "level": "info", "timestamp": "2025-07-31T06:47:50.731352Z"}
{"event": "DatabaseOperations uses synchronous SQLite operations in async functions. This blocks the event loop and should be fixed for production use.", "level": "warning", "timestamp": "2025-07-31T06:47:50.731928Z"}
{"event": "Migration sequence is valid", "level": "info", "timestamp": "2025-07-31T06:47:50.732255Z"}
{"event": "Database is already at latest version", "level": "info", "timestamp": "2025-07-31T06:47:50.734810Z"}
{"db_url": "sqlite+aiosqlite:////tmp/tmpdui11q41.db", "event": "Database operations initialized", "level": "info", "timestamp": "2025-07-31T06:47:50.739529Z"}
[32mPASSED[0m{"event": "Shutting down ScriptRAG API", "level": "info", "timestamp": "2025-07-31T06:47:51.295321Z"}

tests/test_api_validation.py::TestScriptUploadValidation::test_upload_invalid_fountain_format {"event": "Migration sequence is valid", "level": "info", "timestamp": "2025-07-31T06:47:51.632715Z"}
{"event": "Applying 5 pending migrations", "level": "info", "timestamp": "2025-07-31T06:47:51.633654Z"}
{"event": "Applying Migration 1: Create initial database schema", "level": "info", "timestamp": "2025-07-31T06:47:51.633816Z"}
{"event": "Applying initial schema migration", "level": "info", "timestamp": "2025-07-31T06:47:51.634144Z"}
{"event": "Initial schema migration completed", "level": "info", "timestamp": "2025-07-31T06:47:51.728187Z"}
{"event": "Successfully applied migration 1", "level": "info", "timestamp": "2025-07-31T06:47:51.729694Z"}
{"event": "Applying Migration 2: Add sqlite-vec vector storage support to embeddings table", "level": "info", "timestamp": "2025-07-31T06:47:51.729898Z"}
{"event": "Vector storage migration applied successfully", "level": "info", "timestamp": "2025-07-31T06:47:51.745591Z"}
{"event": "Successfully applied migration 2", "level": "info", "timestamp": "2025-07-31T06:47:51.747407Z"}
{"event": "Applying Migration 3: Fix FTS table column naming to match base tables", "level": "info", "timestamp": "2025-07-31T06:47:51.747594Z"}
{"event": "Applying FTS column naming fix migration", "level": "info", "timestamp": "2025-07-31T06:47:51.748026Z"}
{"event": "FTS column naming fix migration applied successfully", "level": "info", "timestamp": "2025-07-31T06:47:51.774441Z"}
{"event": "Successfully applied migration 3", "level": "info", "timestamp": "2025-07-31T06:47:51.775941Z"}
{"event": "Applying Migration 4: Add scene dependencies table for logical ordering", "level": "info", "timestamp": "2025-07-31T06:47:51.776125Z"}
{"event": "Applying scene dependencies migration", "level": "info", "timestamp": "2025-07-31T06:47:51.776527Z"}
{"event": "Scene dependencies migration applied successfully", "level": "info", "timestamp": "2025-07-31T06:47:51.786583Z"}
{"event": "Successfully applied migration 4", "level": "info", "timestamp": "2025-07-31T06:47:51.788236Z"}
{"event": "Applying Migration 0: ", "level": "info", "timestamp": "2025-07-31T06:47:51.788424Z"}
{"event": "Applying Script Bible migration", "level": "info", "timestamp": "2025-07-31T06:47:51.788918Z"}
{"event": "Script Bible migration applied successfully", "level": "info", "timestamp": "2025-07-31T06:47:51.888275Z"}
{"event": "Successfully applied migration 5", "level": "info", "timestamp": "2025-07-31T06:47:51.890230Z"}
{"event": "Database migration completed successfully", "level": "info", "timestamp": "2025-07-31T06:47:51.890496Z"}
{"event": "Starting ScriptRAG API", "level": "info", "timestamp": "2025-07-31T06:47:52.002358Z"}
{"event": "DatabaseOperations uses synchronous SQLite operations in async functions. This blocks the event loop and should be fixed for production use.", "level": "warning", "timestamp": "2025-07-31T06:47:52.002675Z"}
{"event": "Migration sequence is valid", "level": "info", "timestamp": "2025-07-31T06:47:52.002918Z"}
{"event": "Database is already at latest version", "level": "info", "timestamp": "2025-07-31T06:47:52.005241Z"}
{"db_url": "sqlite+aiosqlite:////tmp/tmp7lj2o0yg.db", "event": "Database operations initialized", "level": "info", "timestamp": "2025-07-31T06:47:52.009762Z"}
[32mPASSED[0m{"event": "Shutting down ScriptRAG API", "level": "info", "timestamp": "2025-07-31T06:47:52.017091Z"}

tests/test_api_validation.py::TestScriptUploadValidation::test_upload_minimal_valid_fountain {"event": "Migration sequence is valid", "level": "info", "timestamp": "2025-07-31T06:47:52.350929Z"}
{"event": "Applying 5 pending migrations", "level": "info", "timestamp": "2025-07-31T06:47:52.351782Z"}
{"event": "Applying Migration 1: Create initial database schema", "level": "info", "timestamp": "2025-07-31T06:47:52.351927Z"}
{"event": "Applying initial schema migration", "level": "info", "timestamp": "2025-07-31T06:47:52.352259Z"}
{"event": "Initial schema migration completed", "level": "info", "timestamp": "2025-07-31T06:47:52.458044Z"}
{"event": "Successfully applied migration 1", "level": "info", "timestamp": "2025-07-31T06:47:52.459444Z"}
{"event": "Applying Migration 2: Add sqlite-vec vector storage support to embeddings table", "level": "info", "timestamp": "2025-07-31T06:47:52.459623Z"}
{"event": "Vector storage migration applied successfully", "level": "info", "timestamp": "2025-07-31T06:47:52.473674Z"}
{"event": "Successfully applied migration 2", "level": "info", "timestamp": "2025-07-31T06:47:52.475360Z"}
{"event": "Applying Migration 3: Fix FTS table column naming to match base tables", "level": "info", "timestamp": "2025-07-31T06:47:52.475616Z"}
{"event": "Applying FTS column naming fix migration", "level": "info", "timestamp": "2025-07-31T06:47:52.476085Z"}
{"event": "FTS column naming fix migration applied successfully", "level": "info", "timestamp": "2025-07-31T06:47:52.499591Z"}
{"event": "Successfully applied migration 3", "level": "info", "timestamp": "2025-07-31T06:47:52.500951Z"}
{"event": "Applying Migration 4: Add scene dependencies table for logical ordering", "level": "info", "timestamp": "2025-07-31T06:47:52.501141Z"}
{"event": "Applying scene dependencies migration", "level": "info", "timestamp": "2025-07-31T06:47:52.501622Z"}
{"event": "Scene dependencies migration applied successfully", "level": "info", "timestamp": "2025-07-31T06:47:52.510422Z"}
{"event": "Successfully applied migration 4", "level": "info", "timestamp": "2025-07-31T06:47:52.511878Z"}
{"event": "Applying Migration 0: ", "level": "info", "timestamp": "2025-07-31T06:47:52.512057Z"}
{"event": "Applying Script Bible migration", "level": "info", "timestamp": "2025-07-31T06:47:52.512442Z"}
{"event": "Script Bible migration applied successfully", "level": "info", "timestamp": "2025-07-31T06:47:52.602953Z"}
{"event": "Successfully applied migration 5", "level": "info", "timestamp": "2025-07-31T06:47:52.604522Z"}
{"event": "Database migration completed successfully", "level": "info", "timestamp": "2025-07-31T06:47:52.604661Z"}
{"event": "Starting ScriptRAG API", "level": "info", "timestamp": "2025-07-31T06:47:52.713488Z"}
{"event": "DatabaseOperations uses synchronous SQLite operations in async functions. This blocks the event loop and should be fixed for production use.", "level": "warning", "timestamp": "2025-07-31T06:47:52.714084Z"}
{"event": "Migration sequence is valid", "level": "info", "timestamp": "2025-07-31T06:47:52.714414Z"}
{"event": "Database is already at latest version", "level": "info", "timestamp": "2025-07-31T06:47:52.716798Z"}
{"db_url": "sqlite+aiosqlite:////tmp/tmp7dbzz7bo.db", "event": "Database operations initialized", "level": "info", "timestamp": "2025-07-31T06:47:52.721294Z"}
{"event": "Created script graph node 7d7b7666-931d-4105-b989-31a0dafff725 for 'Test Script'", "level": "info", "timestamp": "2025-07-31T06:47:52.730272Z"}
{"script_id": "628a6434-d55c-4fe8-9861-e137a4f4dab7", "title": "Test Script", "event": "Stored script", "level": "info", "timestamp": "2025-07-31T06:47:52.732998Z"}
[32mPASSED[0m{"event": "Shutting down ScriptRAG API", "level": "info", "timestamp": "2025-07-31T06:47:52.737033Z"}

tests/test_api_validation.py::TestScriptUploadValidation::test_upload_author_whitespace {"event": "Migration sequence is valid", "level": "info", "timestamp": "2025-07-31T06:47:53.069623Z"}
{"event": "Applying 5 pending migrations", "level": "info", "timestamp": "2025-07-31T06:47:53.070519Z"}
{"event": "Applying Migration 1: Create initial database schema", "level": "info", "timestamp": "2025-07-31T06:47:53.070664Z"}
{"event": "Applying initial schema migration", "level": "info", "timestamp": "2025-07-31T06:47:53.071053Z"}
{"event": "Initial schema migration completed", "level": "info", "timestamp": "2025-07-31T06:47:53.168548Z"}
{"event": "Successfully applied migration 1", "level": "info", "timestamp": "2025-07-31T06:47:53.170257Z"}
{"event": "Applying Migration 2: Add sqlite-vec vector storage support to embeddings table", "level": "info", "timestamp": "2025-07-31T06:47:53.170451Z"}
{"event": "Vector storage migration applied successfully", "level": "info", "timestamp": "2025-07-31T06:47:53.184353Z"}
{"event": "Successfully applied migration 2", "level": "info", "timestamp": "2025-07-31T06:47:53.186126Z"}
{"event": "Applying Migration 3: Fix FTS table column naming to match base tables", "level": "info", "timestamp": "2025-07-31T06:47:53.186381Z"}
{"event": "Applying FTS column naming fix migration", "level": "info", "timestamp": "2025-07-31T06:47:53.186845Z"}
{"event": "FTS column naming fix migration applied successfully", "level": "info", "timestamp": "2025-07-31T06:47:53.210204Z"}
{"event": "Successfully applied migration 3", "level": "info", "timestamp": "2025-07-31T06:47:53.211488Z"}
{"event": "Applying Migration 4: Add scene dependencies table for logical ordering", "level": "info", "timestamp": "2025-07-31T06:47:53.211689Z"}
{"event": "Applying scene dependencies migration", "level": "info", "timestamp": "2025-07-31T06:47:53.212123Z"}
{"event": "Scene dependencies migration applied successfully", "level": "info", "timestamp": "2025-07-31T06:47:53.220550Z"}
{"event": "Successfully applied migration 4", "level": "info", "timestamp": "2025-07-31T06:47:53.222396Z"}
{"event": "Applying Migration 0: ", "level": "info", "timestamp": "2025-07-31T06:47:53.222593Z"}
{"event": "Applying Script Bible migration", "level": "info", "timestamp": "2025-07-31T06:47:53.223343Z"}
{"event": "Script Bible migration applied successfully", "level": "info", "timestamp": "2025-07-31T06:47:53.312672Z"}
{"event": "Successfully applied migration 5", "level": "info", "timestamp": "2025-07-31T06:47:53.314438Z"}
{"event": "Database migration completed successfully", "level": "info", "timestamp": "2025-07-31T06:47:53.314582Z"}
{"event": "Starting ScriptRAG API", "level": "info", "timestamp": "2025-07-31T06:47:53.421698Z"}
{"event": "DatabaseOperations uses synchronous SQLite operations in async functions. This blocks the event loop and should be fixed for production use.", "level": "warning", "timestamp": "2025-07-31T06:47:53.422242Z"}
{"event": "Migration sequence is valid", "level": "info", "timestamp": "2025-07-31T06:47:53.422574Z"}
{"event": "Database is already at latest version", "level": "info", "timestamp": "2025-07-31T06:47:53.424948Z"}
{"db_url": "sqlite+aiosqlite:////tmp/tmpjn15hssx.db", "event": "Database operations initialized", "level": "info", "timestamp": "2025-07-31T06:47:53.429310Z"}
[32mPASSED[0m{"event": "Shutting down ScriptRAG API", "level": "info", "timestamp": "2025-07-31T06:47:53.436546Z"}

tests/test_api_validation.py::TestScriptUploadValidation::test_upload_author_too_long {"event": "Migration sequence is valid", "level": "info", "timestamp": "2025-07-31T06:47:53.776373Z"}
{"event": "Applying 5 pending migrations", "level": "info", "timestamp": "2025-07-31T06:47:53.777828Z"}
{"event": "Applying Migration 1: Create initial database schema", "level": "info", "timestamp": "2025-07-31T06:47:53.778039Z"}
{"event": "Applying initial schema migration", "level": "info", "timestamp": "2025-07-31T06:47:53.778504Z"}
{"event": "Initial schema migration completed", "level": "info", "timestamp": "2025-07-31T06:47:53.882672Z"}
{"event": "Successfully applied migration 1", "level": "info", "timestamp": "2025-07-31T06:47:53.884070Z"}
{"event": "Applying Migration 2: Add sqlite-vec vector storage support to embeddings table", "level": "info", "timestamp": "2025-07-31T06:47:53.884251Z"}
{"event": "Vector storage migration applied successfully", "level": "info", "timestamp": "2025-07-31T06:47:53.898860Z"}
{"event": "Successfully applied migration 2", "level": "info", "timestamp": "2025-07-31T06:47:53.900281Z"}
{"event": "Applying Migration 3: Fix FTS table column naming to match base tables", "level": "info", "timestamp": "2025-07-31T06:47:53.900464Z"}
{"event": "Applying FTS column naming fix migration", "level": "info", "timestamp": "2025-07-31T06:47:53.900968Z"}
{"event": "FTS column naming fix migration applied successfully", "level": "info", "timestamp": "2025-07-31T06:47:53.924600Z"}
{"event": "Successfully applied migration 3", "level": "info", "timestamp": "2025-07-31T06:47:53.926607Z"}
{"event": "Applying Migration 4: Add scene dependencies table for logical ordering", "level": "info", "timestamp": "2025-07-31T06:47:53.926912Z"}
{"event": "Applying scene dependencies migration", "level": "info", "timestamp": "2025-07-31T06:47:53.927412Z"}
{"event": "Scene dependencies migration applied successfully", "level": "info", "timestamp": "2025-07-31T06:47:53.946491Z"}
{"event": "Successfully applied migration 4", "level": "info", "timestamp": "2025-07-31T06:47:53.948010Z"}
{"event": "Applying Migration 0: ", "level": "info", "timestamp": "2025-07-31T06:47:53.948201Z"}
{"event": "Applying Script Bible migration", "level": "info", "timestamp": "2025-07-31T06:47:53.948609Z"}
{"event": "Script Bible migration applied successfully", "level": "info", "timestamp": "2025-07-31T06:47:54.041434Z"}
{"event": "Successfully applied migration 5", "level": "info", "timestamp": "2025-07-31T06:47:54.043196Z"}
{"event": "Database migration completed successfully", "level": "info", "timestamp": "2025-07-31T06:47:54.043348Z"}
{"event": "Starting ScriptRAG API", "level": "info", "timestamp": "2025-07-31T06:47:54.160723Z"}
{"event": "DatabaseOperations uses synchronous SQLite operations in async functions. This blocks the event loop and should be fixed for production use.", "level": "warning", "timestamp": "2025-07-31T06:47:54.161338Z"}
{"event": "Migration sequence is valid", "level": "info", "timestamp": "2025-07-31T06:47:54.161713Z"}
{"event": "Database is already at latest version", "level": "info", "timestamp": "2025-07-31T06:47:54.164103Z"}
{"db_url": "sqlite+aiosqlite:////tmp/tmpc00qqukr.db", "event": "Database operations initialized", "level": "info", "timestamp": "2025-07-31T06:47:54.168670Z"}
[32mPASSED[0m{"event": "Shutting down ScriptRAG API", "level": "info", "timestamp": "2025-07-31T06:47:54.176491Z"}

tests/test_api_validation.py::TestScriptUploadValidation::test_upload_author_special_chars_only {"event": "Migration sequence is valid", "level": "info", "timestamp": "2025-07-31T06:47:54.534247Z"}
{"event": "Applying 5 pending migrations", "level": "info", "timestamp": "2025-07-31T06:47:54.535223Z"}
{"event": "Applying Migration 1: Create initial database schema", "level": "info", "timestamp": "2025-07-31T06:47:54.535396Z"}
{"event": "Applying initial schema migration", "level": "info", "timestamp": "2025-07-31T06:47:54.535792Z"}
{"event": "Initial schema migration completed", "level": "info", "timestamp": "2025-07-31T06:47:54.635588Z"}
{"event": "Successfully applied migration 1", "level": "info", "timestamp": "2025-07-31T06:47:54.637362Z"}
{"event": "Applying Migration 2: Add sqlite-vec vector storage support to embeddings table", "level": "info", "timestamp": "2025-07-31T06:47:54.637564Z"}
{"event": "Vector storage migration applied successfully", "level": "info", "timestamp": "2025-07-31T06:47:54.651981Z"}
{"event": "Successfully applied migration 2", "level": "info", "timestamp": "2025-07-31T06:47:54.653868Z"}
{"event": "Applying Migration 3: Fix FTS table column naming to match base tables", "level": "info", "timestamp": "2025-07-31T06:47:54.654069Z"}
{"event": "Applying FTS column naming fix migration", "level": "info", "timestamp": "2025-07-31T06:47:54.654482Z"}
{"event": "FTS column naming fix migration applied successfully", "level": "info", "timestamp": "2025-07-31T06:47:54.678450Z"}
{"event": "Successfully applied migration 3", "level": "info", "timestamp": "2025-07-31T06:47:54.679818Z"}
{"event": "Applying Migration 4: Add scene dependencies table for logical ordering", "level": "info", "timestamp": "2025-07-31T06:47:54.680021Z"}
{"event": "Applying scene dependencies migration", "level": "info", "timestamp": "2025-07-31T06:47:54.680407Z"}
{"event": "Scene dependencies migration applied successfully", "level": "info", "timestamp": "2025-07-31T06:47:54.689771Z"}
{"event": "Successfully applied migration 4", "level": "info", "timestamp": "2025-07-31T06:47:54.691125Z"}
{"event": "Applying Migration 0: ", "level": "info", "timestamp": "2025-07-31T06:47:54.691307Z"}
{"event": "Applying Script Bible migration", "level": "info", "timestamp": "2025-07-31T06:47:54.691701Z"}
{"event": "Script Bible migration applied successfully", "level": "info", "timestamp": "2025-07-31T06:47:54.782653Z"}
{"event": "Successfully applied migration 5", "level": "info", "timestamp": "2025-07-31T06:47:54.784651Z"}
{"event": "Database migration completed successfully", "level": "info", "timestamp": "2025-07-31T06:47:54.784876Z"}
{"event": "Starting ScriptRAG API", "level": "info", "timestamp": "2025-07-31T06:47:54.901791Z"}
{"event": "DatabaseOperations uses synchronous SQLite operations in async functions. This blocks the event loop and should be fixed for production use.", "level": "warning", "timestamp": "2025-07-31T06:47:54.902270Z"}
{"event": "Migration sequence is valid", "level": "info", "timestamp": "2025-07-31T06:47:54.902474Z"}
{"event": "Database is already at latest version", "level": "info", "timestamp": "2025-07-31T06:47:54.904723Z"}
{"db_url": "sqlite+aiosqlite:////tmp/tmp6q3opzb5.db", "event": "Database operations initialized", "level": "info", "timestamp": "2025-07-31T06:47:54.909091Z"}
[32mPASSED[0m{"event": "Shutting down ScriptRAG API", "level": "info", "timestamp": "2025-07-31T06:47:54.917012Z"}

tests/test_api_validation.py::TestScriptUploadValidation::test_upload_author_optional {"event": "Migration sequence is valid", "level": "info", "timestamp": "2025-07-31T06:47:55.271420Z"}
{"event": "Applying 5 pending migrations", "level": "info", "timestamp": "2025-07-31T06:47:55.272348Z"}
{"event": "Applying Migration 1: Create initial database schema", "level": "info", "timestamp": "2025-07-31T06:47:55.272493Z"}
{"event": "Applying initial schema migration", "level": "info", "timestamp": "2025-07-31T06:47:55.272876Z"}
{"event": "Initial schema migration completed", "level": "info", "timestamp": "2025-07-31T06:47:55.372804Z"}
{"event": "Successfully applied migration 1", "level": "info", "timestamp": "2025-07-31T06:47:55.374774Z"}
{"event": "Applying Migration 2: Add sqlite-vec vector storage support to embeddings table", "level": "info", "timestamp": "2025-07-31T06:47:55.374993Z"}
{"event": "Vector storage migration applied successfully", "level": "info", "timestamp": "2025-07-31T06:47:55.390722Z"}
{"event": "Successfully applied migration 2", "level": "info", "timestamp": "2025-07-31T06:47:55.392565Z"}
{"event": "Applying Migration 3: Fix FTS table column naming to match base tables", "level": "info", "timestamp": "2025-07-31T06:47:55.392856Z"}
{"event": "Applying FTS column naming fix migration", "level": "info", "timestamp": "2025-07-31T06:47:55.393417Z"}
{"event": "FTS column naming fix migration applied successfully", "level": "info", "timestamp": "2025-07-31T06:47:55.422768Z"}
{"event": "Successfully applied migration 3", "level": "info", "timestamp": "2025-07-31T06:47:55.424534Z"}
{"event": "Applying Migration 4: Add scene dependencies table for logical ordering", "level": "info", "timestamp": "2025-07-31T06:47:55.424729Z"}
{"event": "Applying scene dependencies migration", "level": "info", "timestamp": "2025-07-31T06:47:55.425247Z"}
{"event": "Scene dependencies migration applied successfully", "level": "info", "timestamp": "2025-07-31T06:47:55.435466Z"}
{"event": "Successfully applied migration 4", "level": "info", "timestamp": "2025-07-31T06:47:55.436957Z"}
{"event": "Applying Migration 0: ", "level": "info", "timestamp": "2025-07-31T06:47:55.437246Z"}
{"event": "Applying Script Bible migration", "level": "info", "timestamp": "2025-07-31T06:47:55.437627Z"}
{"event": "Script Bible migration applied successfully", "level": "info", "timestamp": "2025-07-31T06:47:55.534276Z"}
{"event": "Successfully applied migration 5", "level": "info", "timestamp": "2025-07-31T06:47:55.536175Z"}
{"event": "Database migration completed successfully", "level": "info", "timestamp": "2025-07-31T06:47:55.536343Z"}
{"event": "Starting ScriptRAG API", "level": "info", "timestamp": "2025-07-31T06:47:55.654695Z"}
{"event": "DatabaseOperations uses synchronous SQLite operations in async functions. This blocks the event loop and should be fixed for production use.", "level": "warning", "timestamp": "2025-07-31T06:47:55.655280Z"}
{"event": "Migration sequence is valid", "level": "info", "timestamp": "2025-07-31T06:47:55.655622Z"}
{"event": "Database is already at latest version", "level": "info", "timestamp": "2025-07-31T06:47:55.658109Z"}
{"db_url": "sqlite+aiosqlite:////tmp/tmpap2mk0wx.db", "event": "Database operations initialized", "level": "info", "timestamp": "2025-07-31T06:47:55.662640Z"}
{"event": "Created script graph node d86e11a7-91fd-4d4c-8b5e-6ffcb3982129 for 'Test Script'", "level": "info", "timestamp": "2025-07-31T06:47:55.687914Z"}
{"script_id": "142cc738-18b3-4fab-97bf-c009cfa32c31", "title": "Test Script", "event": "Stored script", "level": "info", "timestamp": "2025-07-31T06:47:55.691321Z"}
[32mPASSED[0m{"event": "Shutting down ScriptRAG API", "level": "info", "timestamp": "2025-07-31T06:47:55.695630Z"}

tests/test_api_validation.py::TestScriptUploadValidation::test_upload_valid_script {"event": "Migration sequence is valid", "level": "info", "timestamp": "2025-07-31T06:47:56.048570Z"}
{"event": "Applying 5 pending migrations", "level": "info", "timestamp": "2025-07-31T06:47:56.049667Z"}
{"event": "Applying Migration 1: Create initial database schema", "level": "info", "timestamp": "2025-07-31T06:47:56.049880Z"}
{"event": "Applying initial schema migration", "level": "info", "timestamp": "2025-07-31T06:47:56.050405Z"}
{"event": "Initial schema migration completed", "level": "info", "timestamp": "2025-07-31T06:47:56.157305Z"}
{"event": "Successfully applied migration 1", "level": "info", "timestamp": "2025-07-31T06:47:56.158963Z"}
{"event": "Applying Migration 2: Add sqlite-vec vector storage support to embeddings table", "level": "info", "timestamp": "2025-07-31T06:47:56.159156Z"}
{"event": "Vector storage migration applied successfully", "level": "info", "timestamp": "2025-07-31T06:47:56.174479Z"}
{"event": "Successfully applied migration 2", "level": "info", "timestamp": "2025-07-31T06:47:56.176090Z"}
{"event": "Applying Migration 3: Fix FTS table column naming to match base tables", "level": "info", "timestamp": "2025-07-31T06:47:56.176278Z"}
{"event": "Applying FTS column naming fix migration", "level": "info", "timestamp": "2025-07-31T06:47:56.176692Z"}
{"event": "FTS column naming fix migration applied successfully", "level": "info", "timestamp": "2025-07-31T06:47:56.202697Z"}
{"event": "Successfully applied migration 3", "level": "info", "timestamp": "2025-07-31T06:47:56.204196Z"}
{"event": "Applying Migration 4: Add scene dependencies table for logical ordering", "level": "info", "timestamp": "2025-07-31T06:47:56.204388Z"}
{"event": "Applying scene dependencies migration", "level": "info", "timestamp": "2025-07-31T06:47:56.204838Z"}
{"event": "Scene dependencies migration applied successfully", "level": "info", "timestamp": "2025-07-31T06:47:56.214555Z"}
{"event": "Successfully applied migration 4", "level": "info", "timestamp": "2025-07-31T06:47:56.216117Z"}
{"event": "Applying Migration 0: ", "level": "info", "timestamp": "2025-07-31T06:47:56.216297Z"}
{"event": "Applying Script Bible migration", "level": "info", "timestamp": "2025-07-31T06:47:56.216691Z"}
{"event": "Script Bible migration applied successfully", "level": "info", "timestamp": "2025-07-31T06:47:56.311166Z"}
{"event": "Successfully applied migration 5", "level": "info", "timestamp": "2025-07-31T06:47:56.312937Z"}
{"event": "Database migration completed successfully", "level": "info", "timestamp": "2025-07-31T06:47:56.313087Z"}
{"event": "Starting ScriptRAG API", "level": "info", "timestamp": "2025-07-31T06:47:56.424328Z"}
{"event": "DatabaseOperations uses synchronous SQLite operations in async functions. This blocks the event loop and should be fixed for production use.", "level": "warning", "timestamp": "2025-07-31T06:47:56.424943Z"}
{"event": "Migration sequence is valid", "level": "info", "timestamp": "2025-07-31T06:47:56.425313Z"}
{"event": "Database is already at latest version", "level": "info", "timestamp": "2025-07-31T06:47:56.427577Z"}
{"db_url": "sqlite+aiosqlite:////tmp/tmp_scv90ii.db", "event": "Database operations initialized", "level": "info", "timestamp": "2025-07-31T06:47:56.431932Z"}
{"event": "Created script graph node cc30e36c-263c-429d-8551-3f3597442149 for 'The Great Adventure'", "level": "info", "timestamp": "2025-07-31T06:47:56.443436Z"}
{"script_id": "ca9949f5-4c8d-480f-8d7b-850d5e7a50e2", "title": "The Great Adventure", "event": "Stored script", "level": "info", "timestamp": "2025-07-31T06:47:56.447452Z"}
[32mPASSED[0m{"event": "Shutting down ScriptRAG API", "level": "info", "timestamp": "2025-07-31T06:47:56.452399Z"}

tests/test_api_validation.py::TestScriptUploadValidation::test_upload_fountain_with_dialogue {"event": "Migration sequence is valid", "level": "info", "timestamp": "2025-07-31T06:47:56.788657Z"}
{"event": "Applying 5 pending migrations", "level": "info", "timestamp": "2025-07-31T06:47:56.789658Z"}
{"event": "Applying Migration 1: Create initial database schema", "level": "info", "timestamp": "2025-07-31T06:47:56.789823Z"}
{"event": "Applying initial schema migration", "level": "info", "timestamp": "2025-07-31T06:47:56.790175Z"}
{"event": "Initial schema migration completed", "level": "info", "timestamp": "2025-07-31T06:47:56.900038Z"}
{"event": "Successfully applied migration 1", "level": "info", "timestamp": "2025-07-31T06:47:56.901718Z"}
{"event": "Applying Migration 2: Add sqlite-vec vector storage support to embeddings table", "level": "info", "timestamp": "2025-07-31T06:47:56.901945Z"}
{"event": "Vector storage migration applied successfully", "level": "info", "timestamp": "2025-07-31T06:47:56.916549Z"}
{"event": "Successfully applied migration 2", "level": "info", "timestamp": "2025-07-31T06:47:56.918554Z"}
{"event": "Applying Migration 3: Fix FTS table column naming to match base tables", "level": "info", "timestamp": "2025-07-31T06:47:56.918794Z"}
{"event": "Applying FTS column naming fix migration", "level": "info", "timestamp": "2025-07-31T06:47:56.919220Z"}
{"event": "FTS column naming fix migration applied successfully", "level": "info", "timestamp": "2025-07-31T06:47:56.946891Z"}
{"event": "Successfully applied migration 3", "level": "info", "timestamp": "2025-07-31T06:47:56.948243Z"}
{"event": "Applying Migration 4: Add scene dependencies table for logical ordering", "level": "info", "timestamp": "2025-07-31T06:47:56.948440Z"}
{"event": "Applying scene dependencies migration", "level": "info", "timestamp": "2025-07-31T06:47:56.948908Z"}
{"event": "Scene dependencies migration applied successfully", "level": "info", "timestamp": "2025-07-31T06:47:56.958181Z"}
{"event": "Successfully applied migration 4", "level": "info", "timestamp": "2025-07-31T06:47:56.959705Z"}
{"event": "Applying Migration 0: ", "level": "info", "timestamp": "2025-07-31T06:47:56.959966Z"}
{"event": "Applying Script Bible migration", "level": "info", "timestamp": "2025-07-31T06:47:56.960348Z"}
{"event": "Script Bible migration applied successfully", "level": "info", "timestamp": "2025-07-31T06:47:57.090462Z"}
{"event": "Successfully applied migration 5", "level": "info", "timestamp": "2025-07-31T06:47:57.092878Z"}
{"event": "Database migration completed successfully", "level": "info", "timestamp": "2025-07-31T06:47:57.093088Z"}
{"event": "Starting ScriptRAG API", "level": "info", "timestamp": "2025-07-31T06:47:57.244911Z"}
{"event": "DatabaseOperations uses synchronous SQLite operations in async functions. This blocks the event loop and should be fixed for production use.", "level": "warning", "timestamp": "2025-07-31T06:47:57.245356Z"}
{"event": "Migration sequence is valid", "level": "info", "timestamp": "2025-07-31T06:47:57.245588Z"}
{"event": "Database is already at latest version", "level": "info", "timestamp": "2025-07-31T06:47:57.248265Z"}
{"db_url": "sqlite+aiosqlite:////tmp/tmp35nafs6g.db", "event": "Database operations initialized", "level": "info", "timestamp": "2025-07-31T06:47:57.254414Z"}
{"event": "Created script graph node 35da0d14-f92b-4b40-b41f-089d0ec4545e for 'Dialogue Test'", "level": "info", "timestamp": "2025-07-31T06:47:57.265789Z"}
{"script_id": "cc2d880a-c9b8-48ee-ac0c-d0fae1252b04", "title": "Dialogue Test", "event": "Stored script", "level": "info", "timestamp": "2025-07-31T06:47:57.266030Z"}
[32mPASSED[0m{"event": "Shutting down ScriptRAG API", "level": "info", "timestamp": "2025-07-31T06:47:57.270782Z"}

tests/test_api_validation.py::TestScriptUploadValidation::test_upload_fountain_with_action {"event": "Migration sequence is valid", "level": "info", "timestamp": "2025-07-31T06:47:57.614878Z"}
{"event": "Applying 5 pending migrations", "level": "info", "timestamp": "2025-07-31T06:47:57.615919Z"}
{"event": "Applying Migration 1: Create initial database schema", "level": "info", "timestamp": "2025-07-31T06:47:57.616063Z"}
{"event": "Applying initial schema migration", "level": "info", "timestamp": "2025-07-31T06:47:57.616364Z"}
{"event": "Initial schema migration completed", "level": "info", "timestamp": "2025-07-31T06:47:57.718128Z"}
{"event": "Successfully applied migration 1", "level": "info", "timestamp": "2025-07-31T06:47:57.719619Z"}
{"event": "Applying Migration 2: Add sqlite-vec vector storage support to embeddings table", "level": "info", "timestamp": "2025-07-31T06:47:57.719821Z"}
{"event": "Vector storage migration applied successfully", "level": "info", "timestamp": "2025-07-31T06:47:57.733494Z"}
{"event": "Successfully applied migration 2", "level": "info", "timestamp": "2025-07-31T06:47:57.735142Z"}
{"event": "Applying Migration 3: Fix FTS table column naming to match base tables", "level": "info", "timestamp": "2025-07-31T06:47:57.735353Z"}
{"event": "Applying FTS column naming fix migration", "level": "info", "timestamp": "2025-07-31T06:47:57.735805Z"}
{"event": "FTS column naming fix migration applied successfully", "level": "info", "timestamp": "2025-07-31T06:47:57.760203Z"}
{"event": "Successfully applied migration 3", "level": "info", "timestamp": "2025-07-31T06:47:57.761775Z"}
{"event": "Applying Migration 4: Add scene dependencies table for logical ordering", "level": "info", "timestamp": "2025-07-31T06:47:57.761966Z"}
{"event": "Applying scene dependencies migration", "level": "info", "timestamp": "2025-07-31T06:47:57.762319Z"}
{"event": "Scene dependencies migration applied successfully", "level": "info", "timestamp": "2025-07-31T06:47:57.770910Z"}
{"event": "Successfully applied migration 4", "level": "info", "timestamp": "2025-07-31T06:47:57.772474Z"}
{"event": "Applying Migration 0: ", "level": "info", "timestamp": "2025-07-31T06:47:57.772673Z"}
{"event": "Applying Script Bible migration", "level": "info", "timestamp": "2025-07-31T06:47:57.773122Z"}
{"event": "Script Bible migration applied successfully", "level": "info", "timestamp": "2025-07-31T06:47:57.881150Z"}
{"event": "Successfully applied migration 5", "level": "info", "timestamp": "2025-07-31T06:47:57.883138Z"}
{"event": "Database migration completed successfully", "level": "info", "timestamp": "2025-07-31T06:47:57.883325Z"}
{"event": "Starting ScriptRAG API", "level": "info", "timestamp": "2025-07-31T06:47:57.995028Z"}
{"event": "DatabaseOperations uses synchronous SQLite operations in async functions. This blocks the event loop and should be fixed for production use.", "level": "warning", "timestamp": "2025-07-31T06:47:57.995365Z"}
{"event": "Migration sequence is valid", "level": "info", "timestamp": "2025-07-31T06:47:57.995577Z"}
{"event": "Database is already at latest version", "level": "info", "timestamp": "2025-07-31T06:47:57.997964Z"}
{"db_url": "sqlite+aiosqlite:////tmp/tmplf0jp730.db", "event": "Database operations initialized", "level": "info", "timestamp": "2025-07-31T06:47:58.002437Z"}
{"event": "Created script graph node c1ecf5d1-5fa6-4240-b2d2-f5a528ba716c for 'Action Test'", "level": "info", "timestamp": "2025-07-31T06:47:58.012390Z"}
{"script_id": "fc90a0b4-2fc4-4728-8a8f-7bdf3263a5c2", "title": "Action Test", "event": "Stored script", "level": "info", "timestamp": "2025-07-31T06:47:58.012570Z"}
[32mPASSED[0m{"event": "Shutting down ScriptRAG API", "level": "info", "timestamp": "2025-07-31T06:47:58.016394Z"}

tests/test_api_validation.py::TestScriptFileUploadValidation::test_upload_file_wrong_extension {"event": "Migration sequence is valid", "level": "info", "timestamp": "2025-07-31T06:47:58.359021Z"}
{"event": "Applying 5 pending migrations", "level": "info", "timestamp": "2025-07-31T06:47:58.360326Z"}
{"event": "Applying Migration 1: Create initial database schema", "level": "info", "timestamp": "2025-07-31T06:47:58.360533Z"}
{"event": "Applying initial schema migration", "level": "info", "timestamp": "2025-07-31T06:47:58.361005Z"}
{"event": "Initial schema migration completed", "level": "info", "timestamp": "2025-07-31T06:47:58.480774Z"}
{"event": "Successfully applied migration 1", "level": "info", "timestamp": "2025-07-31T06:47:58.482450Z"}
{"event": "Applying Migration 2: Add sqlite-vec vector storage support to embeddings table", "level": "info", "timestamp": "2025-07-31T06:47:58.482646Z"}
{"event": "Vector storage migration applied successfully", "level": "info", "timestamp": "2025-07-31T06:47:58.496538Z"}
{"event": "Successfully applied migration 2", "level": "info", "timestamp": "2025-07-31T06:47:58.498359Z"}
{"event": "Applying Migration 3: Fix FTS table column naming to match base tables", "level": "info", "timestamp": "2025-07-31T06:47:58.498555Z"}
{"event": "Applying FTS column naming fix migration", "level": "info", "timestamp": "2025-07-31T06:47:58.499024Z"}
{"event": "FTS column naming fix migration applied successfully", "level": "info", "timestamp": "2025-07-31T06:47:58.523677Z"}
{"event": "Successfully applied migration 3", "level": "info", "timestamp": "2025-07-31T06:47:58.525018Z"}
{"event": "Applying Migration 4: Add scene dependencies table for logical ordering", "level": "info", "timestamp": "2025-07-31T06:47:58.525245Z"}
{"event": "Applying scene dependencies migration", "level": "info", "timestamp": "2025-07-31T06:47:58.525664Z"}
{"event": "Scene dependencies migration applied successfully", "level": "info", "timestamp": "2025-07-31T06:47:58.535058Z"}
{"event": "Successfully applied migration 4", "level": "info", "timestamp": "2025-07-31T06:47:58.536360Z"}
{"event": "Applying Migration 0: ", "level": "info", "timestamp": "2025-07-31T06:47:58.536539Z"}
{"event": "Applying Script Bible migration", "level": "info", "timestamp": "2025-07-31T06:47:58.536958Z"}
{"event": "Script Bible migration applied successfully", "level": "info", "timestamp": "2025-07-31T06:47:58.634005Z"}
{"event": "Successfully applied migration 5", "level": "info", "timestamp": "2025-07-31T06:47:58.635934Z"}
{"event": "Database migration completed successfully", "level": "info", "timestamp": "2025-07-31T06:47:58.636098Z"}
{"event": "Starting ScriptRAG API", "level": "info", "timestamp": "2025-07-31T06:47:58.773570Z"}
{"event": "DatabaseOperations uses synchronous SQLite operations in async functions. This blocks the event loop and should be fixed for production use.", "level": "warning", "timestamp": "2025-07-31T06:47:58.774015Z"}
{"event": "Migration sequence is valid", "level": "info", "timestamp": "2025-07-31T06:47:58.774305Z"}
{"event": "Database is already at latest version", "level": "info", "timestamp": "2025-07-31T06:47:58.777815Z"}
{"db_url": "sqlite+aiosqlite:////tmp/tmphk_i_x8v.db", "event": "Database operations initialized", "level": "info", "timestamp": "2025-07-31T06:47:58.784522Z"}
[32mPASSED[0m{"event": "Shutting down ScriptRAG API", "level": "info", "timestamp": "2025-07-31T06:47:58.798112Z"}

tests/test_api_validation.py::TestScriptFileUploadValidation::test_upload_file_valid_fountain {"event": "Migration sequence is valid", "level": "info", "timestamp": "2025-07-31T06:47:59.165010Z"}
{"event": "Applying 5 pending migrations", "level": "info", "timestamp": "2025-07-31T06:47:59.165951Z"}
{"event": "Applying Migration 1: Create initial database schema", "level": "info", "timestamp": "2025-07-31T06:47:59.166090Z"}
{"event": "Applying initial schema migration", "level": "info", "timestamp": "2025-07-31T06:47:59.166382Z"}
{"event": "Initial schema migration completed", "level": "info", "timestamp": "2025-07-31T06:47:59.274574Z"}
{"event": "Successfully applied migration 1", "level": "info", "timestamp": "2025-07-31T06:47:59.276563Z"}
{"event": "Applying Migration 2: Add sqlite-vec vector storage support to embeddings table", "level": "info", "timestamp": "2025-07-31T06:47:59.276898Z"}
{"event": "Vector storage migration applied successfully", "level": "info", "timestamp": "2025-07-31T06:47:59.291763Z"}
{"event": "Successfully applied migration 2", "level": "info", "timestamp": "2025-07-31T06:47:59.293266Z"}
{"event": "Applying Migration 3: Fix FTS table column naming to match base tables", "level": "info", "timestamp": "2025-07-31T06:47:59.293460Z"}
{"event": "Applying FTS column naming fix migration", "level": "info", "timestamp": "2025-07-31T06:47:59.293914Z"}
{"event": "FTS column naming fix migration applied successfully", "level": "info", "timestamp": "2025-07-31T06:47:59.318558Z"}
{"event": "Successfully applied migration 3", "level": "info", "timestamp": "2025-07-31T06:47:59.319793Z"}
{"event": "Applying Migration 4: Add scene dependencies table for logical ordering", "level": "info", "timestamp": "2025-07-31T06:47:59.319968Z"}
{"event": "Applying scene dependencies migration", "level": "info", "timestamp": "2025-07-31T06:47:59.320327Z"}
{"event": "Scene dependencies migration applied successfully", "level": "info", "timestamp": "2025-07-31T06:47:59.330438Z"}
{"event": "Successfully applied migration 4", "level": "info", "timestamp": "2025-07-31T06:47:59.332079Z"}
{"event": "Applying Migration 0: ", "level": "info", "timestamp": "2025-07-31T06:47:59.332272Z"}
{"event": "Applying Script Bible migration", "level": "info", "timestamp": "2025-07-31T06:47:59.332704Z"}
{"event": "Script Bible migration applied successfully", "level": "info", "timestamp": "2025-07-31T06:47:59.426667Z"}
{"event": "Successfully applied migration 5", "level": "info", "timestamp": "2025-07-31T06:47:59.428413Z"}
{"event": "Database migration completed successfully", "level": "info", "timestamp": "2025-07-31T06:47:59.428569Z"}
{"event": "Starting ScriptRAG API", "level": "info", "timestamp": "2025-07-31T06:47:59.540935Z"}
{"event": "DatabaseOperations uses synchronous SQLite operations in async functions. This blocks the event loop and should be fixed for production use.", "level": "warning", "timestamp": "2025-07-31T06:47:59.541376Z"}
{"event": "Migration sequence is valid", "level": "info", "timestamp": "2025-07-31T06:47:59.541569Z"}
{"event": "Database is already at latest version", "level": "info", "timestamp": "2025-07-31T06:47:59.543893Z"}
{"db_url": "sqlite+aiosqlite:////tmp/tmp2xatou3p.db", "event": "Database operations initialized", "level": "info", "timestamp": "2025-07-31T06:47:59.548227Z"}
{"event": "Created script graph node 933310fa-ac2a-4491-b06c-9fbb6a9ebc13 for 'test_script'", "level": "info", "timestamp": "2025-07-31T06:47:59.558508Z"}
{"script_id": "578e706b-38cc-4ae4-b30c-5d9eda205335", "title": "test_script", "event": "Stored script", "level": "info", "timestamp": "2025-07-31T06:47:59.561441Z"}
[32mPASSED[0m{"event": "Shutting down ScriptRAG API", "level": "info", "timestamp": "2025-07-31T06:47:59.565853Z"}

tests/test_api_validation.py::TestSceneValidation::test_create_scene_invalid_heading {"event": "Migration sequence is valid", "level": "info", "timestamp": "2025-07-31T06:47:59.910102Z"}
{"event": "Applying 5 pending migrations", "level": "info", "timestamp": "2025-07-31T06:47:59.911141Z"}
{"event": "Applying Migration 1: Create initial database schema", "level": "info", "timestamp": "2025-07-31T06:47:59.911300Z"}
{"event": "Applying initial schema migration", "level": "info", "timestamp": "2025-07-31T06:47:59.911645Z"}
{"event": "Initial schema migration completed", "level": "info", "timestamp": "2025-07-31T06:48:00.018920Z"}
{"event": "Successfully applied migration 1", "level": "info", "timestamp": "2025-07-31T06:48:00.020487Z"}
{"event": "Applying Migration 2: Add sqlite-vec vector storage support to embeddings table", "level": "info", "timestamp": "2025-07-31T06:48:00.020693Z"}
{"event": "Vector storage migration applied successfully", "level": "info", "timestamp": "2025-07-31T06:48:00.034674Z"}
{"event": "Successfully applied migration 2", "level": "info", "timestamp": "2025-07-31T06:48:00.036200Z"}
{"event": "Applying Migration 3: Fix FTS table column naming to match base tables", "level": "info", "timestamp": "2025-07-31T06:48:00.036396Z"}
{"event": "Applying FTS column naming fix migration", "level": "info", "timestamp": "2025-07-31T06:48:00.036855Z"}
{"event": "FTS column naming fix migration applied successfully", "level": "info", "timestamp": "2025-07-31T06:48:00.061727Z"}
{"event": "Successfully applied migration 3", "level": "info", "timestamp": "2025-07-31T06:48:00.063114Z"}
{"event": "Applying Migration 4: Add scene dependencies table for logical ordering", "level": "info", "timestamp": "2025-07-31T06:48:00.063309Z"}
{"event": "Applying scene dependencies migration", "level": "info", "timestamp": "2025-07-31T06:48:00.063713Z"}
{"event": "Scene dependencies migration applied successfully", "level": "info", "timestamp": "2025-07-31T06:48:00.072660Z"}
{"event": "Successfully applied migration 4", "level": "info", "timestamp": "2025-07-31T06:48:00.074236Z"}
{"event": "Applying Migration 0: ", "level": "info", "timestamp": "2025-07-31T06:48:00.074430Z"}
{"event": "Applying Script Bible migration", "level": "info", "timestamp": "2025-07-31T06:48:00.074857Z"}
{"event": "Script Bible migration applied successfully", "level": "info", "timestamp": "2025-07-31T06:48:00.167234Z"}
{"event": "Successfully applied migration 5", "level": "info", "timestamp": "2025-07-31T06:48:00.168921Z"}
{"event": "Database migration completed successfully", "level": "info", "timestamp": "2025-07-31T06:48:00.169073Z"}
{"event": "Starting ScriptRAG API", "level": "info", "timestamp": "2025-07-31T06:48:00.286491Z"}
{"event": "DatabaseOperations uses synchronous SQLite operations in async functions. This blocks the event loop and should be fixed for production use.", "level": "warning", "timestamp": "2025-07-31T06:48:00.287206Z"}
{"event": "Migration sequence is valid", "level": "info", "timestamp": "2025-07-31T06:48:00.287665Z"}
{"event": "Database is already at latest version", "level": "info", "timestamp": "2025-07-31T06:48:00.291145Z"}
{"db_url": "sqlite+aiosqlite:////tmp/tmpk_921kbt.db", "event": "Database operations initialized", "level": "info", "timestamp": "2025-07-31T06:48:00.298123Z"}
{"event": "Created script graph node e89b0d55-51fe-41e9-8fb1-7653bf848cc2 for 'Test Script'", "level": "info", "timestamp": "2025-07-31T06:48:00.308366Z"}
{"script_id": "ca94248a-34d9-42cf-bf70-2697ec514f19", "title": "Test Script", "event": "Stored script", "level": "info", "timestamp": "2025-07-31T06:48:00.311631Z"}
[32mPASSED[0m{"event": "Shutting down ScriptRAG API", "level": "info", "timestamp": "2025-07-31T06:48:00.321869Z"}

tests/test_api_validation.py::TestSceneValidation::test_create_scene_negative_number {"event": "Migration sequence is valid", "level": "info", "timestamp": "2025-07-31T06:48:00.662947Z"}
{"event": "Applying 5 pending migrations", "level": "info", "timestamp": "2025-07-31T06:48:00.663904Z"}
{"event": "Applying Migration 1: Create initial database schema", "level": "info", "timestamp": "2025-07-31T06:48:00.664049Z"}
{"event": "Applying initial schema migration", "level": "info", "timestamp": "2025-07-31T06:48:00.664351Z"}
{"event": "Initial schema migration completed", "level": "info", "timestamp": "2025-07-31T06:48:00.791138Z"}
{"event": "Successfully applied migration 1", "level": "info", "timestamp": "2025-07-31T06:48:00.792934Z"}
{"event": "Applying Migration 2: Add sqlite-vec vector storage support to embeddings table", "level": "info", "timestamp": "2025-07-31T06:48:00.793275Z"}
{"event": "Vector storage migration applied successfully", "level": "info", "timestamp": "2025-07-31T06:48:00.813527Z"}
{"event": "Successfully applied migration 2", "level": "info", "timestamp": "2025-07-31T06:48:00.815843Z"}
{"event": "Applying Migration 3: Fix FTS table column naming to match base tables", "level": "info", "timestamp": "2025-07-31T06:48:00.816140Z"}
{"event": "Applying FTS column naming fix migration", "level": "info", "timestamp": "2025-07-31T06:48:00.816805Z"}
{"event": "FTS column naming fix migration applied successfully", "level": "info", "timestamp": "2025-07-31T06:48:00.853226Z"}
{"event": "Successfully applied migration 3", "level": "info", "timestamp": "2025-07-31T06:48:00.855228Z"}
{"event": "Applying Migration 4: Add scene dependencies table for logical ordering", "level": "info", "timestamp": "2025-07-31T06:48:00.855596Z"}
{"event": "Applying scene dependencies migration", "level": "info", "timestamp": "2025-07-31T06:48:00.856284Z"}
{"event": "Scene dependencies migration applied successfully", "level": "info", "timestamp": "2025-07-31T06:48:00.867167Z"}
{"event": "Successfully applied migration 4", "level": "info", "timestamp": "2025-07-31T06:48:00.868676Z"}
{"event": "Applying Migration 0: ", "level": "info", "timestamp": "2025-07-31T06:48:00.868951Z"}
{"event": "Applying Script Bible migration", "level": "info", "timestamp": "2025-07-31T06:48:00.869557Z"}
{"event": "Script Bible migration applied successfully", "level": "info", "timestamp": "2025-07-31T06:48:00.992051Z"}
{"event": "Successfully applied migration 5", "level": "info", "timestamp": "2025-07-31T06:48:00.994806Z"}
{"event": "Database migration completed successfully", "level": "info", "timestamp": "2025-07-31T06:48:00.994975Z"}
{"event": "Starting ScriptRAG API", "level": "info", "timestamp": "2025-07-31T06:48:01.115934Z"}
{"event": "DatabaseOperations uses synchronous SQLite operations in async functions. This blocks the event loop and should be fixed for production use.", "level": "warning", "timestamp": "2025-07-31T06:48:01.116167Z"}
{"event": "Migration sequence is valid", "level": "info", "timestamp": "2025-07-31T06:48:01.116344Z"}
{"event": "Database is already at latest version", "level": "info", "timestamp": "2025-07-31T06:48:01.118774Z"}
{"db_url": "sqlite+aiosqlite:////tmp/tmp0a8gu12v.db", "event": "Database operations initialized", "level": "info", "timestamp": "2025-07-31T06:48:01.123264Z"}
{"event": "Created script graph node f5e5b03d-164a-452a-8ee5-42a546d92d39 for 'Test Script'", "level": "info", "timestamp": "2025-07-31T06:48:01.132166Z"}
{"script_id": "3d7898e4-ba5e-47b9-86c7-c6cfddd9ddb7", "title": "Test Script", "event": "Stored script", "level": "info", "timestamp": "2025-07-31T06:48:01.135052Z"}
[32mPASSED[0m{"event": "Shutting down ScriptRAG API", "level": "info", "timestamp": "2025-07-31T06:48:01.146500Z"}
