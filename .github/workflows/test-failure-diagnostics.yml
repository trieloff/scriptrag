name: Test Failure Diagnostics

on:
  workflow_run:
    workflows: ["CI"]
    types: [completed]
    # No branch filter - we want to catch failures on all PR branches
    # The workflow already filters by event type (pull_request) in the job condition
    # Note: This workflow doesn't use Claude Code Action directly due to workflow_run limitations

permissions:
  contents: read
  pull-requests: write
  issues: write
  actions: read  # Required to read CI logs
  checks: read   # Required to read check results
  models: read   # Enable GitHub Models for AI inference

jobs:
  analyze-failure:
    name: Analyze Test Failures with Claude
    runs-on: ubuntu-latest
    # Only run when the CI workflow failed and it's from a PR
    if: |
      github.event.workflow_run.conclusion == 'failure' &&
      github.event.workflow_run.event == 'pull_request'

    steps:
      - name: Get PR Information from Workflow Run
        id: pr-info
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GH_TOKEN_FOR_CLAUDE || github.token }}
          script: |
            // Get the PR associated with this workflow run
            const workflowRun = context.payload.workflow_run;

            // Find associated pull requests
            const { data: prs } = await github.rest.pulls.list({
              owner: context.repo.owner,
              repo: context.repo.repo,
              state: 'open',
              head: `${context.repo.owner}:${workflowRun.head_branch}`
            });

            if (prs.length === 0) {
              console.log('No open PR found for branch:', workflowRun.head_branch);
              core.setOutput('pr_found', 'false');
              return;
            }

            const pr = prs[0];
            console.log(`Found PR #${pr.number} for workflow run ${workflowRun.id}`);

            // Check if PR is from Terragon Labs
            const isTerragonPR = pr.body && pr.body.includes('terragonlabs.com/task');

            console.log(`PR #${pr.number} - Terragon Labs: ${isTerragonPR}`);

            // Extract Terry task ID if present (only for Terragon PRs)
            let taskId = null;
            let taskUrl = null;
            if (isTerragonPR) {
              const match = pr.body.match(/https:\/\/www\.terragonlabs\.com\/task\/([a-f0-9-]+)/);
              if (match) {
                taskUrl = match[0];
                taskId = match[1];
                console.log(`Found Terry task: ${taskId}`);
              }
            }

            core.setOutput('pr_found', 'true');
            core.setOutput('pr_number', pr.number.toString());
            core.setOutput('pr_branch', pr.head.ref);
            core.setOutput('is_terragon', isTerragonPR.toString());
            core.setOutput('task_id', taskId || '');
            core.setOutput('task_url', taskUrl || '');
            core.setOutput('workflow_run_id', workflowRun.id.toString());
            core.setOutput('workflow_run_url', workflowRun.html_url);

      - name: Checkout repository
        if: steps.pr-info.outputs.pr_found == 'true'
        uses: actions/checkout@v4
        with:
          fetch-depth: 1
          token: ${{ secrets.GH_TOKEN_FOR_CLAUDE || github.token }}
          ref: ${{ steps.pr-info.outputs.pr_branch }}

      - name: Install gh-workflow-peek extension
        if: steps.pr-info.outputs.pr_found == 'true'
        run: |
          # Check if gh-workflow-peek is already installed
          if ! gh extension list | grep -q "trieloff/gh-workflow-peek"; then
            echo "Installing gh-workflow-peek extension..."
            gh extension install trieloff/gh-workflow-peek
          else
            echo "gh-workflow-peek extension already installed"
          fi

          # Verify installation
          gh extension list
        env:
          GH_TOKEN: ${{ secrets.GH_TOKEN_FOR_CLAUDE || github.token }}

      - name: Analyze Test Failures
        if: steps.pr-info.outputs.pr_found == 'true'
        id: analyze-failures
        continue-on-error: true
        run: |
          # Create a script to analyze test failures
          cat > analyze_failures.sh << 'EOF'
          #!/bin/bash
          set -e

          PR_NUMBER="${{ steps.pr-info.outputs.pr_number }}"
          WORKFLOW_RUN_ID="${{ steps.pr-info.outputs.workflow_run_id }}"
          WORKFLOW_RUN_URL="${{ steps.pr-info.outputs.workflow_run_url }}"
          IS_TERRAGON="${{ steps.pr-info.outputs.is_terragon }}"
          TASK_ID="${{ steps.pr-info.outputs.task_id }}"
          TASK_URL="${{ steps.pr-info.outputs.task_url }}"

          echo "Analyzing test failures for PR #$PR_NUMBER"
          echo "Workflow Run ID: $WORKFLOW_RUN_ID"

          # Get failed jobs information
          echo "Fetching failed jobs..."
          FAILED_JOBS=$(gh api "repos/${{ github.repository }}/actions/runs/$WORKFLOW_RUN_ID/jobs" --jq '.jobs[] | select(.conclusion == "failure") | {name: .name, id: .id, url: .html_url}')

          if [ -z "$FAILED_JOBS" ]; then
            echo "No failed jobs found."
            exit 0
          fi

          # Start building the comment
          COMMENT="## 🔴 CI Build Failed

          **Workflow Run:** [$WORKFLOW_RUN_ID]($WORKFLOW_RUN_URL)

          ### 📊 Failed Jobs

          "

          # Process each failed job
          while IFS= read -r job; do
            JOB_NAME=$(echo "$job" | jq -r '.name')
            JOB_ID=$(echo "$job" | jq -r '.id')
            JOB_URL=$(echo "$job" | jq -r '.url')

            COMMENT+="#### ❌ $JOB_NAME
          [View Job]($JOB_URL)

          "

            # Try to get logs for this job
            echo "Fetching logs for job $JOB_ID..."

            # Method 1: Try gh-workflow-peek if available
            if gh extension list | grep -q "workflow-peek"; then
              echo "Using gh-workflow-peek to analyze job $JOB_ID..."
              PEEK_OUTPUT=$(gh workflow-peek "$WORKFLOW_RUN_ID" --job "$JOB_ID" 2>/dev/null || echo "")
              if [ -n "$PEEK_OUTPUT" ]; then
                # Extract key error patterns
                ERROR_PATTERNS=$(echo "$PEEK_OUTPUT" | grep -E "(FAILED|ERROR|FAIL|AssertionError|TypeError|SyntaxError)" | head -10 || echo "")
                if [ -n "$ERROR_PATTERNS" ]; then
                  COMMENT+="**Error Patterns Detected:**
          \`\`\`
          $ERROR_PATTERNS
          \`\`\`

          "
                fi
              fi
            else
              # Method 2: Try to get annotations (error messages) from the API
              echo "Fetching annotations for job $JOB_ID..."
              ANNOTATIONS=$(gh api "repos/${{ github.repository }}/check-runs?check_suite_id=$JOB_ID" --jq '.check_runs[].output.annotations[]? | "\(.annotation_level): \(.message)"' 2>/dev/null || echo "")
              if [ -n "$ANNOTATIONS" ]; then
                COMMENT+="**Error Messages:**
          \`\`\`
          $(echo "$ANNOTATIONS" | head -10)
          \`\`\`

          "
              fi
            fi
          done <<< "$(echo "$FAILED_JOBS" | jq -c '.')"

          # Add recommendations
          COMMENT+="### 💡 Quick Debugging Commands

          \`\`\`bash
          # Check all quality issues locally
          make check-fast

          # Run specific checks that commonly fail
          make lint
          make type-check
          make test
          \`\`\`
          "

          # Add Terragon Labs section if applicable
          if [ "$IS_TERRAGON" = "true" ] && [ -n "$TASK_ID" ]; then
            COMMENT+="

          ---
          @terragon-labs This CI failure needs investigation.
          - [Terry Task]($TASK_URL)
          - Use \`terry pull $TASK_ID\` to continue working on this task."
          fi

          COMMENT+="

          ---
          _This is an automated diagnostic message. For detailed logs, please check the [workflow run]($WORKFLOW_RUN_URL)._"

          # Post the comment
          echo "Posting diagnostic comment to PR #$PR_NUMBER..."
          gh pr comment "$PR_NUMBER" --body "$COMMENT"

          echo "Diagnostic comment posted successfully."
          EOF

          chmod +x analyze_failures.sh
          ./analyze_failures.sh
        env:
          GH_TOKEN: ${{ secrets.GH_TOKEN_FOR_CLAUDE || github.token }}

      - name: Post Fallback Comment on Failure
        if: steps.pr-info.outputs.pr_found == 'true' && steps.analyze-failures.outcome == 'failure'
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GH_TOKEN_FOR_CLAUDE || github.token }}
          script: |
            const prNumber = parseInt('${{ steps.pr-info.outputs.pr_number }}');
            const workflowUrl = '${{ steps.pr-info.outputs.workflow_run_url }}';
            const isTerragon = '${{ steps.pr-info.outputs.is_terragon }}' === 'true';
            const taskId = '${{ steps.pr-info.outputs.task_id }}';
            const taskUrl = '${{ steps.pr-info.outputs.task_url }}';

            let comment = [
              '## 🔴 CI Build Failed',
              '',
              '**Automated diagnostic analysis was attempted but could not complete.**',
              '',
              `Please check the [failed workflow run](${workflowUrl}) for details.`,
              '',
              '### Common failure causes to check:',
              '- [ ] Linting errors (`make lint`)',
              '- [ ] Type checking failures (`make type-check`)',
              '- [ ] Test failures (`make test`)',
              '- [ ] Security issues (`make security`)',
              '- [ ] Missing dependencies or environment setup',
              '',
              '### Quick debugging commands:',
              '```bash',
              '# Check all quality issues',
              'make check-fast',
              '',
              '# Run specific checks',
              'make lint',
              'make type-check',
              'make test',
              '```'
            ];

            if (isTerragon) {
              comment.push(
                '',
                '---',
                `@terragon-labs This CI failure needs investigation.`,
                `- [Terry Task](${taskUrl})`,
                `- Use \`terry pull ${taskId}\` to continue working on this task.`
              );
            }

            comment.push(
              '',
              '---',
              '_This is an automated message. Diagnostic analysis failed to complete._'
            );

            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: prNumber,
              body: comment.join('\n')
            });
