# Claude Code Review Workflow
#
# This workflow runs Claude Code review on pull requests:
# 1. Automatically when a new PR is opened (immediate feedback)
# 2. Can be triggered via workflow_dispatch for manual runs
#
# Note: The post-CI.yml workflow now handles triggering Claude reviews
# after successful CI runs using workflow_dispatch for better reliability.

name: Claude Code Review

on:
  pull_request:
    types: [opened, synchronize]
    # Optional: Only run on specific file changes
    # paths:
    #   - "src/**/*.py"

  # Allow manual triggering
  workflow_dispatch:
    inputs:
      pr_number:
        description: 'Pull Request number to review'
        required: false
        type: string

jobs:
  claude-review:
    # Skip only for known problematic bots
    if: |
      (github.event_name == 'pull_request' &&
       github.event.pull_request.user.login != 'dependabot[bot]' &&
       github.event.pull_request.user.login != 'renovate[bot]') ||
      github.event_name == 'workflow_dispatch'
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: write  # Changed from read to write for PR comments
      issues: read
      id-token: write
    steps:
      # Get PR information when triggered by workflow_dispatch
      - name: Get PR Information
        if: github.event_name == 'workflow_dispatch'
        id: pr-info
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GH_TOKEN_FOR_CLAUDE }}
          script: |
            const prNumber = '${{ inputs.pr_number }}';
            if (!prNumber) {
              console.log('No PR number provided for workflow_dispatch');
              core.setOutput('skip', 'true');
              return;
            }

            // Get the PR details
            const { data: pr } = await github.rest.pulls.get({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: parseInt(prNumber)
            });

            core.setOutput('pr_number', pr.number);
            core.setOutput('pr_head_ref', pr.head.ref);
            core.setOutput('skip', 'false');

      - name: Checkout repository
        if: github.event_name == 'pull_request' || steps.pr-info.outputs.skip != 'true'
        uses: actions/checkout@v4
        with:
          fetch-depth: 1
          token: ${{ secrets.GH_TOKEN_FOR_CLAUDE }}
          # For workflow_dispatch, checkout the PR branch
          ref: ${{ github.event_name == 'workflow_dispatch' && steps.pr-info.outputs.pr_head_ref || '' }}

      - name: Run Claude Code Review
        if: github.event_name == 'pull_request' || steps.pr-info.outputs.skip != 'true'
        id: claude-review
        continue-on-error: true
        uses: anthropics/claude-code-action@beta
        with:
          claude_code_oauth_token: ${{ secrets.CLAUDE_CODE_OAUTH_TOKEN }}
          # Use dedicated GitHub token for Claude to bypass OIDC issues
          github_token: ${{ secrets.GH_TOKEN_FOR_CLAUDE }}
          # For workflow_dispatch events, specify the PR number
          pr_number: ${{ github.event_name == 'workflow_dispatch' && steps.pr-info.outputs.pr_number || '' }}

          # Optional: Specify model (defaults to Claude Sonnet 4, uncomment for Claude Opus 4)
          # model: "claude-opus-4-20250514"
          # Direct prompt for automated review (no @claude mention needed)
          direct_prompt: |
            Please review this pull request and provide feedback on:
            - Code quality and best practices
            - Potential bugs or issues
            - Performance considerations
            - Security concerns
            - Test coverage

            Be constructive and helpful in your feedback.

            IMPORTANT: If you identify any issues that need to be addressed or improvements that should be made,
            please tag @terragon-labs in your review comment to ensure they are notified.

      - name: Report Claude Code Review Status
        if: always() && (github.event_name == 'pull_request' || steps.pr-info.outputs.skip != 'true')
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GH_TOKEN_FOR_CLAUDE }}
          script: |
            const reviewOutcome = '${{ steps.claude-review.outcome }}';

            // Determine PR number based on event type
            let prNumber;
            if (context.eventName === 'pull_request') {
              prNumber = context.issue.number;
            } else if (context.eventName === 'workflow_dispatch') {
              prNumber = parseInt('${{ steps.pr-info.outputs.pr_number }}');
            }

            if (!prNumber) {
              console.log('Could not determine PR number, skipping comment');
              return;
            }

            if (reviewOutcome === 'failure') {
              const comment = [
                'ü§ñ **Claude Code Review Notice**',
                '',
                '‚ö†Ô∏è The Claude Code review could not be completed due to a known issue.',
                '',
                'This is related to: https://github.com/anthropics/claude-code-action/issues/351',
                '',
                'The review failure does not indicate any problems with your code. This workflow step will continue to fail until the upstream issue is resolved.',
                '',
                '---',
                '_This is an automated message. You can safely ignore this notice._'
              ].join('\n');

              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: prNumber,
                body: comment
              });

              console.log('Claude Code Review failed - known upstream issue');
            } else if (reviewOutcome === 'success') {
              console.log('Claude Code Review completed successfully');
            } else {
              console.log(`Claude Code Review outcome: ${reviewOutcome}`);
            }

          # Optional: Use sticky comments to make Claude reuse the same comment on subsequent pushes to the same PR
          # use_sticky_comment: true
          # Optional: Customize review based on file types
          # direct_prompt: |
          #   Review this PR focusing on:
          #   - For TypeScript files: Type safety and proper interface usage
          #   - For API endpoints: Security, input validation, and error handling
          #   - For React components: Performance, accessibility, and best practices
          #   - For tests: Coverage, edge cases, and test quality
          # Optional: Different prompts for different authors
          # direct_prompt: |
          #   ${{ github.event.pull_request.author_association == 'FIRST_TIME_CONTRIBUTOR' &&
          #   'Welcome! Please review this PR from a first-time contributor. Be encouraging and provide detailed explanations for any suggestions.' ||
          #   'Please provide a thorough code review focusing on our coding standards and best practices.' }}
          # Optional: Add specific tools for running tests or linting
          # allowed_tools: "Bash(npm run test),Bash(npm run lint),Bash(npm run typecheck)"
          # Optional: Skip review for certain conditions
          # if: |
          #   !contains(github.event.pull_request.title, '[skip-review]') &&
          #   !contains(github.event.pull_request.title, '[WIP]')
